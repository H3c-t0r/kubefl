#!/usr/bin/env bash

pushd () {
    command pushd "$@" > /dev/null
}

popd () {
    command popd "$@" > /dev/null
}

usage ()
{
  echo -e "Usage: $0 [OPTIONS] COMMANDS\n"\
  'OPTIONS:\n'\
  '  -h       | --help       \n'\
  'COMMANDS:\n'\
  '  generate\n'\
  '  apply\n'\
  '\n'\
  '  add <pkg|module>\n'\
  '  ls <applications|pkgs|modules|components>\n'\
  '  cleanup [-d|--dry-run]\n'\
  '  delete\n'\
  '  user -a <name>.kubeconfig | -c <name> | -d <name> | -s <name> | -l\n'\
  '  validate <namespace> <user>\n'
}

namespace=kubeflow

printnamespace()
{
  kubectl config get-contexts | grep '^*' | awk '{print (NF==5 ? $NF : "**not_set**")}'
}

addcommand() {
  pushd $HOME/kf_app
  kfctl add $@
}

generatecommand() {
  local usageId=$(((RANDOM << 15) | RANDOM))
  pushd $HOME
  rm -rf kf_app
  kubectl config set-context $(kubectl config current-context) --namespace=$namespace 1>/dev/null
  kfctl init kf_app --platform none
  pushd kf_app
  kfctl generate all 
  kfctl add module core using core/[ambassador --platform=null --ambassadorServiceType=LoadBalancer,centraldashboard,spartakus --usageId='${usageId}' --reportUsage=true]
  kfctl add module application using application
}

applycommand() {
  pushd $HOME/kf_app
  kubectl create ns $namespace
  kubectl config set-context $(kubectl config current-context) --namespace=$namespace 1>/dev/null
  kfctl apply all
}

lscommand() {
  pushd $HOME/kf_app
  kfctl ls $@
}

cleanupcommand() {
  local dryrun='' i
  while [[ "$#" -gt "0" && $1 =~ ^- ]]; do
    case "$1" in
      -h|--help)
        echo -e "$0 cleanup [-h | --help] [--dry-run]\n"\
        '-h | --help prints help info\n'\
        '-d | --dry-run prints what it would do\n'\
        '\n'
        exit 1
        ;;
      -d|--dry-run)
        shift
        dryrun='echo'
        ;;
      *)
        echo "unknown argument $1"
        exit 1
        ;;
    esac
  done
  for i in $(kubectl get clusterrole|grep 'm$'|awk '{print $1}');do 
    $dryrun kubectl delete clusterrole $i
  done
  for i in $(kubectl get clusterrolebindings|grep 'm$'|awk '{print $1}');do 
    $dryrun kubectl delete clusterrolebindings $i
  done
  for i in $(kubectl get crds -oname);do 
    $dryrun kubectl delete $i
  done
  $dryrun kubectl delete ns kubeflow 2>/dev/null
}

deletecommand() {
  if [[ -d $HOME/kf_app ]]; then
    pushd $HOME/kf_app || ( echo "$HOME/kf_app doesn't exist" && exit 1 ) && kfctl delete all
    rm -rf $HOME/kf_app
  fi
}

useraddcommand()
{
  local user token file=$HOME/.kube/${1}.kubeconfig
  if [[ -f $file ]]; then
    user=$(cat $file |grep name:|awk -F: '{print $2}'|tr -d '[:space:]')
    token=$(cat $file |grep token:|awk -F: '{print $2}'|tr -d '[:space:]')
    kubectl config set-credentials $user --token="$token"
  else
    error "$file does not exist"
  fi
}

userlistcommand()
{
  cat $HOME/.kube/config | grep '^- name:'| awk '{print $3}'
}

userswitchcommand()
{
  local user=$1
  kubectl config set-context $(kubectl config current-context) --user=$user --namespace=$(printnamespace) 1>/dev/null
}

namespaceswitchcommand()
{
  local namespace=$1
  kubectl config set-context $(kubectl config current-context) --namespace=$namespace 1>/dev/null
}

usercreatecommand()
{
  local user=$1 token
  cat << USER_YAML | kubectl apply -f -
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: $user
  namespace: $namespace
---
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: RoleBinding
metadata:
  name: $user
  namespace: $namespace
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: view
subjects:
- kind: ServiceAccount
  name: $user
  namespace: $namespace
USER_YAML

  token=$(kubectl -n kubeflow describe secrets $(kubectl -n kubeflow get secrets | awk '/'${user}'/ {print $1}') | awk '/token:/ {print $2}')

  echo '- name: '${user} > $HOME/.kube/${user}.kubeconfig
  echo '  user:' >> $HOME/.kube/${user}.kubeconfig
  echo '    token: '$token >> $HOME/.kube/${user}.kubeconfig
}

userdeletecommand()
{
  local user=$1 
  kubectl config unset users.$user
  rm -f $HOME/.kube/${user}.kubeconfig
}

usercommand() {
  while [[ "$#" -gt "0" && $1 =~ ^- ]]; do
    case "$1" in
      -h)
        echo -e "$0 user [-acdh] name\n"\
        '-h prints help info\n'\
        '-a adds a user.kubeconfig to $HOME/.kube/config\n'\
        '-c creates a user in the profile namespace\n'\
        '-d deletes a user from $HOME/.kube/config and from the profile namespace\n'\
        '-l lists users in $HOME/.kube/config\n'\
        '-s switches to a different user\n'\
        '-n switches to a different namespace\n'\
        '\n'
        exit 1
        ;;
      -a)
        shift
        useraddcommand $@
        shift
        ;;
      -c)
        shift
        usercreatecommand $@
        shift
        ;;
      -d)
        shift
        userdeletecommand $@
        shift
        ;;
      -l)
        shift
        userlistcommand 
        ;;
      -s)
        shift
        userswitchcommand $@
        shift
        ;;
      -n)
        shift
        namespaceswitchcommand $@
        shift
        ;;
      *)
        echo "unknown argument $1"
        exit 1
        ;;
    esac
  done
}

can_i_command()
{
  local user=$1 verb=$2 resource=$3 namespace=$4 can_i
  can_i=$(kubectl auth can-i $verb $resource --as=$user -n $namespace)
  case "$can_i" in 
    yes)
      echo "✅ user ${user##*:} can $verb $resource"
      ;;
    *)
      echo "❎ user ${user##*:} can $verb $resource"
      ;;
  esac
}

validatecommand()
{
  local targetNamespace=$1 user=$2 rb kind subjectName
  rb="$(kubectl get rolebindings default -n $targetNamespace -ojson | jq '.subjects[0].name')"
  # use regex with operator =~
  if [[ $rb =~ $user ]]; then
    echo "✅ user $user created namespace $targetNamespace"
    kind=$(kubectl get rolebinding default -n $targetNamespace -ojson | jq '.subjects[0].kind' | tr -d '"')
    case "$kind" in 
      ServiceAccount)
        subjectName="system:serviceaccount:${namespace}:$user"
        ;;
      User)
        subjectName=$user
        ;;
      *)
        echo "Unknown subject kind $kind"
        exit 1
        ;;
    esac
    can_i_command $subjectName create pods $targetNamespace
    can_i_command $subjectName create notebooks.kubeflow.org $targetNamespace
  else
    echo "unable to find rolebinding $user in $targetNamespace namespace"
  fi
}

commands ()
{
  if [[ $# == 0 ]]; then
    usage
    exit 1
  fi
  while :
  do
    case "$1" in
      add)
        shift 1
        addcommand $@
        break
        ;;
      apply)
        shift 1
        applycommand $@
        break
        ;;
      cleanup)
        shift 1
        cleanupcommand $@
        break
        ;;
      delete)
        shift 1
        deletecommand $@
        break
        ;;
      generate)
        shift 1
        generatecommand $@ 
        break
        ;;
      ls|list)
        shift 1
        lscommand $@
        break
        ;;
      user)
        shift 1
        usercommand $@
        break
        ;;
      validate)
        shift 1
        validatecommand $@
        break;
        ;;
      *)
        echo "**** unknown argument $1 ****"
        exit 1
        break
        ;;
    esac
  done
}

while :
do
  case "$1" in
    -h | --help)
	  usage
	  exit 0
	  ;;
    --)
      shift
      break
      ;;
    -*)
      echo "Error: Unknown option: $1" >&2
      exit 1
      ;;
    *)
      break
      ;;
  esac
done
commands $*

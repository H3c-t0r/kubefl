//
// This function will track expected children with created children (request.children) 
// and report status information
//
function(request) {
  local util = import "util.libsonnet",
  local extendedInfo = util.toBool(%(extendedInfo)s),
  local children = %(resources)s,
  local groupedResources = %(groupedResources)s,
  local expectedChildren = util.sort(std.filter(util.validateResource, children), util.comparator),
  local createdChildren =
    std.flattenArrays(std.map(util.extractResources, util.extractGroups(request.children))),
  local groupedCreatedChildren = util.groupByResource(createdChildren),
  local foundChildren =
    util.sort(std.filterMap(util.curryResources(groupedResources, true), 
      util.getApiVersionKindAndMetadata, createdChildren), util.comparator),
  local missingChildren =
    util.sort(std.filter(util.curryResources(groupedCreatedChildren, false), expectedChildren), util.comparator),
  local assemblyPhase = {
    return::
      if std.length(foundChildren) >= std.length(expectedChildren) then
        "Succeeded"
      else
        "Pending",
  }.return,
  local info(resource) = {
    return::
      util.lower(resource.kind) + "s." + resource.apiVersion + "/" + resource.metadata.name,
  }.return,
  local emitExtendedInfo = {
    return::
      if extendedInfo == true then {
        expected: util.sort(std.map(info, expectedChildren)),
        created: util.sort(std.map(info, createdChildren)),
        found: util.sort(std.map(info, foundChildren)),
        missing: util.sort(std.map(info, missingChildren)),
      },
  }.return,
  children: foundChildren,
  status: {
    assemblyPhase: assemblyPhase,
    ready: "True",
    created: true,
    counts: {
      created_children: std.length(createdChildren),
      expected_children: std.length(expectedChildren),
      found_children: std.length(foundChildren),
      missing_children: std.length(missingChildren),
    },
    info: emitExtendedInfo,
  },
}

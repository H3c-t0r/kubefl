{"ast":null,"code":"var _jsxFileName = \"/Users/allan.chepkoy/cloud/kubeflow/components/zoradashboard/src/components/organization/organization-invite-dialog.js\",\n    _s = $RefreshSig$();\n\nimport { Fragment } from 'react';\nimport PropTypes from 'prop-types';\nimport { useFormik } from 'formik';\nimport * as Yup from 'yup';\nimport { Button, Card, Dialog, DialogActions, DialogContent, DialogTitle, Divider, FormControlLabel, FormHelperText, Grid, Radio, RadioGroup, Typography } from '@material-ui/core';\nimport { wait } from '../../utils/wait';\nimport { InputField } from '../input-field';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst roleOptions = [{\n  id: '1',\n  description: 'Edit access',\n  label: 'Editor',\n  value: 'editor'\n}, {\n  id: '2',\n  description: 'Full access & billing',\n  label: 'Administrator',\n  value: 'administrator'\n}];\nexport const OrganizationInviteDialog = props => {\n  _s();\n\n  const {\n    open,\n    onClose,\n    ...other\n  } = props;\n  const formik = useFormik({\n    initialValues: {\n      email: '',\n      fullName: '',\n      role: 'editor',\n      submit: null\n    },\n    validationSchema: Yup.object().shape({\n      email: Yup.string().email('Must be a valid email').max(255).required('Email is required'),\n      fullName: Yup.string().max(255).required('Name is required'),\n      role: Yup.mixed().oneOf(roleOptions.map(option => option.value))\n    }),\n    onSubmit: async (values, helpers) => {\n      try {\n        await wait(250);\n        helpers.setStatus({\n          success: true\n        });\n        helpers.setSubmitting(false);\n        onClose === null || onClose === void 0 ? void 0 : onClose();\n      } catch (err) {\n        console.error(err);\n        helpers.setStatus({\n          success: false\n        });\n        helpers.setErrors({\n          submit: err.message\n        });\n        helpers.setSubmitting(false);\n      }\n    }\n  });\n  return /*#__PURE__*/_jsxDEV(Dialog, {\n    onClose: onClose,\n    open: open,\n    TransitionProps: {\n      onExited: () => formik.resetForm()\n    },\n    ...other,\n    children: /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: formik.handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(DialogTitle, {\n        children: \"Invite a team member\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(DialogContent, {\n        children: /*#__PURE__*/_jsxDEV(Grid, {\n          container: true,\n          spacing: 2,\n          children: [/*#__PURE__*/_jsxDEV(Grid, {\n            item: true,\n            xs: 12,\n            children: /*#__PURE__*/_jsxDEV(InputField, {\n              error: Boolean(formik.touched.fullName && formik.errors.fullName),\n              fullWidth: true,\n              helperText: formik.touched.fullName && formik.errors.fullName,\n              label: \"Full name\",\n              name: \"fullName\",\n              onBlur: formik.handleBlur,\n              onChange: formik.handleChange,\n              value: formik.values.fullName\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 89,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 85,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Grid, {\n            item: true,\n            xs: 12,\n            children: /*#__PURE__*/_jsxDEV(InputField, {\n              error: Boolean(formik.touched.email && formik.errors.email),\n              fullWidth: true,\n              helperText: formik.touched.email && formik.errors.email,\n              label: \"Email address\",\n              name: \"email\",\n              onBlur: formik.handleBlur,\n              onChange: formik.handleChange,\n              type: \"email\",\n              value: formik.values.email\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 104,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 100,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Grid, {\n            item: true,\n            xs: 12,\n            children: [/*#__PURE__*/_jsxDEV(Typography, {\n              color: \"textPrimary\",\n              sx: {\n                mb: 1.5\n              },\n              variant: \"subtitle2\",\n              children: \"Role\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 120,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Card, {\n              variant: \"outlined\",\n              children: /*#__PURE__*/_jsxDEV(RadioGroup, {\n                name: \"role\",\n                onBlur: formik.handleBlur,\n                onChange: formik.handleChange,\n                value: formik.values.role,\n                children: roleOptions.map((option, index) => /*#__PURE__*/_jsxDEV(Fragment, {\n                  children: [/*#__PURE__*/_jsxDEV(FormControlLabel, {\n                    disableTypography: true,\n                    control: /*#__PURE__*/_jsxDEV(Radio, {\n                      color: \"primary\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 138,\n                      columnNumber: 34\n                    }, this),\n                    label: /*#__PURE__*/_jsxDEV(\"div\", {\n                      children: [/*#__PURE__*/_jsxDEV(Typography, {\n                        color: \"textPrimary\",\n                        variant: \"body1\",\n                        children: option.label\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 141,\n                        columnNumber: 29\n                      }, this), /*#__PURE__*/_jsxDEV(Typography, {\n                        color: \"textSecondary\",\n                        variant: \"caption\",\n                        children: option.description\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 147,\n                        columnNumber: 29\n                      }, this)]\n                    }, void 0, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 140,\n                      columnNumber: 27\n                    }, this),\n                    sx: {\n                      p: 1.5\n                    },\n                    value: option.value\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 136,\n                    columnNumber: 23\n                  }, this), roleOptions.length > index + 1 && /*#__PURE__*/_jsxDEV(Divider, {}, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 158,\n                    columnNumber: 58\n                  }, this)]\n                }, option.id, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 135,\n                  columnNumber: 21\n                }, this))\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 128,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 127,\n              columnNumber: 15\n            }, this), formik.touched.role && formik.errors.role && /*#__PURE__*/_jsxDEV(FormHelperText, {\n              error: true,\n              children: formik.errors.role\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 164,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 116,\n            columnNumber: 13\n          }, this), formik.errors.submit && /*#__PURE__*/_jsxDEV(Grid, {\n            item: true,\n            xs: 12,\n            children: /*#__PURE__*/_jsxDEV(FormHelperText, {\n              error: true,\n              children: formik.errors.submit\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 174,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 170,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(DialogActions, {\n        children: [/*#__PURE__*/_jsxDEV(Button, {\n          color: \"primary\",\n          onClick: onClose,\n          type: \"button\",\n          variant: \"text\",\n          children: \"Cancel\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 182,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          color: \"primary\",\n          type: \"submit\",\n          variant: \"contained\",\n          disabled: formik.isSubmitting,\n          children: \"Send Invite\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 190,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 181,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 68,\n    columnNumber: 5\n  }, this);\n};\n\n_s(OrganizationInviteDialog, \"B/4rI4IXClQ7sG7psKj+pOuRe5Q=\", false, function () {\n  return [useFormik];\n});\n\n_c = OrganizationInviteDialog;\nOrganizationInviteDialog.defaultProps = {\n  open: false\n};\nOrganizationInviteDialog.propTypes = {\n  onClose: PropTypes.func,\n  open: PropTypes.bool\n};\n\nvar _c;\n\n$RefreshReg$(_c, \"OrganizationInviteDialog\");","map":{"version":3,"sources":["/Users/allan.chepkoy/cloud/kubeflow/components/zoradashboard/src/components/organization/organization-invite-dialog.js"],"names":["Fragment","PropTypes","useFormik","Yup","Button","Card","Dialog","DialogActions","DialogContent","DialogTitle","Divider","FormControlLabel","FormHelperText","Grid","Radio","RadioGroup","Typography","wait","InputField","roleOptions","id","description","label","value","OrganizationInviteDialog","props","open","onClose","other","formik","initialValues","email","fullName","role","submit","validationSchema","object","shape","string","max","required","mixed","oneOf","map","option","onSubmit","values","helpers","setStatus","success","setSubmitting","err","console","error","setErrors","message","onExited","resetForm","handleSubmit","Boolean","touched","errors","handleBlur","handleChange","mb","index","p","length","isSubmitting","defaultProps","propTypes","func","bool"],"mappings":"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","sourcesContent":["import { Fragment } from 'react';\nimport PropTypes from 'prop-types';\nimport { useFormik } from 'formik';\nimport * as Yup from 'yup';\nimport {\n  Button,\n  Card,\n  Dialog,\n  DialogActions,\n  DialogContent,\n  DialogTitle,\n  Divider,\n  FormControlLabel,\n  FormHelperText,\n  Grid,\n  Radio,\n  RadioGroup,\n  Typography\n} from '@material-ui/core';\nimport { wait } from '../../utils/wait';\nimport { InputField } from '../input-field';\n\nconst roleOptions = [\n  {\n    id: '1',\n    description: 'Edit access',\n    label: 'Editor',\n    value: 'editor'\n  },\n  {\n    id: '2',\n    description: 'Full access & billing',\n    label: 'Administrator',\n    value: 'administrator'\n  }\n];\n\nexport const OrganizationInviteDialog = (props) => {\n  const { open, onClose, ...other } = props;\n  const formik = useFormik({\n    initialValues: {\n      email: '',\n      fullName: '',\n      role: 'editor',\n      submit: null\n    },\n    validationSchema: Yup.object().shape({\n      email: Yup.string().email('Must be a valid email').max(255).required('Email is required'),\n      fullName: Yup.string().max(255).required('Name is required'),\n      role: Yup.mixed().oneOf(roleOptions.map((option) => option.value))\n    }),\n    onSubmit: async (values, helpers) => {\n      try {\n        await wait(250);\n        helpers.setStatus({ success: true });\n        helpers.setSubmitting(false);\n        onClose?.();\n      } catch (err) {\n        console.error(err);\n        helpers.setStatus({ success: false });\n        helpers.setErrors({ submit: err.message });\n        helpers.setSubmitting(false);\n      }\n    }\n  });\n\n  return (\n    <Dialog\n      onClose={onClose}\n      open={open}\n      TransitionProps={{\n        onExited: () => formik.resetForm()\n      }}\n      {...other}\n    >\n      <form onSubmit={formik.handleSubmit}>\n        <DialogTitle>\n          Invite a team member\n        </DialogTitle>\n        <DialogContent>\n          <Grid\n            container\n            spacing={2}\n          >\n            <Grid\n              item\n              xs={12}\n            >\n              <InputField\n                error={Boolean(formik.touched.fullName && formik.errors.fullName)}\n                fullWidth\n                helperText={formik.touched.fullName && formik.errors.fullName}\n                label=\"Full name\"\n                name=\"fullName\"\n                onBlur={formik.handleBlur}\n                onChange={formik.handleChange}\n                value={formik.values.fullName}\n              />\n            </Grid>\n            <Grid\n              item\n              xs={12}\n            >\n              <InputField\n                error={Boolean(formik.touched.email && formik.errors.email)}\n                fullWidth\n                helperText={formik.touched.email && formik.errors.email}\n                label=\"Email address\"\n                name=\"email\"\n                onBlur={formik.handleBlur}\n                onChange={formik.handleChange}\n                type=\"email\"\n                value={formik.values.email}\n              />\n            </Grid>\n            <Grid\n              item\n              xs={12}\n            >\n              <Typography\n                color=\"textPrimary\"\n                sx={{ mb: 1.5 }}\n                variant=\"subtitle2\"\n              >\n                Role\n              </Typography>\n              <Card variant=\"outlined\">\n                <RadioGroup\n                  name=\"role\"\n                  onBlur={formik.handleBlur}\n                  onChange={formik.handleChange}\n                  value={formik.values.role}\n                >\n                  {roleOptions.map((option, index) => (\n                    <Fragment key={option.id}>\n                      <FormControlLabel\n                        disableTypography\n                        control={<Radio color=\"primary\" />}\n                        label={(\n                          <div>\n                            <Typography\n                              color=\"textPrimary\"\n                              variant=\"body1\"\n                            >\n                              {option.label}\n                            </Typography>\n                            <Typography\n                              color=\"textSecondary\"\n                              variant=\"caption\"\n                            >\n                              {option.description}\n                            </Typography>\n                          </div>\n                        )}\n                        sx={{ p: 1.5 }}\n                        value={option.value}\n                      />\n                      {roleOptions.length > index + 1 && <Divider />}\n                    </Fragment>\n                  ))}\n                </RadioGroup>\n              </Card>\n              {formik.touched.role && formik.errors.role && (\n                <FormHelperText error>\n                  {formik.errors.role}\n                </FormHelperText>\n              )}\n            </Grid>\n            {formik.errors.submit && (\n              <Grid\n                item\n                xs={12}\n              >\n                <FormHelperText error>\n                  {formik.errors.submit}\n                </FormHelperText>\n              </Grid>\n            )}\n          </Grid>\n        </DialogContent>\n        <DialogActions>\n          <Button\n            color=\"primary\"\n            onClick={onClose}\n            type=\"button\"\n            variant=\"text\"\n          >\n            Cancel\n          </Button>\n          <Button\n            color=\"primary\"\n            type=\"submit\"\n            variant=\"contained\"\n            disabled={formik.isSubmitting}\n          >\n            Send Invite\n          </Button>\n        </DialogActions>\n      </form>\n    </Dialog>\n  );\n};\n\nOrganizationInviteDialog.defaultProps = {\n  open: false\n};\n\nOrganizationInviteDialog.propTypes = {\n  onClose: PropTypes.func,\n  open: PropTypes.bool\n};\n"]},"metadata":{},"sourceType":"module"}
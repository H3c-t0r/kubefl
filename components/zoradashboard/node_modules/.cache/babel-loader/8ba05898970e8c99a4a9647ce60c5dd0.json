{"ast":null,"code":"import { generateResourceId } from '../utils/generate-resource-id';\nimport { sign, decode, JWT_SECRET, JWT_EXPIRES_IN } from '../utils/jwt';\nimport { wait } from '../utils/wait';\nimport axios from \"axios\"; // const axios = require('axios').default;\n\naxios.defaults.headers.post['Content-Type'] = 'application/json';\n\nclass AuthApi {\n  async login({\n    username,\n    password\n  }) {\n    console.log(username, password); // await wait(500);\n    // const resp = axios.post(\n    //   'http://localhost:8000/auth/jwt/create',{\n    //     \"username\":username,\n    //     \"password\":password\n    //   }).then(resp => {\n    //     console.log(resp.data);\n    // }).catch(err => {\n    //     // Handle Error Here\n    //     console.error(err);\n    // });\n    // axios.post('/auth/jwt/create')\n    //     .then(resp => {\n    //         console.log(resp.data);\n    //     })\n    //     .catch(err => {\n    //         // Handle Error Here\n    //         console.error(err);\n    //     });\n    // return new Promise((resolve, reject) => {\n    //   try {\n    //     // Find the user\n    //     // const user = users.find((_user) => _user.email === email);\n    //     // if (!user || (user.password !== password)) {\n    //     //   reject(new Error('Please check your email and password'));\n    //     //   return;\n    //     // }\n    //     // const resp = axios.post(\n    //     //   '/auth/jwt/create/',{\n    //     //     \"username\":username,\n    //     //     \"password\":password\n    //     //   });\n    //       // console.log(resp.data)\n    //     // Create the access token\n    //     // const accessToken = sign({ userId: user.id }, JWT_SECRET, { expiresIn: JWT_EXPIRES_IN });\n    //   } catch (err) {\n    //     console.error('[Auth Api]: ', err);\n    //     reject(new Error('Internal server error'));\n    //   }\n    // });\n  }\n\n  async register({\n    email,\n    name,\n    password\n  }) {\n    await wait(1000);\n    return new Promise((resolve, reject) => {\n      try {\n        // Check if a user already exists\n        let user = users.find(_user => _user.email === email);\n\n        if (user) {\n          reject(new Error('User already exists'));\n          return;\n        }\n\n        user = {\n          id: generateResourceId(),\n          avatar: null,\n          email,\n          name,\n          password\n        };\n        users.push(user);\n        const accessToken = sign({\n          userId: user.id\n        }, JWT_SECRET, {\n          expiresIn: JWT_EXPIRES_IN\n        });\n        resolve(accessToken);\n      } catch (err) {\n        console.error('[Auth Api]: ', err);\n        reject(new Error('Internal server error'));\n      }\n    });\n  }\n\n  me(accessToken) {\n    return new Promise((resolve, reject) => {\n      try {\n        // Decode access token\n        const {\n          userId\n        } = decode(accessToken); // Find the user\n\n        const user = users.find(_user => _user.id === userId);\n\n        if (!user) {\n          reject(new Error('Invalid authorization token'));\n          return;\n        }\n\n        resolve({\n          id: user.id,\n          avatar: user.avatar,\n          email: user.email,\n          name: user.name\n        });\n      } catch (err) {\n        console.error('[Auth Api]: ', err);\n        reject(new Error('Internal server error'));\n      }\n    });\n  }\n\n}\n\nexport const authApi = new AuthApi();","map":{"version":3,"sources":["/Users/allan.chepkoy/cloud/kubeflow/components/zoradashboard/src/api/auth.js"],"names":["generateResourceId","sign","decode","JWT_SECRET","JWT_EXPIRES_IN","wait","axios","defaults","headers","post","AuthApi","login","username","password","console","log","register","email","name","Promise","resolve","reject","user","users","find","_user","Error","id","avatar","push","accessToken","userId","expiresIn","err","error","me","authApi"],"mappings":"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","sourcesContent":["import { generateResourceId } from '../utils/generate-resource-id';\nimport { sign, decode, JWT_SECRET, JWT_EXPIRES_IN } from '../utils/jwt';\nimport { wait } from '../utils/wait';\nimport axios from \"axios\"\n// const axios = require('axios').default;\naxios.defaults.headers.post['Content-Type'] ='application/json';\n\n\nclass AuthApi {\n  async login({ username, password }) {\n    console.log(username, password)\n    // await wait(500);\n\n    // const resp = axios.post(\n    //   'http://localhost:8000/auth/jwt/create',{\n    //     \"username\":username,\n    //     \"password\":password\n    //   }).then(resp => {\n    //     console.log(resp.data);\n    // }).catch(err => {\n    //     // Handle Error Here\n    //     console.error(err);\n    // });\n\n    // axios.post('/auth/jwt/create')\n    //     .then(resp => {\n    //         console.log(resp.data);\n    //     })\n    //     .catch(err => {\n    //         // Handle Error Here\n    //         console.error(err);\n    //     });\n\n    \n    // return new Promise((resolve, reject) => {\n    //   try {\n    //     // Find the user\n    //     // const user = users.find((_user) => _user.email === email);\n\n    //     // if (!user || (user.password !== password)) {\n    //     //   reject(new Error('Please check your email and password'));\n    //     //   return;\n    //     // }\n      \n    //     // const resp = axios.post(\n    //     //   '/auth/jwt/create/',{\n    //     //     \"username\":username,\n    //     //     \"password\":password\n    //     //   });\n\n\n    //       // console.log(resp.data)\n\n\n    //     // Create the access token\n    //     // const accessToken = sign({ userId: user.id }, JWT_SECRET, { expiresIn: JWT_EXPIRES_IN });\n\n        \n    //   } catch (err) {\n    //     console.error('[Auth Api]: ', err);\n    //     reject(new Error('Internal server error'));\n    //   }\n    // });\n  }\n\n  async register({ email, name, password }) {\n    await wait(1000);\n\n    return new Promise((resolve, reject) => {\n      try {\n        // Check if a user already exists\n        let user = users.find((_user) => _user.email === email);\n\n        if (user) {\n          reject(new Error('User already exists'));\n          return;\n        }\n\n        user = {\n          id: generateResourceId(),\n          avatar: null,\n          email,\n          name,\n          password\n        };\n\n        users.push(user);\n\n        const accessToken = sign({ userId: user.id }, JWT_SECRET, { expiresIn: JWT_EXPIRES_IN });\n\n        resolve(accessToken);\n      } catch (err) {\n        console.error('[Auth Api]: ', err);\n        reject(new Error('Internal server error'));\n      }\n    });\n  }\n\n  me(accessToken) {\n    return new Promise((resolve, reject) => {\n      try {\n        // Decode access token\n        const { userId } = decode(accessToken);\n\n        // Find the user\n        const user = users.find((_user) => _user.id === userId);\n\n        if (!user) {\n          reject(new Error('Invalid authorization token'));\n          return;\n        }\n\n        resolve({\n          id: user.id,\n          avatar: user.avatar,\n          email: user.email,\n          name: user.name\n        });\n      } catch (err) {\n        console.error('[Auth Api]: ', err);\n        reject(new Error('Internal server error'));\n      }\n    });\n  }\n}\n\nexport const authApi = new AuthApi();\n"]},"metadata":{},"sourceType":"module"}
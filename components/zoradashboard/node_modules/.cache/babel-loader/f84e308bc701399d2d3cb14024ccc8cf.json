{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState } from 'react';\nconst blankFilter = {\n  property: {\n    name: '',\n    type: ''\n  },\n  operator: {\n    value: '',\n    typesAccepted: []\n  },\n  value: ''\n};\nexport const useFilters = (properties, operators, initialFilters = []) => {\n  _s();\n\n  const [filters, setFilters] = useState(() => (initialFilters === null || initialFilters === void 0 ? void 0 : initialFilters.length) ? initialFilters : [blankFilter]);\n  let shouldApplyFilters = true;\n\n  for (let i = 0; i < filters.length; i++) {\n    if (!filters[i].property.name || !filters[i].operator.value || !filters[i].operator.typesAccepted.includes('blank') && !filters[i].value) {\n      shouldApplyFilters = false;\n      break;\n    }\n  }\n\n  const addFilter = index => {\n    if (!shouldApplyFilters) {\n      return;\n    }\n\n    const temp = [...filters];\n    temp.splice(index, 0, blankFilter);\n    setFilters(temp);\n  };\n\n  const clearFilters = () => {\n    setFilters([blankFilter]);\n  };\n\n  const removeFilter = index => {\n    if (filters.length === 1) {\n      clearFilters();\n      return;\n    }\n\n    setFilters(prevFilters => prevFilters.filter((_, _index) => _index !== index));\n  };\n\n  const handlePropertyChange = (filterIndex, selectedPropertyName) => {\n    const temp = [...filters];\n    const selectedProperty = properties.find(property => property.name === selectedPropertyName);\n    temp[filterIndex] = {\n      property: selectedProperty,\n      operator: {\n        value: '',\n        typesAccepted: []\n      },\n      value: ''\n    };\n    setFilters(temp);\n  };\n\n  const handleOperatorChange = (filterIndex, selectedOperatorValue) => {\n    const temp = [...filters];\n    const selectedOperator = operators.find(operator => operator.value === selectedOperatorValue);\n    temp[filterIndex] = { ...temp[filterIndex],\n      operator: selectedOperator\n    };\n    setFilters(temp);\n  };\n\n  const handleValueChange = (filterIndex, value) => {\n    const temp = [...filters];\n    temp[filterIndex] = { ...temp[filterIndex],\n      value\n    };\n    setFilters(temp);\n  };\n\n  return {\n    addFilter,\n    clearFilters,\n    filters,\n    handlePropertyChange,\n    handleOperatorChange,\n    handleValueChange,\n    removeFilter,\n    shouldApplyFilters\n  };\n};\n\n_s(useFilters, \"HtaBLFYIrmbRL1BZbgDnRHTnkls=\");","map":{"version":3,"sources":["/Users/allan.chepkoy/cloud/kubeflow/components/zoradashboard/src/hooks/use-filters.js"],"names":["useState","blankFilter","property","name","type","operator","value","typesAccepted","useFilters","properties","operators","initialFilters","filters","setFilters","length","shouldApplyFilters","i","includes","addFilter","index","temp","splice","clearFilters","removeFilter","prevFilters","filter","_","_index","handlePropertyChange","filterIndex","selectedPropertyName","selectedProperty","find","handleOperatorChange","selectedOperatorValue","selectedOperator","handleValueChange"],"mappings":"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","sourcesContent":["import { useState } from 'react';\n\nconst blankFilter = {\n  property: {\n    name: '',\n    type: ''\n  },\n  operator: {\n    value: '',\n    typesAccepted: []\n  },\n  value: ''\n};\n\nexport const useFilters = (properties, operators, initialFilters = []) => {\n  const [filters, setFilters] = useState(() => (initialFilters?.length\n    ? initialFilters\n    : [blankFilter]));\n\n  let shouldApplyFilters = true;\n\n  for (let i = 0; i < filters.length; i++) {\n    if (!filters[i].property.name\n      || !filters[i].operator.value\n      || (!filters[i].operator.typesAccepted.includes('blank')\n        && !filters[i].value)) {\n      shouldApplyFilters = false;\n      break;\n    }\n  }\n\n  const addFilter = (index) => {\n    if (!shouldApplyFilters) {\n      return;\n    }\n\n    const temp = [...filters];\n    temp.splice(index, 0, blankFilter);\n    setFilters(temp);\n  };\n\n  const clearFilters = () => {\n    setFilters([blankFilter]);\n  };\n\n  const removeFilter = (index) => {\n    if (filters.length === 1) {\n      clearFilters();\n      return;\n    }\n\n    setFilters((prevFilters) => prevFilters.filter((_, _index) => _index !== index));\n  };\n\n  const handlePropertyChange = (filterIndex, selectedPropertyName) => {\n    const temp = [...filters];\n    const selectedProperty = properties.find((property) => property.name === selectedPropertyName);\n\n    temp[filterIndex] = {\n      property: selectedProperty,\n      operator: {\n        value: '',\n        typesAccepted: []\n      },\n      value: ''\n    };\n\n    setFilters(temp);\n  };\n\n  const handleOperatorChange = (filterIndex, selectedOperatorValue) => {\n    const temp = [...filters];\n    const selectedOperator = operators.find((operator) => operator.value === selectedOperatorValue);\n\n    temp[filterIndex] = {\n      ...temp[filterIndex],\n      operator: selectedOperator\n    };\n\n    setFilters(temp);\n  };\n\n  const handleValueChange = (filterIndex, value) => {\n    const temp = [...filters];\n\n    temp[filterIndex] = {\n      ...temp[filterIndex],\n      value\n    };\n\n    setFilters(temp);\n  };\n\n  return {\n    addFilter,\n    clearFilters,\n    filters,\n    handlePropertyChange,\n    handleOperatorChange,\n    handleValueChange,\n    removeFilter,\n    shouldApplyFilters\n  };\n};\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"var _jsxFileName = \"/Users/allan.chepkoy/cloud/kubeflow/components/zoradashboard/src/containers/customer-summary.js\",\n    _s = $RefreshSig$();\n\nimport { useState, useEffect, useCallback } from 'react';\nimport { Helmet } from 'react-helmet-async';\nimport { Box, Grid } from '@material-ui/core';\nimport { customerApi } from '../api/customer';\nimport { CustomerDialog } from '../components/customer/customer-dialog';\nimport { CustomerInfo } from '../components/customer/customer-info';\nimport { CustomerLatestOrders } from '../components/customer/customer-latest-orders';\nimport { CustomerNotes } from '../components/customer/customer-notes';\nimport { CustomerProperties } from '../components/customer/customer-properties';\nimport { ResourceError } from '../components/resource-error';\nimport { ResourceLoading } from '../components/resource-loading';\nimport { useMounted } from '../hooks/use-mounted';\nimport gtm from '../lib/gtm';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport const CustomerSummary = () => {\n  _s();\n\n  const mounted = useMounted();\n  const [customerState, setCustomerState] = useState({\n    isLoading: true\n  });\n  const [ordersState, setOrdersState] = useState({\n    isLoading: true\n  });\n  const [notesState, setNotesState] = useState({\n    isLoading: true\n  });\n  const [openInfoDialog, setOpenInfoDialog] = useState(false);\n  const getCustomer = useCallback(async () => {\n    setCustomerState(() => ({\n      isLoading: true\n    }));\n\n    try {\n      const result = await customerApi.getCustomer();\n\n      if (mounted.current) {\n        setCustomerState(() => ({\n          isLoading: false,\n          data: result\n        }));\n      }\n    } catch (err) {\n      console.error(err);\n\n      if (mounted.current) {\n        setCustomerState(() => ({\n          isLoading: false,\n          error: err.message\n        }));\n      }\n    }\n  }, []);\n  const getOrders = useCallback(async () => {\n    setOrdersState(() => ({\n      isLoading: true\n    }));\n\n    try {\n      const result = await customerApi.getCustomerOrders();\n\n      if (mounted.current) {\n        setOrdersState(() => ({\n          isLoading: false,\n          data: result\n        }));\n      }\n    } catch (err) {\n      console.error(err);\n\n      if (mounted.current) {\n        setOrdersState(() => ({\n          isLoading: false,\n          error: err.message\n        }));\n      }\n    }\n  }, []);\n  const getNotes = useCallback(async () => {\n    setNotesState(() => ({\n      isLoading: true\n    }));\n\n    try {\n      const result = await customerApi.getCustomerNotes();\n\n      if (mounted.current) {\n        setNotesState(() => ({\n          isLoading: false,\n          data: result\n        }));\n      }\n    } catch (err) {\n      console.error(err);\n\n      if (mounted.current) {\n        setNotesState(() => ({\n          isLoading: false,\n          error: err.message\n        }));\n      }\n    }\n  }, []);\n  useEffect(() => {\n    getCustomer().catch(console.error);\n    getOrders().catch(console.error);\n    getNotes().catch(console.error);\n  }, []);\n  useEffect(() => {\n    gtm.push({\n      event: 'page_view'\n    });\n  }, []);\n\n  const renderContent = () => {\n    // Wait for all resources to load\n    if (customerState.isLoading || notesState.isLoading || ordersState.isLoading) {\n      return /*#__PURE__*/_jsxDEV(ResourceLoading, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 9\n      }, this);\n    } // If any resource has an error, display only 1 error message\n\n\n    if (customerState.error || notesState.error || ordersState.error) {\n      return /*#__PURE__*/_jsxDEV(ResourceError, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 9\n      }, this);\n    }\n\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(Grid, {\n        container: true,\n        spacing: 3,\n        children: [/*#__PURE__*/_jsxDEV(Grid, {\n          container: true,\n          item: true,\n          lg: 4,\n          spacing: 3,\n          sx: {\n            height: 'fit-content'\n          },\n          xs: 12,\n          children: [/*#__PURE__*/_jsxDEV(Grid, {\n            item: true,\n            xs: 12,\n            children: /*#__PURE__*/_jsxDEV(CustomerInfo, {\n              onEdit: () => setOpenInfoDialog(true),\n              customer: customerState.data\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 137,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 133,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Grid, {\n            item: true,\n            xs: 12,\n            children: /*#__PURE__*/_jsxDEV(CustomerProperties, {\n              customer: customerState.data\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 146,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 142,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 125,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Grid, {\n          container: true,\n          item: true,\n          lg: 8,\n          spacing: 3,\n          sx: {\n            height: 'fit-content'\n          },\n          xs: 12,\n          children: [/*#__PURE__*/_jsxDEV(Grid, {\n            item: true,\n            xs: 12,\n            children: /*#__PURE__*/_jsxDEV(CustomerLatestOrders, {\n              orders: ordersState.data\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 161,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 157,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Grid, {\n            item: true,\n            xs: 12,\n            children: /*#__PURE__*/_jsxDEV(CustomerNotes, {\n              notes: notesState.data\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 167,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 163,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 149,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(CustomerDialog, {\n        customer: customerState.data,\n        onClose: () => setOpenInfoDialog(false),\n        open: openInfoDialog\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 171,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true);\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Helmet, {\n      children: /*#__PURE__*/_jsxDEV(\"title\", {\n        children: \"Customer: Summary | Carpatin Dashboard\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 183,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 182,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Box, {\n      sx: {\n        backgroundColor: 'background.default',\n        flexGrow: 1\n      },\n      children: renderContent()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 185,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n\n_s(CustomerSummary, \"XKxcWC+GPIHeYrD0EPUWxGx4WNk=\", false, function () {\n  return [useMounted];\n});\n\n_c = CustomerSummary;\n\nvar _c;\n\n$RefreshReg$(_c, \"CustomerSummary\");","map":{"version":3,"sources":["/Users/allan.chepkoy/cloud/kubeflow/components/zoradashboard/src/containers/customer-summary.js"],"names":["useState","useEffect","useCallback","Helmet","Box","Grid","customerApi","CustomerDialog","CustomerInfo","CustomerLatestOrders","CustomerNotes","CustomerProperties","ResourceError","ResourceLoading","useMounted","gtm","CustomerSummary","mounted","customerState","setCustomerState","isLoading","ordersState","setOrdersState","notesState","setNotesState","openInfoDialog","setOpenInfoDialog","getCustomer","result","current","data","err","console","error","message","getOrders","getCustomerOrders","getNotes","getCustomerNotes","catch","push","event","renderContent","height","backgroundColor","flexGrow"],"mappings":"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","sourcesContent":["import { useState, useEffect, useCallback } from 'react';\nimport { Helmet } from 'react-helmet-async';\nimport { Box, Grid } from '@material-ui/core';\nimport { customerApi } from '../api/customer';\nimport { CustomerDialog } from '../components/customer/customer-dialog';\nimport { CustomerInfo } from '../components/customer/customer-info';\nimport { CustomerLatestOrders } from '../components/customer/customer-latest-orders';\nimport { CustomerNotes } from '../components/customer/customer-notes';\nimport { CustomerProperties } from '../components/customer/customer-properties';\nimport { ResourceError } from '../components/resource-error';\nimport { ResourceLoading } from '../components/resource-loading';\nimport { useMounted } from '../hooks/use-mounted';\nimport gtm from '../lib/gtm';\n\nexport const CustomerSummary = () => {\n  const mounted = useMounted();\n  const [customerState, setCustomerState] = useState({ isLoading: true });\n  const [ordersState, setOrdersState] = useState({ isLoading: true });\n  const [notesState, setNotesState] = useState({ isLoading: true });\n  const [openInfoDialog, setOpenInfoDialog] = useState(false);\n\n  const getCustomer = useCallback(async () => {\n    setCustomerState(() => ({ isLoading: true }));\n\n    try {\n      const result = await customerApi.getCustomer();\n\n      if (mounted.current) {\n        setCustomerState(() => ({\n          isLoading: false,\n          data: result\n        }));\n      }\n    } catch (err) {\n      console.error(err);\n\n      if (mounted.current) {\n        setCustomerState(() => ({\n          isLoading: false,\n          error: err.message\n        }));\n      }\n    }\n  }, []);\n\n  const getOrders = useCallback(async () => {\n    setOrdersState(() => ({ isLoading: true }));\n\n    try {\n      const result = await customerApi.getCustomerOrders();\n\n      if (mounted.current) {\n        setOrdersState(() => ({\n          isLoading: false,\n          data: result\n        }));\n      }\n    } catch (err) {\n      console.error(err);\n\n      if (mounted.current) {\n        setOrdersState(() => ({\n          isLoading: false,\n          error: err.message\n        }));\n      }\n    }\n  }, []);\n\n  const getNotes = useCallback(async () => {\n    setNotesState(() => ({ isLoading: true }));\n\n    try {\n      const result = await customerApi.getCustomerNotes();\n\n      if (mounted.current) {\n        setNotesState(() => ({\n          isLoading: false,\n          data: result\n        }));\n      }\n    } catch (err) {\n      console.error(err);\n\n      if (mounted.current) {\n        setNotesState(() => ({\n          isLoading: false,\n          error: err.message\n        }));\n      }\n    }\n  }, []);\n\n  useEffect(() => {\n    getCustomer().catch(console.error);\n    getOrders().catch(console.error);\n    getNotes().catch(console.error);\n  }, []);\n\n  useEffect(() => {\n    gtm.push({ event: 'page_view' });\n  }, []);\n\n  const renderContent = () => {\n    // Wait for all resources to load\n    if (customerState.isLoading || notesState.isLoading || ordersState.isLoading) {\n      return (\n        <ResourceLoading />\n      );\n    }\n\n    // If any resource has an error, display only 1 error message\n    if (customerState.error || notesState.error || ordersState.error) {\n      return (\n        <ResourceError />\n      );\n    }\n\n    return (\n      <>\n        <Grid\n          container\n          spacing={3}\n        >\n          <Grid\n            container\n            item\n            lg={4}\n            spacing={3}\n            sx={{ height: 'fit-content' }}\n            xs={12}\n          >\n            <Grid\n              item\n              xs={12}\n            >\n              <CustomerInfo\n                onEdit={() => setOpenInfoDialog(true)}\n                customer={customerState.data}\n              />\n            </Grid>\n            <Grid\n              item\n              xs={12}\n            >\n              <CustomerProperties customer={customerState.data} />\n            </Grid>\n          </Grid>\n          <Grid\n            container\n            item\n            lg={8}\n            spacing={3}\n            sx={{ height: 'fit-content' }}\n            xs={12}\n          >\n            <Grid\n              item\n              xs={12}\n            >\n              <CustomerLatestOrders orders={ordersState.data} />\n            </Grid>\n            <Grid\n              item\n              xs={12}\n            >\n              <CustomerNotes notes={notesState.data} />\n            </Grid>\n          </Grid>\n        </Grid>\n        <CustomerDialog\n          customer={customerState.data}\n          onClose={() => setOpenInfoDialog(false)}\n          open={openInfoDialog}\n        />\n      </>\n    );\n  };\n\n  return (\n    <>\n      <Helmet>\n        <title>Customer: Summary | Carpatin Dashboard</title>\n      </Helmet>\n      <Box\n        sx={{\n          backgroundColor: 'background.default',\n          flexGrow: 1\n        }}\n      >\n        {renderContent()}\n      </Box>\n    </>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"var _jsxFileName = \"/Users/allan.chepkoy/cloud/kubeflow/components/zoradashboard/src/components/invoices/invoice-send-notification.js\",\n    _s = $RefreshSig$();\n\nimport { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { useNavigate } from 'react-router-dom';\nimport toast from 'react-hot-toast';\nimport { PDFDownloadLink } from '@react-pdf/renderer';\nimport { Button, Card, CardContent, CardHeader, Divider, MenuItem } from '@material-ui/core';\nimport { useDialog } from '../../hooks/use-dialog';\nimport { Cash as CashIcon } from '../../icons/cash';\nimport { Download as DownloadIcon } from '../../icons/download';\nimport { Duplicate as DuplicateIcon } from '../../icons/duplicate';\nimport { Eye as EyeIcon } from '../../icons/eye';\nimport { Mail as MailIcon } from '../../icons/mail';\nimport { Trash as TrashIcon } from '../../icons/trash';\nimport { ActionList } from '../action-list';\nimport { ActionListItem } from '../action-list-item';\nimport { ConfirmationDialog } from '../confirmation-dialog';\nimport { InputField } from '../input-field';\nimport { InvoicePDF } from './invoice-pdf';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst notificationOptions = [{\n  label: 'Invoice created',\n  value: 'invoiceCreated'\n}, {\n  label: 'Payment received',\n  value: 'paymentConfirmation'\n}];\nexport const InvoiceSendNotification = props => {\n  _s();\n\n  const {\n    invoice\n  } = props;\n  const navigate = useNavigate();\n  const [markDialogOpen, handleOpenMarkDialog, handleCloseMarkDialog] = useDialog();\n  const [duplicateDialogOpen, handleOpenDuplicateDialog, handleCloseDuplicateDialog] = useDialog();\n  const [deleteDialogOpen, handleOpenDeleteDialog, handleCloseDeleteDialog] = useDialog();\n  const [notification, setNotification] = useState(notificationOptions[0].value);\n\n  const handleStatusChange = event => {\n    setNotification(event.target.value);\n  };\n\n  const handleSendNotification = () => {\n    setNotification(notification);\n    toast.success('Notification sent');\n  };\n\n  const handleMark = () => {\n    handleCloseMarkDialog();\n    toast.error('This action is not available on demo');\n  };\n\n  const handleDuplicate = () => {\n    handleCloseDuplicateDialog();\n    toast.error('This action is not available on demo');\n  };\n\n  const handleDelete = () => {\n    handleCloseDeleteDialog();\n    toast.error('This action is not available on demo');\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Card, {\n      variant: \"outlined\",\n      ...props,\n      children: [/*#__PURE__*/_jsxDEV(CardHeader, {\n        title: \"Send Notification\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Divider, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(CardContent, {\n        children: [/*#__PURE__*/_jsxDEV(InputField, {\n          fullWidth: true,\n          onChange: handleStatusChange,\n          select: true,\n          value: notification,\n          children: notificationOptions.map(option => /*#__PURE__*/_jsxDEV(MenuItem, {\n            value: option.value,\n            children: option.label\n          }, option.value, false, {\n            fileName: _jsxFileName,\n            lineNumber: 79,\n            columnNumber: 15\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          color: \"primary\",\n          onClick: handleSendNotification,\n          startIcon: /*#__PURE__*/_jsxDEV(MailIcon, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 90,\n            columnNumber: 24\n          }, this),\n          sx: {\n            mt: 2\n          },\n          variant: \"outlined\",\n          children: \"Send Email\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Divider, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(ActionList, {\n        children: [/*#__PURE__*/_jsxDEV(ActionListItem, {\n          icon: EyeIcon,\n          label: \"Preview\",\n          onClick: () => navigate('/dashboard/invoices/1/preview')\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 99,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(ActionListItem, {\n          icon: CashIcon,\n          label: \"Mark Paid\",\n          onClick: handleOpenMarkDialog\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 104,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(ActionListItem, {\n          icon: DuplicateIcon,\n          label: \"Duplicate\",\n          onClick: handleOpenDuplicateDialog\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 109,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(PDFDownloadLink, {\n          document: /*#__PURE__*/_jsxDEV(InvoicePDF, {\n            invoice: invoice\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 115,\n            columnNumber: 23\n          }, this),\n          fileName: \"invoice\",\n          style: {\n            color: 'inherit',\n            textDecoration: 'none'\n          },\n          children: /*#__PURE__*/_jsxDEV(ActionListItem, {\n            icon: DownloadIcon,\n            label: \"Download (PDF)\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 122,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 114,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(ActionListItem, {\n          icon: TrashIcon,\n          label: \"Delete\",\n          onClick: handleOpenDeleteDialog\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 127,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ConfirmationDialog, {\n      message: \"Are you sure you want to mark this invoice as paid? This can't be undone.\",\n      onCancel: handleCloseMarkDialog,\n      onConfirm: handleMark,\n      open: markDialogOpen,\n      title: \"Mark Invoice as paid\",\n      variant: \"info\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ConfirmationDialog, {\n      message: \"Are you sure you want to duplicate this invoice? This can't be undone.\",\n      onCancel: handleCloseDuplicateDialog,\n      onConfirm: handleDuplicate,\n      open: duplicateDialogOpen,\n      title: \"Duplicate Invoice\",\n      variant: \"warning\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 142,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ConfirmationDialog, {\n      message: \"Are you sure you want to delete this invoice? This can't be undone.\",\n      onCancel: handleCloseDeleteDialog,\n      onConfirm: handleDelete,\n      open: deleteDialogOpen,\n      title: \"Delete Invoice\",\n      variant: \"error\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 150,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n\n_s(InvoiceSendNotification, \"NLFx0Fx6ZTasjtYXykGhzA6F/b4=\", false, function () {\n  return [useNavigate, useDialog, useDialog, useDialog];\n});\n\n_c = InvoiceSendNotification;\nInvoiceSendNotification.propTypes = {\n  invoice: PropTypes.object.isRequired\n};\n\nvar _c;\n\n$RefreshReg$(_c, \"InvoiceSendNotification\");","map":{"version":3,"sources":["/Users/allan.chepkoy/cloud/kubeflow/components/zoradashboard/src/components/invoices/invoice-send-notification.js"],"names":["useState","PropTypes","useNavigate","toast","PDFDownloadLink","Button","Card","CardContent","CardHeader","Divider","MenuItem","useDialog","Cash","CashIcon","Download","DownloadIcon","Duplicate","DuplicateIcon","Eye","EyeIcon","Mail","MailIcon","Trash","TrashIcon","ActionList","ActionListItem","ConfirmationDialog","InputField","InvoicePDF","notificationOptions","label","value","InvoiceSendNotification","props","invoice","navigate","markDialogOpen","handleOpenMarkDialog","handleCloseMarkDialog","duplicateDialogOpen","handleOpenDuplicateDialog","handleCloseDuplicateDialog","deleteDialogOpen","handleOpenDeleteDialog","handleCloseDeleteDialog","notification","setNotification","handleStatusChange","event","target","handleSendNotification","success","handleMark","error","handleDuplicate","handleDelete","map","option","mt","color","textDecoration","propTypes","object","isRequired"],"mappings":"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","sourcesContent":["import { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { useNavigate } from 'react-router-dom';\nimport toast from 'react-hot-toast';\nimport { PDFDownloadLink } from '@react-pdf/renderer';\nimport { Button, Card, CardContent, CardHeader, Divider, MenuItem } from '@material-ui/core';\nimport { useDialog } from '../../hooks/use-dialog';\nimport { Cash as CashIcon } from '../../icons/cash';\nimport { Download as DownloadIcon } from '../../icons/download';\nimport { Duplicate as DuplicateIcon } from '../../icons/duplicate';\nimport { Eye as EyeIcon } from '../../icons/eye';\nimport { Mail as MailIcon } from '../../icons/mail';\nimport { Trash as TrashIcon } from '../../icons/trash';\nimport { ActionList } from '../action-list';\nimport { ActionListItem } from '../action-list-item';\nimport { ConfirmationDialog } from '../confirmation-dialog';\nimport { InputField } from '../input-field';\nimport { InvoicePDF } from './invoice-pdf';\n\nconst notificationOptions = [\n  {\n    label: 'Invoice created',\n    value: 'invoiceCreated'\n  },\n  {\n    label: 'Payment received',\n    value: 'paymentConfirmation'\n  }\n];\n\nexport const InvoiceSendNotification = (props) => {\n  const { invoice } = props;\n  const navigate = useNavigate();\n  const [markDialogOpen, handleOpenMarkDialog, handleCloseMarkDialog] = useDialog();\n  const [duplicateDialogOpen, handleOpenDuplicateDialog, handleCloseDuplicateDialog] = useDialog();\n  const [deleteDialogOpen, handleOpenDeleteDialog, handleCloseDeleteDialog] = useDialog();\n  const [notification, setNotification] = useState(notificationOptions[0].value);\n\n  const handleStatusChange = (event) => {\n    setNotification(event.target.value);\n  };\n\n  const handleSendNotification = () => {\n    setNotification(notification);\n    toast.success('Notification sent');\n  };\n\n  const handleMark = () => {\n    handleCloseMarkDialog();\n    toast.error('This action is not available on demo');\n  };\n\n  const handleDuplicate = () => {\n    handleCloseDuplicateDialog();\n    toast.error('This action is not available on demo');\n  };\n\n  const handleDelete = () => {\n    handleCloseDeleteDialog();\n    toast.error('This action is not available on demo');\n  };\n\n  return (\n    <>\n      <Card\n        variant=\"outlined\"\n        {...props}\n      >\n        <CardHeader title=\"Send Notification\" />\n        <Divider />\n        <CardContent>\n          <InputField\n            fullWidth\n            onChange={handleStatusChange}\n            select\n            value={notification}\n          >\n            {notificationOptions.map((option) => (\n              <MenuItem\n                key={option.value}\n                value={option.value}\n              >\n                {option.label}\n              </MenuItem>\n            ))}\n          </InputField>\n          <Button\n            color=\"primary\"\n            onClick={handleSendNotification}\n            startIcon={<MailIcon />}\n            sx={{ mt: 2 }}\n            variant=\"outlined\"\n          >\n            Send Email\n          </Button>\n        </CardContent>\n        <Divider />\n        <ActionList>\n          <ActionListItem\n            icon={EyeIcon}\n            label=\"Preview\"\n            onClick={() => navigate('/dashboard/invoices/1/preview')}\n          />\n          <ActionListItem\n            icon={CashIcon}\n            label=\"Mark Paid\"\n            onClick={handleOpenMarkDialog}\n          />\n          <ActionListItem\n            icon={DuplicateIcon}\n            label=\"Duplicate\"\n            onClick={handleOpenDuplicateDialog}\n          />\n          <PDFDownloadLink\n            document={<InvoicePDF invoice={invoice} />}\n            fileName=\"invoice\"\n            style={{\n              color: 'inherit',\n              textDecoration: 'none'\n            }}\n          >\n            <ActionListItem\n              icon={DownloadIcon}\n              label=\"Download (PDF)\"\n            />\n          </PDFDownloadLink>\n          <ActionListItem\n            icon={TrashIcon}\n            label=\"Delete\"\n            onClick={handleOpenDeleteDialog}\n          />\n        </ActionList>\n      </Card>\n      <ConfirmationDialog\n        message=\"Are you sure you want to mark this invoice as paid? This can't be undone.\"\n        onCancel={handleCloseMarkDialog}\n        onConfirm={handleMark}\n        open={markDialogOpen}\n        title=\"Mark Invoice as paid\"\n        variant=\"info\"\n      />\n      <ConfirmationDialog\n        message=\"Are you sure you want to duplicate this invoice? This can't be undone.\"\n        onCancel={handleCloseDuplicateDialog}\n        onConfirm={handleDuplicate}\n        open={duplicateDialogOpen}\n        title=\"Duplicate Invoice\"\n        variant=\"warning\"\n      />\n      <ConfirmationDialog\n        message=\"Are you sure you want to delete this invoice? This can't be undone.\"\n        onCancel={handleCloseDeleteDialog}\n        onConfirm={handleDelete}\n        open={deleteDialogOpen}\n        title=\"Delete Invoice\"\n        variant=\"error\"\n      />\n    </>\n  );\n};\n\nInvoiceSendNotification.propTypes = {\n  invoice: PropTypes.object.isRequired\n};\n"]},"metadata":{},"sourceType":"module"}
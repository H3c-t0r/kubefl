{"ast":null,"code":"import { generateResourceId } from '../utils/generate-resource-id';\nimport { sign, decode, JWT_SECRET, JWT_EXPIRES_IN } from '../utils/jwt';\nimport { wait } from '../utils/wait';\nimport axios from 'axios';\nimport jwt_decode from \"jwt-decode\";\nconst users = [{\n  id: '5e86809283e28b96d2d38537',\n  avatar: '/static/user-chen_simmons.png',\n  email: 'demo@devias.io',\n  name: 'Chen Simmons',\n  password: 'Password123!'\n}];\n\nclass AuthApi {\n  async login({\n    username,\n    password\n  }) {\n    await wait(500);\n    return new Promise((resolve, reject) => {\n      axios.post('http://localhost:8000/auth/jwt/create', {\n        \"username\": username,\n        \"password\": password\n      }).then(function ({}) {}).catch(); // {\n      //   resolve()\n      // }\n      // resolve(res.data['access'])\n      // console.error('[Auth Api]: ', err);\n      // reject(new Error('Internal server error'));\n    } // await axios.post('http://localhost:8000/auth/jwt/create ', {\n    //   \"username\": username,\n    //   \"password\": password\n    // }).then(res=>{\n    //   return res.data['access']\n    //   // return new Promise((resolve) => {\n    //   //   // console.log(response.data)\n    //   //   // localStorage.setItem(\"accessToken\", res.data['access']);\n    //   //   // console.log(res.data['access'])\n    //   //   // resolve(res.data['access']);\n    //   //   // console.log(res.data['access'])\n    //   // });\n    // }).catch(err => {\n    //   return new Promise((reject) => {\n    //     // console.error('[Auth Api]: ', err);\n    //     reject(new Error('Internal server error'));\n    //   });\n    // })\n    // return new Promise((resolve, reject) => {\n    //   try {\n    //     console.log(response.data)\n    //     resolve(response.data);\n    //   } catch (err) {\n    //     console.error('[Auth Api]: ', err);\n    //     reject(new Error('Internal server error'));\n    //   }\n    // });\n    );\n  }\n\n  async register({\n    email,\n    name,\n    password\n  }) {\n    await wait(1000);\n    return new Promise((resolve, reject) => {\n      try {\n        // Check if a user already exists\n        let user = users.find(_user => _user.email === email);\n\n        if (user) {\n          reject(new Error('User already exists'));\n          return;\n        }\n\n        user = {\n          id: generateResourceId(),\n          avatar: null,\n          email,\n          name,\n          password\n        };\n        users.push(user);\n        const accessToken = sign({\n          userId: user.id\n        }, JWT_SECRET, {\n          expiresIn: JWT_EXPIRES_IN\n        });\n        resolve(accessToken);\n      } catch (err) {\n        console.error('[Auth Api]: ', err);\n        reject(new Error('Internal server error'));\n      }\n    });\n  }\n\n  async me(accessToken) {\n    await wait(500);\n    console.log(accessToken);\n    return new Promise((resolve, reject) => {\n      try {\n        // Decode access token\n        console.log(\"here\");\n        const {\n          user_id\n        } = jwt_decode(accessToken); // console.log(user_id)\n        // const decoded = jwt_decode(accessToken);\n        // console.log(decoded)\n        // Find the user\n        // const user = users.find((_user) => _user.id === userId);\n        // if (!user) {\n        //   reject(new Error('Invalid authorization token'));\n        //   return;\n        // }\n\n        resolve({\n          id: user_id // avatar: user.avatar,\n          // email: user.email,\n          // name: user.name\n\n        });\n      } catch (err) {\n        console.log(\"Nop\");\n        console.error('[Auth Api]: ', err);\n        reject(new Error('Internal server error'));\n      }\n    });\n  }\n\n}\n\nexport const authApi = new AuthApi();","map":{"version":3,"sources":["/Users/allan.chepkoy/cloud/kubeflow/components/zoradashboard/src/api/auth.js"],"names":["generateResourceId","sign","decode","JWT_SECRET","JWT_EXPIRES_IN","wait","axios","jwt_decode","users","id","avatar","email","name","password","AuthApi","login","username","Promise","resolve","reject","post","then","catch","register","user","find","_user","Error","push","accessToken","userId","expiresIn","err","console","error","me","log","user_id","authApi"],"mappings":"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","sourcesContent":["import { generateResourceId } from '../utils/generate-resource-id';\nimport { sign, decode, JWT_SECRET, JWT_EXPIRES_IN } from '../utils/jwt';\nimport { wait } from '../utils/wait';\nimport axios from 'axios';\nimport jwt_decode from \"jwt-decode\";\n\nconst users = [\n  {\n    id: '5e86809283e28b96d2d38537',\n    avatar: '/static/user-chen_simmons.png',\n    email: 'demo@devias.io',\n    name: 'Chen Simmons',\n    password: 'Password123!'\n  }\n];\n\nclass AuthApi {\n  async login({ username, password }) {\n    await wait(500)\n\n    return new Promise((resolve, reject) => {\n  \n      axios.post('http://localhost:8000/auth/jwt/create', {\"username\": username,\"password\": password})\n        .then(function({\n\n        }){\n          \n        })\n        .catch()\n      // {\n      //   resolve()\n      // }\n\n\n\n      // resolve(res.data['access'])\n\n      // console.error('[Auth Api]: ', err);\n      // reject(new Error('Internal server error'));\n    }\n\n    // await axios.post('http://localhost:8000/auth/jwt/create ', {\n    //   \"username\": username,\n    //   \"password\": password\n    // }).then(res=>{\n    //   return res.data['access']\n    //   // return new Promise((resolve) => {\n    //   //   // console.log(response.data)\n    //   //   // localStorage.setItem(\"accessToken\", res.data['access']);\n    //   //   // console.log(res.data['access'])\n    //   //   // resolve(res.data['access']);\n    //   //   // console.log(res.data['access'])\n    //   // });\n    // }).catch(err => {\n    //   return new Promise((reject) => {\n    //     // console.error('[Auth Api]: ', err);\n    //     reject(new Error('Internal server error'));\n    //   });\n    // })\n\n    // return new Promise((resolve, reject) => {\n    //   try {\n    //     console.log(response.data)\n    //     resolve(response.data);\n    //   } catch (err) {\n    //     console.error('[Auth Api]: ', err);\n    //     reject(new Error('Internal server error'));\n    //   }\n    // });\n  )}\n\n  async register({ email, name, password }) {\n    await wait(1000);\n\n    return new Promise((resolve, reject) => {\n      try {\n        // Check if a user already exists\n        let user = users.find((_user) => _user.email === email);\n\n        if (user) {\n          reject(new Error('User already exists'));\n          return;\n        }\n\n        user = {\n          id: generateResourceId(),\n          avatar: null,\n          email,\n          name,\n          password\n        };\n\n        users.push(user);\n\n        const accessToken = sign({ userId: user.id }, JWT_SECRET, { expiresIn: JWT_EXPIRES_IN });\n\n        resolve(accessToken);\n      } catch (err) {\n        console.error('[Auth Api]: ', err);\n        reject(new Error('Internal server error'));\n      }\n    });\n  }\n\n  async me(accessToken) {\n    await wait(500)\n    console.log(accessToken)\n    return new Promise((resolve, reject) => {\n      try {\n        // Decode access token\n        console.log(\"here\")\n        const { user_id } = jwt_decode(accessToken);\n        // console.log(user_id)\n\n        // const decoded = jwt_decode(accessToken);\n        // console.log(decoded)\n\n        // Find the user\n        // const user = users.find((_user) => _user.id === userId);\n\n        // if (!user) {\n        //   reject(new Error('Invalid authorization token'));\n        //   return;\n        // }\n\n        resolve({\n          id: user_id,\n          // avatar: user.avatar,\n          // email: user.email,\n          // name: user.name\n        });\n      } catch (err) {\n        console.log(\"Nop\")\n        console.error('[Auth Api]: ', err);\n        reject(new Error('Internal server error'));\n      }\n    });\n  }\n}\n\nexport const authApi = new AuthApi();\n"]},"metadata":{},"sourceType":"module"}
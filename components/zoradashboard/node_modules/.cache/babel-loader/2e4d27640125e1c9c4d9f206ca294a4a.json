{"ast":null,"code":"var _jsxFileName = \"/Users/allan.chepkoy/cloud/kubeflow/components/zoradashboard/src/components/product/product-status.js\",\n    _s = $RefreshSig$();\n\nimport { useState } from 'react';\nimport toast from 'react-hot-toast';\nimport PropTypes from 'prop-types';\nimport { Button, Card, CardContent, CardHeader, Divider } from '@material-ui/core';\nimport { useDialog } from '../../hooks/use-dialog';\nimport { Duplicate as DuplicateIcon } from '../../icons/duplicate';\nimport { Eye as EyeIcon } from '../../icons/eye';\nimport { ActionList } from '../action-list';\nimport { ActionListItem } from '../action-list-item';\nimport { ConfirmationDialog } from '../confirmation-dialog';\nimport { StatusSelect } from '../status-select';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst statusOptions = [{\n  color: 'info.main',\n  label: 'Draft',\n  value: 'draft'\n}, {\n  color: 'success.main',\n  label: 'Published',\n  value: 'published'\n}];\nexport const ProductStatus = props => {\n  _s();\n\n  const {\n    product,\n    ...other\n  } = props;\n  const [duplicateDialogOpen, handleOpenDuplicateDialog, handleCloseDuplicateDialog] = useDialog();\n  const [status, setStatus] = useState(product.status);\n\n  const handleStatusChange = event => {\n    setStatus(event.target.value);\n  };\n\n  const handleSaveChanges = () => {\n    toast.success('Changes saved');\n  };\n\n  const handlePreview = () => {\n    toast.error('This action is not available on demo');\n  };\n\n  const handleDuplicate = () => {\n    handleCloseDuplicateDialog();\n    toast.error('This action is not available on demo');\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Card, {\n      variant: \"outlined\",\n      ...other,\n      children: [/*#__PURE__*/_jsxDEV(CardHeader, {\n        title: \"Product Status\",\n        variant: \"outlined\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Divider, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(CardContent, {\n        children: [/*#__PURE__*/_jsxDEV(StatusSelect, {\n          onChange: handleStatusChange,\n          options: statusOptions,\n          value: status\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          color: \"primary\",\n          onClick: handleSaveChanges,\n          sx: {\n            mt: 2\n          },\n          variant: \"contained\",\n          children: \"Save Changes\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Divider, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(ActionList, {\n        children: [/*#__PURE__*/_jsxDEV(ActionListItem, {\n          icon: EyeIcon,\n          label: \"Preview\",\n          onClick: handlePreview\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(ActionListItem, {\n          icon: DuplicateIcon,\n          label: \"Duplicate\",\n          onClick: handleOpenDuplicateDialog\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ConfirmationDialog, {\n      message: \"Are you sure you want to duplicate this product? This can't be undone.\",\n      onCancel: handleCloseDuplicateDialog,\n      onConfirm: handleDuplicate,\n      open: duplicateDialogOpen,\n      title: \"Duplicate Product\",\n      variant: \"warning\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n\n_s(ProductStatus, \"Dysl7OaOIvrpRsT0oSbLKE7PfZ0=\", false, function () {\n  return [useDialog];\n});\n\n_c = ProductStatus;\nProductStatus.propTypes = {\n  product: PropTypes.object\n};\n\nvar _c;\n\n$RefreshReg$(_c, \"ProductStatus\");","map":{"version":3,"sources":["/Users/allan.chepkoy/cloud/kubeflow/components/zoradashboard/src/components/product/product-status.js"],"names":["useState","toast","PropTypes","Button","Card","CardContent","CardHeader","Divider","useDialog","Duplicate","DuplicateIcon","Eye","EyeIcon","ActionList","ActionListItem","ConfirmationDialog","StatusSelect","statusOptions","color","label","value","ProductStatus","props","product","other","duplicateDialogOpen","handleOpenDuplicateDialog","handleCloseDuplicateDialog","status","setStatus","handleStatusChange","event","target","handleSaveChanges","success","handlePreview","error","handleDuplicate","mt","propTypes","object"],"mappings":"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","sourcesContent":["import { useState } from 'react';\nimport toast from 'react-hot-toast';\nimport PropTypes from 'prop-types';\nimport { Button, Card, CardContent, CardHeader, Divider } from '@material-ui/core';\nimport { useDialog } from '../../hooks/use-dialog';\nimport { Duplicate as DuplicateIcon } from '../../icons/duplicate';\nimport { Eye as EyeIcon } from '../../icons/eye';\nimport { ActionList } from '../action-list';\nimport { ActionListItem } from '../action-list-item';\nimport { ConfirmationDialog } from '../confirmation-dialog';\nimport { StatusSelect } from '../status-select';\n\nconst statusOptions = [\n  {\n    color: 'info.main',\n    label: 'Draft',\n    value: 'draft'\n  },\n  {\n    color: 'success.main',\n    label: 'Published',\n    value: 'published'\n  }\n];\n\nexport const ProductStatus = (props) => {\n  const { product, ...other } = props;\n  const [duplicateDialogOpen, handleOpenDuplicateDialog, handleCloseDuplicateDialog] = useDialog();\n  const [status, setStatus] = useState(product.status);\n\n  const handleStatusChange = (event) => {\n    setStatus(event.target.value);\n  };\n\n  const handleSaveChanges = () => {\n    toast.success('Changes saved');\n  };\n\n  const handlePreview = () => {\n    toast.error('This action is not available on demo');\n  };\n\n  const handleDuplicate = () => {\n    handleCloseDuplicateDialog();\n    toast.error('This action is not available on demo');\n  };\n\n  return (\n    <>\n      <Card\n        variant=\"outlined\"\n        {...other}\n      >\n        <CardHeader\n          title=\"Product Status\"\n          variant=\"outlined\"\n        />\n        <Divider />\n        <CardContent>\n          <StatusSelect\n            onChange={handleStatusChange}\n            options={statusOptions}\n            value={status}\n          />\n          <Button\n            color=\"primary\"\n            onClick={handleSaveChanges}\n            sx={{ mt: 2 }}\n            variant=\"contained\"\n          >\n            Save Changes\n          </Button>\n        </CardContent>\n        <Divider />\n        <ActionList>\n          <ActionListItem\n            icon={EyeIcon}\n            label=\"Preview\"\n            onClick={handlePreview}\n          />\n          <ActionListItem\n            icon={DuplicateIcon}\n            label=\"Duplicate\"\n            onClick={handleOpenDuplicateDialog}\n          />\n        </ActionList>\n      </Card>\n      <ConfirmationDialog\n        message=\"Are you sure you want to duplicate this product? This can't be undone.\"\n        onCancel={handleCloseDuplicateDialog}\n        onConfirm={handleDuplicate}\n        open={duplicateDialogOpen}\n        title=\"Duplicate Product\"\n        variant=\"warning\"\n      />\n    </>\n  );\n};\n\nProductStatus.propTypes = {\n  product: PropTypes.object\n};\n"]},"metadata":{},"sourceType":"module"}
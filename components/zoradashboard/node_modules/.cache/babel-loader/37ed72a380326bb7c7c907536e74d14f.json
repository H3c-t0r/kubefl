{"ast":null,"code":"import { generateResourceId } from '../utils/generate-resource-id';\nimport { sign, decode, JWT_SECRET, JWT_EXPIRES_IN } from '../utils/jwt';\nimport { wait } from '../utils/wait';\nimport axios from 'axios';\nimport jwt_decode from \"jwt-decode\";\nconst users = [{\n  id: '5e86809283e28b96d2d38537',\n  avatar: '/static/user-chen_simmons.png',\n  email: 'demo@devias.io',\n  name: 'Chen Simmons',\n  password: 'Password123!'\n}];\n\nclass AuthApi {\n  async login({\n    username,\n    password\n  }) {\n    await wait(500);\n    await axios.post('http://localhost:8000/auth/jwt/create ', {\n      \"username\": username,\n      \"password\": password\n    }).then(res => {\n      return new Promise(resolve => {\n        // console.log(response.data)\n        // localStorage.setItem(\"accessToken\", res.data['access']);\n        console.log(res.data['access']);\n        resolve(res.data['access']); // console.log(res.data['access'])\n      });\n    }).catch(err => {\n      return new Promise(reject => {\n        // console.error('[Auth Api]: ', err);\n        reject(new Error('Internal server error'));\n      });\n    }); // return new Promise((resolve, reject) => {\n    //   try {\n    //     console.log(response.data)\n    //     resolve(response.data);\n    //   } catch (err) {\n    //     console.error('[Auth Api]: ', err);\n    //     reject(new Error('Internal server error'));\n    //   }\n    // });\n  }\n\n  async register({\n    email,\n    name,\n    password\n  }) {\n    await wait(1000);\n    return new Promise((resolve, reject) => {\n      try {\n        // Check if a user already exists\n        let user = users.find(_user => _user.email === email);\n\n        if (user) {\n          reject(new Error('User already exists'));\n          return;\n        }\n\n        user = {\n          id: generateResourceId(),\n          avatar: null,\n          email,\n          name,\n          password\n        };\n        users.push(user);\n        const accessToken = sign({\n          userId: user.id\n        }, JWT_SECRET, {\n          expiresIn: JWT_EXPIRES_IN\n        });\n        resolve(accessToken);\n      } catch (err) {\n        console.error('[Auth Api]: ', err);\n        reject(new Error('Internal server error'));\n      }\n    });\n  }\n\n  async me(accessToken) {\n    await wait(500);\n    console.log(acc);\n    return new Promise((resolve, reject) => {\n      try {\n        // Decode access token\n        console.log(\"here\");\n        const {\n          user_id\n        } = jwt_decode(accessToken); // console.log(user_id)\n        // const decoded = jwt_decode(accessToken);\n        // console.log(decoded)\n        // Find the user\n        // const user = users.find((_user) => _user.id === userId);\n        // if (!user) {\n        //   reject(new Error('Invalid authorization token'));\n        //   return;\n        // }\n\n        resolve({\n          id: user_id // avatar: user.avatar,\n          // email: user.email,\n          // name: user.name\n\n        });\n      } catch (err) {\n        console.log(\"Nop\");\n        console.error('[Auth Api]: ', err);\n        reject(new Error('Internal server error'));\n      }\n    });\n  }\n\n}\n\nexport const authApi = new AuthApi();","map":{"version":3,"sources":["/Users/allan.chepkoy/cloud/kubeflow/components/zoradashboard/src/api/auth.js"],"names":["generateResourceId","sign","decode","JWT_SECRET","JWT_EXPIRES_IN","wait","axios","jwt_decode","users","id","avatar","email","name","password","AuthApi","login","username","post","then","res","Promise","resolve","console","log","data","catch","err","reject","Error","register","user","find","_user","push","accessToken","userId","expiresIn","error","me","acc","user_id","authApi"],"mappings":"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","sourcesContent":["import { generateResourceId } from '../utils/generate-resource-id';\nimport { sign, decode, JWT_SECRET, JWT_EXPIRES_IN } from '../utils/jwt';\nimport { wait } from '../utils/wait';\nimport axios from 'axios';\nimport jwt_decode from \"jwt-decode\";\n\nconst users = [\n  {\n    id: '5e86809283e28b96d2d38537',\n    avatar: '/static/user-chen_simmons.png',\n    email: 'demo@devias.io',\n    name: 'Chen Simmons',\n    password: 'Password123!'\n  }\n];\n\nclass AuthApi {\n  async login({ username, password }) {\n    await wait(500)\n\n    await axios.post('http://localhost:8000/auth/jwt/create ', {\n      \"username\": username,\n      \"password\": password\n    }).then(res=>{\n      return new Promise((resolve) => {\n        // console.log(response.data)\n        // localStorage.setItem(\"accessToken\", res.data['access']);\n        console.log(res.data['access'])\n        resolve(res.data['access']);\n        // console.log(res.data['access'])\n      });\n    }).catch(err => {\n      return new Promise((reject) => {\n        // console.error('[Auth Api]: ', err);\n        reject(new Error('Internal server error'));\n      });\n    })\n\n    // return new Promise((resolve, reject) => {\n    //   try {\n    //     console.log(response.data)\n    //     resolve(response.data);\n    //   } catch (err) {\n    //     console.error('[Auth Api]: ', err);\n    //     reject(new Error('Internal server error'));\n    //   }\n    // });\n  }\n\n  async register({ email, name, password }) {\n    await wait(1000);\n\n    return new Promise((resolve, reject) => {\n      try {\n        // Check if a user already exists\n        let user = users.find((_user) => _user.email === email);\n\n        if (user) {\n          reject(new Error('User already exists'));\n          return;\n        }\n\n        user = {\n          id: generateResourceId(),\n          avatar: null,\n          email,\n          name,\n          password\n        };\n\n        users.push(user);\n\n        const accessToken = sign({ userId: user.id }, JWT_SECRET, { expiresIn: JWT_EXPIRES_IN });\n\n        resolve(accessToken);\n      } catch (err) {\n        console.error('[Auth Api]: ', err);\n        reject(new Error('Internal server error'));\n      }\n    });\n  }\n\n  async me(accessToken) {\n    await wait(500)\n    console.log(acc)\n    return new Promise((resolve, reject) => {\n      try {\n        // Decode access token\n        console.log(\"here\")\n        const { user_id } = jwt_decode(accessToken);\n        // console.log(user_id)\n\n        // const decoded = jwt_decode(accessToken);\n        // console.log(decoded)\n\n        // Find the user\n        // const user = users.find((_user) => _user.id === userId);\n\n        // if (!user) {\n        //   reject(new Error('Invalid authorization token'));\n        //   return;\n        // }\n\n        resolve({\n          id: user_id,\n          // avatar: user.avatar,\n          // email: user.email,\n          // name: user.name\n        });\n      } catch (err) {\n        console.log(\"Nop\")\n        console.error('[Auth Api]: ', err);\n        reject(new Error('Internal server error'));\n      }\n    });\n  }\n}\n\nexport const authApi = new AuthApi();\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"var _jsxFileName = \"/Users/allan.chepkoy/cloud/kubeflow/components/zoradashboard/src/components/order/order-timeline.js\";\nimport { Fragment } from 'react';\nimport PropTypes from 'prop-types';\nimport { Typography } from '@material-ui/core';\nimport { Timeline, TimelineConnector, TimelineContent, TimelineDot, TimelineItem } from '@material-ui/lab';\nimport { Check as CheckIcon } from '../../icons/check';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst getDotStyles = value => {\n  if (value === 'complete') {\n    return {\n      backgroundColor: 'success.main',\n      borderColor: 'success.main',\n      color: 'success.contrastText'\n    };\n  }\n\n  if (value === 'active') {\n    return {\n      backgroundColor: 'neutral.200',\n      borderColor: 'neutral.200',\n      color: 'text.secondary'\n    };\n  }\n\n  return {\n    backgroundColor: 'inherit',\n    borderColor: 'neutral.300',\n    color: 'text.secondary'\n  };\n}; // NOTE: Items should be generated on order data to display information such as ordered date\n\n\nconst getItems = status => {\n  const statusMapping = ['placed', 'processed', 'delivered', 'complete'];\n  const currentStatusIndex = statusMapping.indexOf(status) + 1;\n  const items = [{\n    title: 'Placed at 10/30/2021 03:16'\n  }, {\n    title: 'Processed'\n  }, {\n    title: 'Delivered'\n  }, {\n    title: 'complete'\n  }];\n  return items.map((item, index) => {\n    if (currentStatusIndex > index) {\n      return { ...item,\n        value: 'complete'\n      };\n    }\n\n    if (currentStatusIndex === index) {\n      return { ...item,\n        value: 'active'\n      };\n    }\n\n    return { ...item,\n      value: 'inactive'\n    };\n  });\n};\n\nexport const OrderTimeline = props => {\n  const {\n    status,\n    ...other\n  } = props;\n  const items = getItems(status);\n  return /*#__PURE__*/_jsxDEV(Timeline, {\n    sx: {\n      my: 0,\n      p: 0\n    },\n    ...other,\n    children: items.map((item, index) => /*#__PURE__*/_jsxDEV(Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(TimelineItem, {\n        sx: {\n          alignItems: 'center',\n          minHeight: 'auto',\n          '&::before': {\n            display: 'none'\n          }\n        },\n        children: [/*#__PURE__*/_jsxDEV(TimelineDot, {\n          sx: { ...getDotStyles(item.value),\n            alignSelf: 'center',\n            boxShadow: 'none',\n            flexShrink: 0,\n            height: 36,\n            width: 36,\n            m: 0\n          },\n          variant: item.value === 'complete' || item.value === 'active' ? 'filled' : 'outlined',\n          children: (item.value === 'complete' || item.value === 'active') && /*#__PURE__*/_jsxDEV(CheckIcon, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 99,\n            columnNumber: 18\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 84,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(TimelineContent, {\n          children: /*#__PURE__*/_jsxDEV(Typography, {\n            color: item.value === 'complete' || item.value === 'active' ? 'textPrimary' : 'textSecondary',\n            variant: \"overline\",\n            children: item.title\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 102,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 101,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 11\n      }, this), items.length > index + 1 && /*#__PURE__*/_jsxDEV(TimelineConnector, {\n        sx: {\n          backgroundColor: 'neutral.200',\n          height: 22,\n          ml: 2.25,\n          my: 1\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 13\n      }, this)]\n    }, item.title, true, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 9\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 66,\n    columnNumber: 5\n  }, this);\n};\n_c = OrderTimeline;\nOrderTimeline.propTypes = {\n  status: PropTypes.oneOf(['placed', 'processed', 'delivered', 'complete']).isRequired\n};\n\nvar _c;\n\n$RefreshReg$(_c, \"OrderTimeline\");","map":{"version":3,"sources":["/Users/allan.chepkoy/cloud/kubeflow/components/zoradashboard/src/components/order/order-timeline.js"],"names":["Fragment","PropTypes","Typography","Timeline","TimelineConnector","TimelineContent","TimelineDot","TimelineItem","Check","CheckIcon","getDotStyles","value","backgroundColor","borderColor","color","getItems","status","statusMapping","currentStatusIndex","indexOf","items","title","map","item","index","OrderTimeline","props","other","my","p","alignItems","minHeight","display","alignSelf","boxShadow","flexShrink","height","width","m","length","ml","propTypes","oneOf","isRequired"],"mappings":"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","sourcesContent":["import { Fragment } from 'react';\nimport PropTypes from 'prop-types';\nimport { Typography } from '@material-ui/core';\nimport {\n  Timeline,\n  TimelineConnector,\n  TimelineContent,\n  TimelineDot,\n  TimelineItem\n} from '@material-ui/lab';\nimport { Check as CheckIcon } from '../../icons/check';\n\nconst getDotStyles = (value) => {\n  if (value === 'complete') {\n    return {\n      backgroundColor: 'success.main',\n      borderColor: 'success.main',\n      color: 'success.contrastText'\n    };\n  }\n\n  if (value === 'active') {\n    return {\n      backgroundColor: 'neutral.200',\n      borderColor: 'neutral.200',\n      color: 'text.secondary'\n    };\n  }\n\n  return {\n    backgroundColor: 'inherit',\n    borderColor: 'neutral.300',\n    color: 'text.secondary'\n  };\n};\n\n// NOTE: Items should be generated on order data to display information such as ordered date\nconst getItems = (status) => {\n  const statusMapping = ['placed', 'processed', 'delivered', 'complete'];\n  const currentStatusIndex = statusMapping.indexOf(status) + 1;\n  const items = [\n    { title: 'Placed at 10/30/2021 03:16' },\n    { title: 'Processed' },\n    { title: 'Delivered' },\n    { title: 'complete' }\n  ];\n\n  return items.map((item, index) => {\n    if (currentStatusIndex > index) {\n      return { ...item, value: 'complete' };\n    }\n\n    if (currentStatusIndex === index) {\n      return { ...item, value: 'active' };\n    }\n\n    return { ...item, value: 'inactive' };\n  });\n};\n\nexport const OrderTimeline = (props) => {\n  const { status, ...other } = props;\n  const items = getItems(status);\n\n  return (\n    <Timeline\n      sx={{\n        my: 0,\n        p: 0\n      }}\n      {...other}\n    >\n      {items.map((item, index) => (\n        <Fragment key={item.title}>\n          <TimelineItem\n            sx={{\n              alignItems: 'center',\n              minHeight: 'auto',\n              '&::before': {\n                display: 'none'\n              }\n            }}\n          >\n            <TimelineDot\n              sx={{\n                ...(getDotStyles(item.value)),\n                alignSelf: 'center',\n                boxShadow: 'none',\n                flexShrink: 0,\n                height: 36,\n                width: 36,\n                m: 0\n              }}\n              variant={(item.value === 'complete' || item.value === 'active')\n                ? 'filled'\n                : 'outlined'}\n            >\n              {(item.value === 'complete' || item.value === 'active')\n              && <CheckIcon />}\n            </TimelineDot>\n            <TimelineContent>\n              <Typography\n                color={(item.value === 'complete' || item.value === 'active')\n                  ? 'textPrimary'\n                  : 'textSecondary'}\n                variant=\"overline\"\n              >\n                {item.title}\n              </Typography>\n            </TimelineContent>\n          </TimelineItem>\n          {items.length > index + 1 && (\n            <TimelineConnector\n              sx={{\n                backgroundColor: 'neutral.200',\n                height: 22,\n                ml: 2.25,\n                my: 1\n              }}\n            />\n          )}\n        </Fragment>\n      ))}\n    </Timeline>\n  );\n};\n\nOrderTimeline.propTypes = {\n  status: PropTypes.oneOf(['placed', 'processed', 'delivered', 'complete']).isRequired\n};\n"]},"metadata":{},"sourceType":"module"}
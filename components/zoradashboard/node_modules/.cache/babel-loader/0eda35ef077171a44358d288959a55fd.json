{"ast":null,"code":"import { generateResourceId } from '../utils/generate-resource-id';\nimport { sign, decode, JWT_SECRET, JWT_EXPIRES_IN } from '../utils/jwt';\nimport { wait } from '../utils/wait';\n\nconst axios = require('axios').default;\n\nclass AuthApi {\n  async login({\n    username,\n    password\n  }) {\n    // await wait(500);\n    axios.get('/auth/jwt/create').then(resp => {\n      console.log(resp.data);\n    }).catch(err => {\n      // Handle Error Here\n      console.error(err);\n    });\n    return new Promise((resolve, reject) => {\n      try {\n        // Find the user\n        // const user = users.find((_user) => _user.email === email);\n        // if (!user || (user.password !== password)) {\n        //   reject(new Error('Please check your email and password'));\n        //   return;\n        // }\n        // const resp = axios.post(\n        //   '/auth/jwt/create/',{\n        //     \"username\":username,\n        //     \"password\":password\n        //   });\n        // console.log(resp.data)\n        // Create the access token\n        // const accessToken = sign({ userId: user.id }, JWT_SECRET, { expiresIn: JWT_EXPIRES_IN });\n        resolve(resp.data);\n      } catch (err) {\n        console.error('[Auth Api]: ', err);\n        reject(new Error('Internal server error'));\n      }\n    });\n  }\n\n  async register({\n    email,\n    name,\n    password\n  }) {\n    await wait(1000);\n    return new Promise((resolve, reject) => {\n      try {\n        // Check if a user already exists\n        let user = users.find(_user => _user.email === email);\n\n        if (user) {\n          reject(new Error('User already exists'));\n          return;\n        }\n\n        user = {\n          id: generateResourceId(),\n          avatar: null,\n          email,\n          name,\n          password\n        };\n        users.push(user);\n        const accessToken = sign({\n          userId: user.id\n        }, JWT_SECRET, {\n          expiresIn: JWT_EXPIRES_IN\n        });\n        resolve(accessToken);\n      } catch (err) {\n        console.error('[Auth Api]: ', err);\n        reject(new Error('Internal server error'));\n      }\n    });\n  }\n\n  me(accessToken) {\n    return new Promise((resolve, reject) => {\n      try {\n        // Decode access token\n        const {\n          userId\n        } = decode(accessToken); // Find the user\n\n        const user = users.find(_user => _user.id === userId);\n\n        if (!user) {\n          reject(new Error('Invalid authorization token'));\n          return;\n        }\n\n        resolve({\n          id: user.id,\n          avatar: user.avatar,\n          email: user.email,\n          name: user.name\n        });\n      } catch (err) {\n        console.error('[Auth Api]: ', err);\n        reject(new Error('Internal server error'));\n      }\n    });\n  }\n\n}\n\nexport const authApi = new AuthApi();","map":{"version":3,"sources":["/Users/allan.chepkoy/cloud/kubeflow/components/zoradashboard/src/api/auth.js"],"names":["generateResourceId","sign","decode","JWT_SECRET","JWT_EXPIRES_IN","wait","axios","require","default","AuthApi","login","username","password","get","then","resp","console","log","data","catch","err","error","Promise","resolve","reject","Error","register","email","name","user","users","find","_user","id","avatar","push","accessToken","userId","expiresIn","me","authApi"],"mappings":"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","sourcesContent":["import { generateResourceId } from '../utils/generate-resource-id';\nimport { sign, decode, JWT_SECRET, JWT_EXPIRES_IN } from '../utils/jwt';\nimport { wait } from '../utils/wait';\nconst axios = require('axios').default;\n\n\nclass AuthApi {\n  async login({ username, password }) {\n    // await wait(500);\n    axios.get('/auth/jwt/create')\n        .then(resp => {\n            console.log(resp.data);\n        })\n        .catch(err => {\n            // Handle Error Here\n            console.error(err);\n        });\n\n    \n    return new Promise((resolve, reject) => {\n      try {\n        // Find the user\n        // const user = users.find((_user) => _user.email === email);\n\n        // if (!user || (user.password !== password)) {\n        //   reject(new Error('Please check your email and password'));\n        //   return;\n        // }\n\n        \n\n        // const resp = axios.post(\n        //   '/auth/jwt/create/',{\n        //     \"username\":username,\n        //     \"password\":password\n        //   });\n\n\n          // console.log(resp.data)\n\n\n        // Create the access token\n        // const accessToken = sign({ userId: user.id }, JWT_SECRET, { expiresIn: JWT_EXPIRES_IN });\n\n        resolve(resp.data);\n      } catch (err) {\n        console.error('[Auth Api]: ', err);\n        reject(new Error('Internal server error'));\n      }\n    });\n  }\n\n  async register({ email, name, password }) {\n    await wait(1000);\n\n    return new Promise((resolve, reject) => {\n      try {\n        // Check if a user already exists\n        let user = users.find((_user) => _user.email === email);\n\n        if (user) {\n          reject(new Error('User already exists'));\n          return;\n        }\n\n        user = {\n          id: generateResourceId(),\n          avatar: null,\n          email,\n          name,\n          password\n        };\n\n        users.push(user);\n\n        const accessToken = sign({ userId: user.id }, JWT_SECRET, { expiresIn: JWT_EXPIRES_IN });\n\n        resolve(accessToken);\n      } catch (err) {\n        console.error('[Auth Api]: ', err);\n        reject(new Error('Internal server error'));\n      }\n    });\n  }\n\n  me(accessToken) {\n    return new Promise((resolve, reject) => {\n      try {\n        // Decode access token\n        const { userId } = decode(accessToken);\n\n        // Find the user\n        const user = users.find((_user) => _user.id === userId);\n\n        if (!user) {\n          reject(new Error('Invalid authorization token'));\n          return;\n        }\n\n        resolve({\n          id: user.id,\n          avatar: user.avatar,\n          email: user.email,\n          name: user.name\n        });\n      } catch (err) {\n        console.error('[Auth Api]: ', err);\n        reject(new Error('Internal server error'));\n      }\n    });\n  }\n}\n\nexport const authApi = new AuthApi();\n"]},"metadata":{},"sourceType":"module"}
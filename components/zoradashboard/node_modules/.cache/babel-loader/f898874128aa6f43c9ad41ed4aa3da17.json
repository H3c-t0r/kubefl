{"ast":null,"code":"import { generateResourceId } from '../utils/generate-resource-id';\nimport { sign, decode, JWT_SECRET, JWT_EXPIRES_IN } from '../utils/jwt';\nimport { wait } from '../utils/wait';\nimport axios from \"axios\"; // const axios = require('axios').default;\n\nclass AuthApi {\n  async login({\n    username,\n    password\n  }) {\n    console.log(username, password);\n    await wait(500); // const resp = axios.post(\n    //   'http://localhost:8000/auth/jwt/create',{\n    //     \"username\":username,\n    //     \"password\":password\n    //   }).then(resp => {\n    //     console.log(resp.data);\n    // }).catch(err => {\n    //     // Handle Error Here\n    //     console.error(err);\n    // });\n    // axios.post('/auth/jwt/create')\n    //     .then(resp => {\n    //         console.log(resp.data);\n    //     })\n    //     .catch(err => {\n    //         // Handle Error Here\n    //         console.error(err);\n    //     });\n\n    return new Promise((resolve, reject) => {\n      try {\n        // Find the user\n        // const user = users.find((_user) => _user.email === email);\n        // if (!user || (user.password !== password)) {\n        //   reject(new Error('Please check your email and password'));\n        //   return;\n        // }\n        axios.post(\"http://localhost:8000/auth/jwt/create\", {\n          \"username\": username,\n          \"password\": password\n        }).then(res => {\n          const {\n            token\n          } = res.data;\n          localStorage.setItem(\"jwtToken\", token);\n          se;\n        });\n        const resp = axios.post('/auth/jwt/create/', {\n          \"username\": username,\n          \"password\": password\n        }); // console.log(resp.data)\n        // Create the access token\n        // const accessToken = sign({ userId: user.id }, JWT_SECRET, { expiresIn: JWT_EXPIRES_IN });\n\n        resolve(resp.data);\n      } catch (err) {\n        console.error('[Auth Api]: ', err);\n        reject(new Error('Internal server error'));\n      }\n    });\n  }\n\n  async register({\n    email,\n    name,\n    password\n  }) {\n    await wait(1000);\n    return new Promise((resolve, reject) => {\n      try {\n        // Check if a user already exists\n        let user = users.find(_user => _user.email === email);\n\n        if (user) {\n          reject(new Error('User already exists'));\n          return;\n        }\n\n        user = {\n          id: generateResourceId(),\n          avatar: null,\n          email,\n          name,\n          password\n        };\n        users.push(user);\n        const accessToken = sign({\n          userId: user.id\n        }, JWT_SECRET, {\n          expiresIn: JWT_EXPIRES_IN\n        });\n        resolve(accessToken);\n      } catch (err) {\n        console.error('[Auth Api]: ', err);\n        reject(new Error('Internal server error'));\n      }\n    });\n  }\n\n  me(accessToken) {\n    return new Promise((resolve, reject) => {\n      try {\n        // Decode access token\n        const {\n          userId\n        } = decode(accessToken); // Find the user\n\n        const user = users.find(_user => _user.id === userId);\n\n        if (!user) {\n          reject(new Error('Invalid authorization token'));\n          return;\n        }\n\n        resolve({\n          id: user.id,\n          avatar: user.avatar,\n          email: user.email,\n          name: user.name\n        });\n      } catch (err) {\n        console.error('[Auth Api]: ', err);\n        reject(new Error('Internal server error'));\n      }\n    });\n  }\n\n}\n\nexport const authApi = new AuthApi();","map":{"version":3,"sources":["/Users/allan.chepkoy/cloud/kubeflow/components/zoradashboard/src/api/auth.js"],"names":["generateResourceId","sign","decode","JWT_SECRET","JWT_EXPIRES_IN","wait","axios","AuthApi","login","username","password","console","log","Promise","resolve","reject","post","then","res","token","data","localStorage","setItem","se","resp","err","error","Error","register","email","name","user","users","find","_user","id","avatar","push","accessToken","userId","expiresIn","me","authApi"],"mappings":"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","sourcesContent":["import { generateResourceId } from '../utils/generate-resource-id';\nimport { sign, decode, JWT_SECRET, JWT_EXPIRES_IN } from '../utils/jwt';\nimport { wait } from '../utils/wait';\nimport axios from \"axios\"\n// const axios = require('axios').default;\n\n\nclass AuthApi {\n  async login({ username, password }) {\n    console.log(username, password)\n    await wait(500);\n\n    // const resp = axios.post(\n    //   'http://localhost:8000/auth/jwt/create',{\n    //     \"username\":username,\n    //     \"password\":password\n    //   }).then(resp => {\n    //     console.log(resp.data);\n    // }).catch(err => {\n    //     // Handle Error Here\n    //     console.error(err);\n    // });\n\n    // axios.post('/auth/jwt/create')\n    //     .then(resp => {\n    //         console.log(resp.data);\n    //     })\n    //     .catch(err => {\n    //         // Handle Error Here\n    //         console.error(err);\n    //     });\n\n    \n    return new Promise((resolve, reject) => {\n      try {\n        // Find the user\n        // const user = users.find((_user) => _user.email === email);\n\n        // if (!user || (user.password !== password)) {\n        //   reject(new Error('Please check your email and password'));\n        //   return;\n        // }\n        \n        axios.post(\"http://localhost:8000/auth/jwt/create\", {\n          \"username\":username,\n          \"password\":password\n        }).then(\n          res => {\n            const {token} = res.data;\n            localStorage.setItem(\"jwtToken\", token)\n            se\n          }\n        )\n\n        \n\n        const resp = axios.post(\n          '/auth/jwt/create/',{\n            \"username\":username,\n            \"password\":password\n          });\n\n\n          // console.log(resp.data)\n\n\n        // Create the access token\n        // const accessToken = sign({ userId: user.id }, JWT_SECRET, { expiresIn: JWT_EXPIRES_IN });\n\n        resolve(resp.data);\n      } catch (err) {\n        console.error('[Auth Api]: ', err);\n        reject(new Error('Internal server error'));\n      }\n    });\n  }\n\n  async register({ email, name, password }) {\n    await wait(1000);\n\n    return new Promise((resolve, reject) => {\n      try {\n        // Check if a user already exists\n        let user = users.find((_user) => _user.email === email);\n\n        if (user) {\n          reject(new Error('User already exists'));\n          return;\n        }\n\n        user = {\n          id: generateResourceId(),\n          avatar: null,\n          email,\n          name,\n          password\n        };\n\n        users.push(user);\n\n        const accessToken = sign({ userId: user.id }, JWT_SECRET, { expiresIn: JWT_EXPIRES_IN });\n\n        resolve(accessToken);\n      } catch (err) {\n        console.error('[Auth Api]: ', err);\n        reject(new Error('Internal server error'));\n      }\n    });\n  }\n\n  me(accessToken) {\n    return new Promise((resolve, reject) => {\n      try {\n        // Decode access token\n        const { userId } = decode(accessToken);\n\n        // Find the user\n        const user = users.find((_user) => _user.id === userId);\n\n        if (!user) {\n          reject(new Error('Invalid authorization token'));\n          return;\n        }\n\n        resolve({\n          id: user.id,\n          avatar: user.avatar,\n          email: user.email,\n          name: user.name\n        });\n      } catch (err) {\n        console.error('[Auth Api]: ', err);\n        reject(new Error('Internal server error'));\n      }\n    });\n  }\n}\n\nexport const authApi = new AuthApi();\n"]},"metadata":{},"sourceType":"module"}
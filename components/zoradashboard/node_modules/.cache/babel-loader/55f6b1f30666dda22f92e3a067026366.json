{"ast":null,"code":"var _jsxFileName = \"/Users/allan.chepkoy/cloud/kubeflow/components/zoradashboard/src/components/order/orders-dnd.js\",\n    _s = $RefreshSig$();\n\nimport { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { DragDropContext } from 'react-beautiful-dnd';\nimport { Card } from '@material-ui/core';\nimport { OrderDroppable } from './order-dropable';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst statusVariants = [{\n  badgeColor: 'info.main',\n  label: 'Placed',\n  value: 'placed'\n}, {\n  badgeColor: 'error.main',\n  label: 'Processed',\n  value: 'processed'\n}, {\n  badgeColor: 'warning.main',\n  label: 'Delivered',\n  value: 'delivered'\n}];\n\nconst getColumns = orders => {\n  const columns = {};\n  statusVariants.forEach(variant => {\n    columns[variant.value] = orders.filter(order => order.status === variant.value);\n  });\n  return columns;\n};\n\nconst reorder = (source, startIndex, endIndex) => {\n  const result = [...source];\n  const [removed] = result.splice(startIndex, 1);\n  result.splice(endIndex, 0, removed);\n  return result;\n};\n\nconst move = (source, destination, droppableSource, droppableDestination) => {\n  const sourceClone = [...source];\n  const destClone = [...destination];\n  const [removed] = sourceClone.splice(droppableSource.index, 1);\n  removed.status = droppableDestination.droppableId;\n  destClone.splice(droppableDestination.index, 0, removed);\n  const result = {};\n  result[droppableSource.droppableId] = sourceClone;\n  result[droppableDestination.droppableId] = destClone;\n  return result;\n};\n\nexport const OrdersDnd = props => {\n  _s();\n\n  const {\n    error,\n    isLoading,\n    orders,\n    ...other\n  } = props;\n  const [columns, setColumns] = useState(null); // NOTE: This event should make a server request,\n  //  update the order document with the new status on the server, then update the order data\n  //  on client side\n\n  const handleDragEnd = ({\n    source,\n    destination\n  }) => {\n    if (!destination) {\n      return;\n    }\n\n    const sourceId = source.droppableId;\n    const destinationId = destination.droppableId;\n\n    if (sourceId === destinationId) {\n      const items = reorder(columns[sourceId], source.index, destination.index);\n      const newState = { ...columns\n      };\n      newState[sourceId] = items;\n      setColumns(newState);\n    } else {\n      const result = move(columns[sourceId], columns[destinationId], source, destination);\n      const newState = { ...columns\n      };\n      newState[sourceId] = result[sourceId];\n      newState[destinationId] = result[destinationId];\n      setColumns(newState);\n    }\n  };\n\n  useEffect(() => {\n    setColumns(getColumns(orders));\n  }, [orders]);\n\n  if (!columns) {\n    return null;\n  }\n\n  return /*#__PURE__*/_jsxDEV(Card, {\n    sx: {\n      backgroundColor: 'neutral.100',\n      display: 'flex',\n      flexGrow: 1,\n      mb: 2,\n      mx: 2,\n      overflow: 'auto'\n    },\n    variant: \"outlined\",\n    ...other,\n    children: /*#__PURE__*/_jsxDEV(DragDropContext, {\n      onDragEnd: handleDragEnd,\n      children: statusVariants.map(option => /*#__PURE__*/_jsxDEV(OrderDroppable, {\n        badgeColor: option.badgeColor,\n        id: option.value,\n        orders: columns[option.value],\n        title: option.label\n      }, option.value, false, {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 96,\n    columnNumber: 5\n  }, this);\n};\n\n_s(OrdersDnd, \"mE7xsy9MPDnVxKrWVVMa11Hqw7s=\");\n\n_c = OrdersDnd;\nOrdersDnd.defaultProps = {\n  orders: []\n};\nOrdersDnd.propTypes = {\n  error: PropTypes.string,\n  isLoading: PropTypes.bool,\n  orders: PropTypes.array\n};\n\nvar _c;\n\n$RefreshReg$(_c, \"OrdersDnd\");","map":{"version":3,"sources":["/Users/allan.chepkoy/cloud/kubeflow/components/zoradashboard/src/components/order/orders-dnd.js"],"names":["useState","useEffect","PropTypes","DragDropContext","Card","OrderDroppable","statusVariants","badgeColor","label","value","getColumns","orders","columns","forEach","variant","filter","order","status","reorder","source","startIndex","endIndex","result","removed","splice","move","destination","droppableSource","droppableDestination","sourceClone","destClone","index","droppableId","OrdersDnd","props","error","isLoading","other","setColumns","handleDragEnd","sourceId","destinationId","items","newState","backgroundColor","display","flexGrow","mb","mx","overflow","map","option","defaultProps","propTypes","string","bool","array"],"mappings":"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","sourcesContent":["import { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { DragDropContext } from 'react-beautiful-dnd';\nimport { Card } from '@material-ui/core';\nimport { OrderDroppable } from './order-dropable';\n\nconst statusVariants = [\n  {\n    badgeColor: 'info.main',\n    label: 'Placed',\n    value: 'placed'\n  },\n  {\n    badgeColor: 'error.main',\n    label: 'Processed',\n    value: 'processed'\n  },\n  {\n    badgeColor: 'warning.main',\n    label: 'Delivered',\n    value: 'delivered'\n  }\n];\n\nconst getColumns = (orders) => {\n  const columns = {};\n\n  statusVariants.forEach((variant) => {\n    columns[variant.value] = orders.filter((order) => order.status === variant.value);\n  });\n\n  return columns;\n};\n\nconst reorder = (source, startIndex, endIndex) => {\n  const result = [...source];\n  const [removed] = result.splice(startIndex, 1);\n  result.splice(endIndex, 0, removed);\n\n  return result;\n};\n\nconst move = (source, destination, droppableSource, droppableDestination) => {\n  const sourceClone = [...source];\n  const destClone = [...destination];\n\n  const [removed] = sourceClone.splice(droppableSource.index, 1);\n  removed.status = droppableDestination.droppableId;\n  destClone.splice(droppableDestination.index, 0, removed);\n\n  const result = {};\n  result[droppableSource.droppableId] = sourceClone;\n  result[droppableDestination.droppableId] = destClone;\n\n  return result;\n};\n\nexport const OrdersDnd = (props) => {\n  const { error, isLoading, orders, ...other } = props;\n  const [columns, setColumns] = useState(null);\n\n  // NOTE: This event should make a server request,\n  //  update the order document with the new status on the server, then update the order data\n  //  on client side\n  const handleDragEnd = ({ source, destination }) => {\n    if (!destination) {\n      return;\n    }\n\n    const sourceId = source.droppableId;\n    const destinationId = destination.droppableId;\n\n    if (sourceId === destinationId) {\n      const items = reorder(columns[sourceId], source.index, destination.index);\n      const newState = { ...columns };\n      newState[sourceId] = items;\n      setColumns(newState);\n    } else {\n      const result = move(columns[sourceId], columns[destinationId], source, destination);\n      const newState = { ...columns };\n      newState[sourceId] = result[sourceId];\n      newState[destinationId] = result[destinationId];\n      setColumns(newState);\n    }\n  };\n\n  useEffect(() => {\n    setColumns(getColumns(orders));\n  }, [orders]);\n\n  if (!columns) {\n    return null;\n  }\n\n  return (\n    <Card\n      sx={{\n        backgroundColor: 'neutral.100',\n        display: 'flex',\n        flexGrow: 1,\n        mb: 2,\n        mx: 2,\n        overflow: 'auto'\n      }}\n      variant=\"outlined\"\n      {...other}\n    >\n      <DragDropContext onDragEnd={handleDragEnd}>\n        {statusVariants.map((option) => (\n          <OrderDroppable\n            badgeColor={option.badgeColor}\n            id={option.value}\n            orders={columns[option.value]}\n            title={option.label}\n            key={option.value}\n          />\n        ))}\n      </DragDropContext>\n    </Card>\n  );\n};\n\nOrdersDnd.defaultProps = {\n  orders: []\n};\n\nOrdersDnd.propTypes = {\n  error: PropTypes.string,\n  isLoading: PropTypes.bool,\n  orders: PropTypes.array\n};\n"]},"metadata":{},"sourceType":"module"}
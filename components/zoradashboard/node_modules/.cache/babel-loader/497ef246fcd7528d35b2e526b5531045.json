{"ast":null,"code":"var _jsxFileName = \"/Users/allan.chepkoy/cloud/kubeflow/components/zoradashboard/src/components/auth-guard.js\",\n    _s = $RefreshSig$();\n\nimport { useState } from 'react';\nimport { Navigate, useLocation } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport { useAuth } from '../hooks/use-auth';\nimport { Login } from '../containers/login';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport const AuthGuard = props => {\n  _s();\n\n  const {\n    children\n  } = props;\n  const auth = useAuth();\n  const location = useLocation();\n  const [requestedLocation, setRequestedLocation] = useState(null);\n\n  if (!auth.isAuthenticated) {\n    if (location.pathname !== requestedLocation) {\n      setRequestedLocation(location.pathname);\n    }\n\n    return /*#__PURE__*/_jsxDEV(Login, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 7\n    }, this);\n  } // This is done so that in case the route changes by any chance through other\n  // means between the moment of request and the render we navigate to the initially\n  // requested route.\n\n\n  if (requestedLocation && location.pathname !== requestedLocation) {\n    setRequestedLocation(null);\n    return /*#__PURE__*/_jsxDEV(Navigate, {\n      to: requestedLocation\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 12\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: children\n  }, void 0, false);\n};\n\n_s(AuthGuard, \"TTzP3JCA3iXjv4SFd0bTIGZnPfw=\", false, function () {\n  return [useAuth, useLocation];\n});\n\n_c = AuthGuard;\nAuthGuard.propTypes = {\n  children: PropTypes.node\n};\n\nvar _c;\n\n$RefreshReg$(_c, \"AuthGuard\");","map":{"version":3,"sources":["/Users/allan.chepkoy/cloud/kubeflow/components/zoradashboard/src/components/auth-guard.js"],"names":["useState","Navigate","useLocation","PropTypes","useAuth","Login","AuthGuard","props","children","auth","location","requestedLocation","setRequestedLocation","isAuthenticated","pathname","propTypes","node"],"mappings":";;;AAAA,SAASA,QAAT,QAAyB,OAAzB;AACA,SAASC,QAAT,EAAmBC,WAAnB,QAAsC,kBAAtC;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,SAASC,OAAT,QAAwB,mBAAxB;AACA,SAASC,KAAT,QAAsB,qBAAtB;;;AAEA,OAAO,MAAMC,SAAS,GAAIC,KAAD,IAAW;AAAA;;AAClC,QAAM;AAAEC,IAAAA;AAAF,MAAeD,KAArB;AACA,QAAME,IAAI,GAAGL,OAAO,EAApB;AACA,QAAMM,QAAQ,GAAGR,WAAW,EAA5B;AACA,QAAM,CAACS,iBAAD,EAAoBC,oBAApB,IAA4CZ,QAAQ,CAAC,IAAD,CAA1D;;AAEA,MAAI,CAACS,IAAI,CAACI,eAAV,EAA2B;AACzB,QAAIH,QAAQ,CAACI,QAAT,KAAsBH,iBAA1B,EAA6C;AAC3CC,MAAAA,oBAAoB,CAACF,QAAQ,CAACI,QAAV,CAApB;AACD;;AAED,wBACE,QAAC,KAAD;AAAA;AAAA;AAAA;AAAA,YADF;AAGD,GAdiC,CAgBlC;AACA;AACA;;;AACA,MAAIH,iBAAiB,IAAID,QAAQ,CAACI,QAAT,KAAsBH,iBAA/C,EAAkE;AAChEC,IAAAA,oBAAoB,CAAC,IAAD,CAApB;AACA,wBAAO,QAAC,QAAD;AAAU,MAAA,EAAE,EAAED;AAAd;AAAA;AAAA;AAAA;AAAA,YAAP;AACD;;AAED,sBAAO;AAAA,cAAGH;AAAH,mBAAP;AACD,CAzBM;;GAAMF,S;UAEEF,O,EACIF,W;;;KAHNI,S;AA2BbA,SAAS,CAACS,SAAV,GAAsB;AACpBP,EAAAA,QAAQ,EAAEL,SAAS,CAACa;AADA,CAAtB","sourcesContent":["import { useState } from 'react';\nimport { Navigate, useLocation } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport { useAuth } from '../hooks/use-auth';\nimport { Login } from '../containers/login';\n\nexport const AuthGuard = (props) => {\n  const { children } = props;\n  const auth = useAuth();\n  const location = useLocation();\n  const [requestedLocation, setRequestedLocation] = useState(null);\n\n  if (!auth.isAuthenticated) {\n    if (location.pathname !== requestedLocation) {\n      setRequestedLocation(location.pathname);\n    }\n\n    return (\n      <Login />\n    );\n  }\n\n  // This is done so that in case the route changes by any chance through other\n  // means between the moment of request and the render we navigate to the initially\n  // requested route.\n  if (requestedLocation && location.pathname !== requestedLocation) {\n    setRequestedLocation(null);\n    return <Navigate to={requestedLocation} />;\n  }\n\n  return <>{children}</>;\n};\n\nAuthGuard.propTypes = {\n  children: PropTypes.node\n};\n"]},"metadata":{},"sourceType":"module"}
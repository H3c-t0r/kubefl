{"ast":null,"code":"var _jsxFileName = \"/Users/allan.chepkoy/cloud/kubeflow/components/zoradashboard/src/components/order/order-payment-dialog.js\",\n    _s = $RefreshSig$();\n\nimport PropTypes from 'prop-types';\nimport { useFormik } from 'formik';\nimport * as Yup from 'yup';\nimport toast from 'react-hot-toast';\nimport { Button, Dialog, DialogActions, DialogContent, DialogTitle, FormHelperText, Grid, MenuItem } from '@material-ui/core';\nimport { InputField } from '../input-field';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst paymentStatusOptions = [{\n  value: 'paid',\n  label: 'Paid'\n}, {\n  value: 'not-paid',\n  label: 'Not paid'\n}];\nconst paymentMethodOptions = [{\n  value: 'debit',\n  label: 'Direct debit'\n}, {\n  value: 'paypal',\n  label: 'Paypal'\n}];\nconst courierOptions = ['DHL', 'UPS', 'FedEx', 'Purolator'];\nexport const OrderPaymentDialog = props => {\n  _s();\n\n  const {\n    open,\n    onClose,\n    order\n  } = props;\n  const formik = useFormik({\n    initialValues: {\n      paymentStatus: (order === null || order === void 0 ? void 0 : order.paymentStatus) || '',\n      courier: (order === null || order === void 0 ? void 0 : order.courier) || '',\n      paymentMethod: (order === null || order === void 0 ? void 0 : order.paymentMethod) || '',\n      submit: null,\n      trackingCode: (order === null || order === void 0 ? void 0 : order.trackingCode) || ''\n    },\n    validationSchema: Yup.object().shape({\n      paymentStatus: Yup.string().max(255).required('Payment status is required'),\n      courier: Yup.string().max(255).required('Courier is required'),\n      paymentMethod: Yup.string().max(255).required('Payment method is required'),\n      trackingCode: Yup.string().max(255).required('Tracking is required')\n    }),\n    onSubmit: async (values, helpers) => {\n      try {\n        toast.success('Order updated');\n        helpers.setStatus({\n          success: true\n        });\n        helpers.setSubmitting(false);\n        onClose === null || onClose === void 0 ? void 0 : onClose();\n      } catch (err) {\n        console.error(err);\n        helpers.setStatus({\n          success: false\n        });\n        helpers.setErrors({\n          submit: err.message\n        });\n        helpers.setSubmitting(false);\n      }\n    }\n  });\n  return /*#__PURE__*/_jsxDEV(Dialog, {\n    onClose: onClose,\n    open: open,\n    PaperProps: {\n      sx: {\n        width: '100%'\n      }\n    },\n    TransitionProps: {\n      onExited: () => formik.resetForm()\n    },\n    children: [/*#__PURE__*/_jsxDEV(DialogTitle, {\n      children: \"Edit order\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(DialogContent, {\n      children: /*#__PURE__*/_jsxDEV(Grid, {\n        container: true,\n        spacing: 2,\n        children: [/*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          xs: 12,\n          children: /*#__PURE__*/_jsxDEV(InputField, {\n            disabled: true,\n            fullWidth: true,\n            label: \"Stripe Payment ID\",\n            name: \"paymentId\",\n            value: order.paymentId\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 97,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 93,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          xs: 12,\n          children: /*#__PURE__*/_jsxDEV(InputField, {\n            error: Boolean(formik.touched.paymentStatus && formik.errors.paymentStatus),\n            fullWidth: true,\n            helperText: formik.touched.paymentStatus && formik.errors.paymentStatus,\n            label: \"Payment status\",\n            name: \"paymentStatus\",\n            onBlur: formik.handleBlur,\n            onChange: formik.handleChange,\n            select: true,\n            value: formik.values.paymentStatus,\n            children: paymentStatusOptions.map(option => /*#__PURE__*/_jsxDEV(MenuItem, {\n              value: option.value,\n              children: option.label\n            }, option.value, false, {\n              fileName: _jsxFileName,\n              lineNumber: 121,\n              columnNumber: 17\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 109,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 105,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          xs: 12,\n          children: /*#__PURE__*/_jsxDEV(InputField, {\n            error: Boolean(formik.touched.paymentMethod && formik.errors.paymentMethod),\n            fullWidth: true,\n            helperText: formik.touched.paymentMethod && formik.errors.paymentMethod,\n            label: \"Payment method\",\n            name: \"paymentMethod\",\n            onBlur: formik.handleBlur,\n            onChange: formik.handleChange,\n            select: true,\n            value: formik.values.paymentMethod,\n            children: paymentMethodOptions.map(option => /*#__PURE__*/_jsxDEV(MenuItem, {\n              value: option.value,\n              children: option.label\n            }, option.value, false, {\n              fileName: _jsxFileName,\n              lineNumber: 146,\n              columnNumber: 17\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 134,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 130,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          xs: 12,\n          children: /*#__PURE__*/_jsxDEV(InputField, {\n            error: Boolean(formik.touched.courier && formik.errors.courier),\n            fullWidth: true,\n            helperText: formik.touched.courier && formik.errors.courier,\n            label: \"Courier\",\n            name: \"courier\",\n            onBlur: formik.handleBlur,\n            onChange: formik.handleChange,\n            select: true,\n            value: formik.values.courier,\n            children: courierOptions.map(option => /*#__PURE__*/_jsxDEV(MenuItem, {\n              value: option,\n              children: option\n            }, option, false, {\n              fileName: _jsxFileName,\n              lineNumber: 171,\n              columnNumber: 17\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 159,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 155,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          xs: 12,\n          children: /*#__PURE__*/_jsxDEV(InputField, {\n            error: Boolean(formik.touched.trackingCode && formik.errors.trackingCode),\n            fullWidth: true,\n            helperText: formik.touched.trackingCode && formik.errors.trackingCode,\n            label: \"Tracking\",\n            name: \"trackingCode\",\n            onBlur: formik.handleBlur,\n            onChange: formik.handleChange,\n            value: formik.values.trackingCode\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 184,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 180,\n          columnNumber: 11\n        }, this), formik.errors.submit && /*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          xs: 12,\n          children: /*#__PURE__*/_jsxDEV(FormHelperText, {\n            error: true,\n            children: formik.errors.submit\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 200,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 196,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(DialogActions, {\n      children: [/*#__PURE__*/_jsxDEV(Button, {\n        color: \"primary\",\n        onClick: onClose,\n        variant: \"text\",\n        children: \"Cancel\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 208,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        color: \"primary\",\n        onClick: () => {\n          formik.handleSubmit();\n        },\n        variant: \"contained\",\n        children: \"Save Changes\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 215,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 207,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 73,\n    columnNumber: 5\n  }, this);\n};\n\n_s(OrderPaymentDialog, \"B/4rI4IXClQ7sG7psKj+pOuRe5Q=\", false, function () {\n  return [useFormik];\n});\n\n_c = OrderPaymentDialog;\nOrderPaymentDialog.defaultProps = {\n  open: false\n};\nOrderPaymentDialog.propTypes = {\n  onClose: PropTypes.func,\n  open: PropTypes.bool,\n  order: PropTypes.object.isRequired\n};\n\nvar _c;\n\n$RefreshReg$(_c, \"OrderPaymentDialog\");","map":{"version":3,"sources":["/Users/allan.chepkoy/cloud/kubeflow/components/zoradashboard/src/components/order/order-payment-dialog.js"],"names":["PropTypes","useFormik","Yup","toast","Button","Dialog","DialogActions","DialogContent","DialogTitle","FormHelperText","Grid","MenuItem","InputField","paymentStatusOptions","value","label","paymentMethodOptions","courierOptions","OrderPaymentDialog","props","open","onClose","order","formik","initialValues","paymentStatus","courier","paymentMethod","submit","trackingCode","validationSchema","object","shape","string","max","required","onSubmit","values","helpers","success","setStatus","setSubmitting","err","console","error","setErrors","message","sx","width","onExited","resetForm","paymentId","Boolean","touched","errors","handleBlur","handleChange","map","option","handleSubmit","defaultProps","propTypes","func","bool","isRequired"],"mappings":"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","sourcesContent":["import PropTypes from 'prop-types';\nimport { useFormik } from 'formik';\nimport * as Yup from 'yup';\nimport toast from 'react-hot-toast';\nimport {\n  Button,\n  Dialog,\n  DialogActions,\n  DialogContent,\n  DialogTitle,\n  FormHelperText,\n  Grid,\n  MenuItem\n} from '@material-ui/core';\nimport { InputField } from '../input-field';\n\nconst paymentStatusOptions = [\n  {\n    value: 'paid',\n    label: 'Paid'\n  },\n  {\n    value: 'not-paid',\n    label: 'Not paid'\n  }\n];\n\nconst paymentMethodOptions = [\n  {\n    value: 'debit',\n    label: 'Direct debit'\n  },\n  {\n    value: 'paypal',\n    label: 'Paypal'\n  }\n];\n\nconst courierOptions = ['DHL', 'UPS', 'FedEx', 'Purolator'];\n\nexport const OrderPaymentDialog = (props) => {\n  const { open, onClose, order } = props;\n  const formik = useFormik({\n    initialValues: {\n      paymentStatus: order?.paymentStatus || '',\n      courier: order?.courier || '',\n      paymentMethod: order?.paymentMethod || '',\n      submit: null,\n      trackingCode: order?.trackingCode || ''\n    },\n    validationSchema: Yup.object().shape({\n      paymentStatus: Yup.string().max(255).required('Payment status is required'),\n      courier: Yup.string().max(255).required('Courier is required'),\n      paymentMethod: Yup.string().max(255).required('Payment method is required'),\n      trackingCode: Yup.string().max(255).required('Tracking is required')\n    }),\n    onSubmit: async (values, helpers) => {\n      try {\n        toast.success('Order updated');\n        helpers.setStatus({ success: true });\n        helpers.setSubmitting(false);\n        onClose?.();\n      } catch (err) {\n        console.error(err);\n        helpers.setStatus({ success: false });\n        helpers.setErrors({ submit: err.message });\n        helpers.setSubmitting(false);\n      }\n    }\n  });\n\n  return (\n    <Dialog\n      onClose={onClose}\n      open={open}\n      PaperProps={{\n        sx: {\n          width: '100%'\n        }\n      }}\n      TransitionProps={{\n        onExited: () => formik.resetForm()\n      }}\n    >\n      <DialogTitle>\n        Edit order\n      </DialogTitle>\n      <DialogContent>\n        <Grid\n          container\n          spacing={2}\n        >\n          <Grid\n            item\n            xs={12}\n          >\n            <InputField\n              disabled\n              fullWidth\n              label=\"Stripe Payment ID\"\n              name=\"paymentId\"\n              value={order.paymentId}\n            />\n          </Grid>\n          <Grid\n            item\n            xs={12}\n          >\n            <InputField\n              error={Boolean(formik.touched.paymentStatus && formik.errors.paymentStatus)}\n              fullWidth\n              helperText={formik.touched.paymentStatus && formik.errors.paymentStatus}\n              label=\"Payment status\"\n              name=\"paymentStatus\"\n              onBlur={formik.handleBlur}\n              onChange={formik.handleChange}\n              select\n              value={formik.values.paymentStatus}\n            >\n              {paymentStatusOptions.map((option) => (\n                <MenuItem\n                  key={option.value}\n                  value={option.value}\n                >\n                  {option.label}\n                </MenuItem>\n              ))}\n            </InputField>\n          </Grid>\n          <Grid\n            item\n            xs={12}\n          >\n            <InputField\n              error={Boolean(formik.touched.paymentMethod && formik.errors.paymentMethod)}\n              fullWidth\n              helperText={formik.touched.paymentMethod && formik.errors.paymentMethod}\n              label=\"Payment method\"\n              name=\"paymentMethod\"\n              onBlur={formik.handleBlur}\n              onChange={formik.handleChange}\n              select\n              value={formik.values.paymentMethod}\n            >\n              {paymentMethodOptions.map((option) => (\n                <MenuItem\n                  key={option.value}\n                  value={option.value}\n                >\n                  {option.label}\n                </MenuItem>\n              ))}\n            </InputField>\n          </Grid>\n          <Grid\n            item\n            xs={12}\n          >\n            <InputField\n              error={Boolean(formik.touched.courier && formik.errors.courier)}\n              fullWidth\n              helperText={formik.touched.courier && formik.errors.courier}\n              label=\"Courier\"\n              name=\"courier\"\n              onBlur={formik.handleBlur}\n              onChange={formik.handleChange}\n              select\n              value={formik.values.courier}\n            >\n              {courierOptions.map((option) => (\n                <MenuItem\n                  key={option}\n                  value={option}\n                >\n                  {option}\n                </MenuItem>\n              ))}\n            </InputField>\n          </Grid>\n          <Grid\n            item\n            xs={12}\n          >\n            <InputField\n              error={Boolean(formik.touched.trackingCode && formik.errors.trackingCode)}\n              fullWidth\n              helperText={formik.touched.trackingCode && formik.errors.trackingCode}\n              label=\"Tracking\"\n              name=\"trackingCode\"\n              onBlur={formik.handleBlur}\n              onChange={formik.handleChange}\n              value={formik.values.trackingCode}\n            />\n          </Grid>\n          {formik.errors.submit && (\n            <Grid\n              item\n              xs={12}\n            >\n              <FormHelperText error>\n                {formik.errors.submit}\n              </FormHelperText>\n            </Grid>\n          )}\n        </Grid>\n      </DialogContent>\n      <DialogActions>\n        <Button\n          color=\"primary\"\n          onClick={onClose}\n          variant=\"text\"\n        >\n          Cancel\n        </Button>\n        <Button\n          color=\"primary\"\n          onClick={() => { formik.handleSubmit(); }}\n          variant=\"contained\"\n        >\n          Save Changes\n        </Button>\n      </DialogActions>\n    </Dialog>\n  );\n};\n\nOrderPaymentDialog.defaultProps = {\n  open: false\n};\n\nOrderPaymentDialog.propTypes = {\n  onClose: PropTypes.func,\n  open: PropTypes.bool,\n  order: PropTypes.object.isRequired\n};\n"]},"metadata":{},"sourceType":"module"}
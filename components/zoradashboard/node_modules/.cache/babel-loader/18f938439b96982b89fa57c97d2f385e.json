{"ast":null,"code":"import { generateResourceId } from '../utils/generate-resource-id';\nimport { sign, decode, JWT_SECRET, JWT_EXPIRES_IN } from '../utils/jwt';\nimport { wait } from '../utils/wait';\n\nconst axios = require('axios');\n\nconst users = [{\n  id: '5e86809283e28b96d2d38537',\n  avatar: '/static/user-chen_simmons.png',\n  email: 'demo@devias.io',\n  name: 'Chen Simmons',\n  password: 'Password123!'\n}];\n\nclass AuthApi {\n  async login({\n    username,\n    password\n  }) {\n    await wait(500);\n    return new Promise((resolve, reject) => {\n      try {\n        // Find the user\n        // const user = users.find((_user) => _user.email === email);\n        // if (!user || (user.password !== password)) {\n        //   reject(new Error('Please check your email and password'));\n        //   return;\n        // }\n        const resp = axios.post('http://localhost:8000/auth/jwt/create/', {\n          \"username\": username,\n          \"password\": password\n        });\n        console.log(accessToken); // Create the access token\n        // const accessToken = sign({ userId: user.id }, JWT_SECRET, { expiresIn: JWT_EXPIRES_IN });\n\n        resolve(accessToken);\n      } catch (err) {\n        console.error('[Auth Api]: ', err);\n        reject(new Error('Internal server error'));\n      }\n    });\n  }\n\n  async register({\n    email,\n    name,\n    password\n  }) {\n    await wait(1000);\n    return new Promise((resolve, reject) => {\n      try {\n        // Check if a user already exists\n        let user = users.find(_user => _user.email === email);\n\n        if (user) {\n          reject(new Error('User already exists'));\n          return;\n        }\n\n        user = {\n          id: generateResourceId(),\n          avatar: null,\n          email,\n          name,\n          password\n        };\n        users.push(user);\n        const accessToken = sign({\n          userId: user.id\n        }, JWT_SECRET, {\n          expiresIn: JWT_EXPIRES_IN\n        });\n        resolve(accessToken);\n      } catch (err) {\n        console.error('[Auth Api]: ', err);\n        reject(new Error('Internal server error'));\n      }\n    });\n  }\n\n  me(accessToken) {\n    return new Promise((resolve, reject) => {\n      try {\n        // Decode access token\n        const {\n          userId\n        } = decode(accessToken); // Find the user\n\n        const user = users.find(_user => _user.id === userId);\n\n        if (!user) {\n          reject(new Error('Invalid authorization token'));\n          return;\n        }\n\n        resolve({\n          id: user.id,\n          avatar: user.avatar,\n          email: user.email,\n          name: user.name\n        });\n      } catch (err) {\n        console.error('[Auth Api]: ', err);\n        reject(new Error('Internal server error'));\n      }\n    });\n  }\n\n}\n\nexport const authApi = new AuthApi();","map":{"version":3,"sources":["/Users/allan.chepkoy/cloud/kubeflow/components/zoradashboard/src/api/auth.js"],"names":["generateResourceId","sign","decode","JWT_SECRET","JWT_EXPIRES_IN","wait","axios","require","users","id","avatar","email","name","password","AuthApi","login","username","Promise","resolve","reject","resp","post","console","log","accessToken","err","error","Error","register","user","find","_user","push","userId","expiresIn","me","authApi"],"mappings":"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","sourcesContent":["import { generateResourceId } from '../utils/generate-resource-id';\nimport { sign, decode, JWT_SECRET, JWT_EXPIRES_IN } from '../utils/jwt';\nimport { wait } from '../utils/wait';\nconst axios = require('axios');\n\nconst users = [\n  {\n    id: '5e86809283e28b96d2d38537',\n    avatar: '/static/user-chen_simmons.png',\n    email: 'demo@devias.io',\n    name: 'Chen Simmons',\n    password: 'Password123!'\n  }\n];\n\nclass AuthApi {\n  async login({ username, password }) {\n    await wait(500);\n\n    \n    return new Promise((resolve, reject) => {\n      try {\n        // Find the user\n        // const user = users.find((_user) => _user.email === email);\n\n        // if (!user || (user.password !== password)) {\n        //   reject(new Error('Please check your email and password'));\n        //   return;\n        // }\n\n        const resp = axios.post(\n          'http://localhost:8000/auth/jwt/create/',{\n            \"username\":username,\n            \"password\":password\n          });\n\n\n        console.log(accessToken)\n\n\n        // Create the access token\n        // const accessToken = sign({ userId: user.id }, JWT_SECRET, { expiresIn: JWT_EXPIRES_IN });\n\n        resolve(accessToken);\n      } catch (err) {\n        console.error('[Auth Api]: ', err);\n        reject(new Error('Internal server error'));\n      }\n    });\n  }\n\n  async register({ email, name, password }) {\n    await wait(1000);\n\n    return new Promise((resolve, reject) => {\n      try {\n        // Check if a user already exists\n        let user = users.find((_user) => _user.email === email);\n\n        if (user) {\n          reject(new Error('User already exists'));\n          return;\n        }\n\n        user = {\n          id: generateResourceId(),\n          avatar: null,\n          email,\n          name,\n          password\n        };\n\n        users.push(user);\n\n        const accessToken = sign({ userId: user.id }, JWT_SECRET, { expiresIn: JWT_EXPIRES_IN });\n\n        resolve(accessToken);\n      } catch (err) {\n        console.error('[Auth Api]: ', err);\n        reject(new Error('Internal server error'));\n      }\n    });\n  }\n\n  me(accessToken) {\n    return new Promise((resolve, reject) => {\n      try {\n        // Decode access token\n        const { userId } = decode(accessToken);\n\n        // Find the user\n        const user = users.find((_user) => _user.id === userId);\n\n        if (!user) {\n          reject(new Error('Invalid authorization token'));\n          return;\n        }\n\n        resolve({\n          id: user.id,\n          avatar: user.avatar,\n          email: user.email,\n          name: user.name\n        });\n      } catch (err) {\n        console.error('[Auth Api]: ', err);\n        reject(new Error('Internal server error'));\n      }\n    });\n  }\n}\n\nexport const authApi = new AuthApi();\n"]},"metadata":{},"sourceType":"module"}
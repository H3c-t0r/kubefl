{"ast":null,"code":"var _jsxFileName = \"/Users/allan.chepkoy/cloud/kubeflow/components/zoradashboard/src/components/order/order-status.js\",\n    _s = $RefreshSig$();\n\nimport { useState } from 'react';\nimport toast from 'react-hot-toast';\nimport PropTypes from 'prop-types';\nimport { format } from 'date-fns';\nimport { Button, Card, CardContent, CardHeader, Divider, Typography } from '@material-ui/core';\nimport { useDialog } from '../../hooks/use-dialog';\nimport { Archive as ArchiveIcon } from '../../icons/archive';\nimport { CheckCircle as CheckCircleIcon } from '../../icons/check-circle';\nimport { Duplicate as DuplicateIcon } from '../../icons/duplicate';\nimport { ReceiptRefund as ReceiptRefundIcon } from '../../icons/receipt-refund';\nimport { ActionList } from '../action-list';\nimport { ActionListItem } from '../action-list-item';\nimport { ConfirmationDialog } from '../confirmation-dialog';\nimport { StatusSelect } from '../status-select';\nimport { OrderTimeline } from './order-timeline';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst statusOptions = [{\n  color: 'info.main',\n  label: 'Placed',\n  value: 'placed'\n}, {\n  color: 'error.main',\n  label: 'Processed',\n  value: 'processed'\n}, {\n  color: 'warning.main',\n  label: 'Delivered',\n  value: 'delivered'\n}, {\n  color: 'success.main',\n  label: 'Complete',\n  value: 'complete'\n}];\nexport const OrderStatus = props => {\n  _s();\n\n  const {\n    order,\n    ...other\n  } = props;\n  const [markDialogOpen, handleOpenMarkDialog, handleCloseMarkDialog] = useDialog();\n  const [duplicateDialogOpen, handleOpenDuplicateDialog, handleCloseDuplicateDialog] = useDialog();\n  const [archiveDialogOpen, handleOpenArchiveDialog, handleCloseArchiveDialog] = useDialog();\n  const [status, setStatus] = useState((order === null || order === void 0 ? void 0 : order.status) || '');\n  const [newStatus, setNewStatus] = useState((order === null || order === void 0 ? void 0 : order.status) || '');\n\n  const handleStatusChange = event => {\n    setNewStatus(event.target.value);\n  };\n\n  const handleSaveChanges = () => {\n    setStatus(newStatus);\n    toast.success('Changes saved');\n  };\n\n  const handleMark = () => {\n    handleCloseMarkDialog();\n    toast.error('This action is not available on demo');\n  };\n\n  const handleDuplicate = () => {\n    handleCloseDuplicateDialog();\n    toast.error('This action is not available on demo');\n  };\n\n  const handleArchive = () => {\n    handleCloseArchiveDialog();\n    toast.error('This action is not available on demo');\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Card, {\n      variant: \"outlined\",\n      ...other,\n      children: [/*#__PURE__*/_jsxDEV(CardHeader, {\n        title: \"Order Status\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Divider, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(CardContent, {\n        children: [/*#__PURE__*/_jsxDEV(StatusSelect, {\n          onChange: handleStatusChange,\n          options: statusOptions,\n          value: newStatus\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          color: \"primary\",\n          onClick: handleSaveChanges,\n          sx: {\n            my: 2\n          },\n          variant: \"contained\",\n          children: \"Save Changes\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Typography, {\n          sx: {\n            color: 'text.secondary',\n            display: 'block'\n          },\n          variant: \"caption\",\n          children: `Updated ${format(new Date(order.updatedAt), 'dd/MM/yyyy HH:mm')}`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Divider, {\n          sx: {\n            my: 2\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 103,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(OrderTimeline, {\n          status: status\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 104,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Divider, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(ActionList, {\n        children: [/*#__PURE__*/_jsxDEV(ActionListItem, {\n          icon: CheckCircleIcon,\n          label: \"Mark as Paid\",\n          onClick: handleOpenMarkDialog\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 108,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(ActionListItem, {\n          icon: DuplicateIcon,\n          label: \"Duplicate Order\",\n          onClick: handleOpenDuplicateDialog\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 113,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(ActionListItem, {\n          disabled: true,\n          icon: ReceiptRefundIcon,\n          label: \"Request a Refund\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 118,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(ActionListItem, {\n          icon: ArchiveIcon,\n          label: \"Archive Order\",\n          onClick: handleOpenArchiveDialog\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 123,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ConfirmationDialog, {\n      message: \"Are you sure you want to mark this order as paid? This can't be undone.\",\n      onCancel: handleCloseMarkDialog,\n      onConfirm: handleMark,\n      open: markDialogOpen,\n      title: \"Mark Order as paid\",\n      variant: \"info\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ConfirmationDialog, {\n      message: \"Are you sure you want to duplicate this order? This can't be undone.\",\n      onCancel: handleCloseDuplicateDialog,\n      onConfirm: handleDuplicate,\n      open: duplicateDialogOpen,\n      title: \"Duplicate Order\",\n      variant: \"warning\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ConfirmationDialog, {\n      message: \"Are you sure you want to archive this order? This can't be undone.\",\n      onCancel: handleCloseArchiveDialog,\n      onConfirm: handleArchive,\n      open: archiveDialogOpen,\n      title: \"Archive Order\",\n      variant: \"error\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 146,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n\n_s(OrderStatus, \"nvJb2s+JSOGVit2Cte9zkjh9QOQ=\", false, function () {\n  return [useDialog, useDialog, useDialog];\n});\n\n_c = OrderStatus;\nOrderStatus.propTypes = {\n  order: PropTypes.object\n};\n\nvar _c;\n\n$RefreshReg$(_c, \"OrderStatus\");","map":{"version":3,"sources":["/Users/allan.chepkoy/cloud/kubeflow/components/zoradashboard/src/components/order/order-status.js"],"names":["useState","toast","PropTypes","format","Button","Card","CardContent","CardHeader","Divider","Typography","useDialog","Archive","ArchiveIcon","CheckCircle","CheckCircleIcon","Duplicate","DuplicateIcon","ReceiptRefund","ReceiptRefundIcon","ActionList","ActionListItem","ConfirmationDialog","StatusSelect","OrderTimeline","statusOptions","color","label","value","OrderStatus","props","order","other","markDialogOpen","handleOpenMarkDialog","handleCloseMarkDialog","duplicateDialogOpen","handleOpenDuplicateDialog","handleCloseDuplicateDialog","archiveDialogOpen","handleOpenArchiveDialog","handleCloseArchiveDialog","status","setStatus","newStatus","setNewStatus","handleStatusChange","event","target","handleSaveChanges","success","handleMark","error","handleDuplicate","handleArchive","my","display","Date","updatedAt","propTypes","object"],"mappings":"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","sourcesContent":["import { useState } from 'react';\nimport toast from 'react-hot-toast';\nimport PropTypes from 'prop-types';\nimport { format } from 'date-fns';\nimport { Button, Card, CardContent, CardHeader, Divider, Typography } from '@material-ui/core';\nimport { useDialog } from '../../hooks/use-dialog';\nimport { Archive as ArchiveIcon } from '../../icons/archive';\nimport { CheckCircle as CheckCircleIcon } from '../../icons/check-circle';\nimport { Duplicate as DuplicateIcon } from '../../icons/duplicate';\nimport { ReceiptRefund as ReceiptRefundIcon } from '../../icons/receipt-refund';\nimport { ActionList } from '../action-list';\nimport { ActionListItem } from '../action-list-item';\nimport { ConfirmationDialog } from '../confirmation-dialog';\nimport { StatusSelect } from '../status-select';\nimport { OrderTimeline } from './order-timeline';\n\nconst statusOptions = [\n  {\n    color: 'info.main',\n    label: 'Placed',\n    value: 'placed'\n  },\n  {\n    color: 'error.main',\n    label: 'Processed',\n    value: 'processed'\n  },\n  {\n    color: 'warning.main',\n    label: 'Delivered',\n    value: 'delivered'\n  },\n  {\n    color: 'success.main',\n    label: 'Complete',\n    value: 'complete'\n  }\n];\n\nexport const OrderStatus = (props) => {\n  const { order, ...other } = props;\n  const [markDialogOpen, handleOpenMarkDialog, handleCloseMarkDialog] = useDialog();\n  const [duplicateDialogOpen, handleOpenDuplicateDialog, handleCloseDuplicateDialog] = useDialog();\n  const [archiveDialogOpen, handleOpenArchiveDialog, handleCloseArchiveDialog] = useDialog();\n  const [status, setStatus] = useState(order?.status || '');\n  const [newStatus, setNewStatus] = useState(order?.status || '');\n\n  const handleStatusChange = (event) => {\n    setNewStatus(event.target.value);\n  };\n\n  const handleSaveChanges = () => {\n    setStatus(newStatus);\n    toast.success('Changes saved');\n  };\n\n  const handleMark = () => {\n    handleCloseMarkDialog();\n    toast.error('This action is not available on demo');\n  };\n\n  const handleDuplicate = () => {\n    handleCloseDuplicateDialog();\n    toast.error('This action is not available on demo');\n  };\n\n  const handleArchive = () => {\n    handleCloseArchiveDialog();\n    toast.error('This action is not available on demo');\n  };\n\n  return (\n    <>\n      <Card\n        variant=\"outlined\"\n        {...other}\n      >\n        <CardHeader title=\"Order Status\" />\n        <Divider />\n        <CardContent>\n          <StatusSelect\n            onChange={handleStatusChange}\n            options={statusOptions}\n            value={newStatus}\n          />\n          <Button\n            color=\"primary\"\n            onClick={handleSaveChanges}\n            sx={{ my: 2 }}\n            variant=\"contained\"\n          >\n            Save Changes\n          </Button>\n          <Typography\n            sx={{\n              color: 'text.secondary',\n              display: 'block'\n            }}\n            variant=\"caption\"\n          >\n            {`Updated ${format(new Date(order.updatedAt), 'dd/MM/yyyy HH:mm')}`}\n          </Typography>\n          <Divider sx={{ my: 2 }} />\n          <OrderTimeline status={status} />\n        </CardContent>\n        <Divider />\n        <ActionList>\n          <ActionListItem\n            icon={CheckCircleIcon}\n            label=\"Mark as Paid\"\n            onClick={handleOpenMarkDialog}\n          />\n          <ActionListItem\n            icon={DuplicateIcon}\n            label=\"Duplicate Order\"\n            onClick={handleOpenDuplicateDialog}\n          />\n          <ActionListItem\n            disabled\n            icon={ReceiptRefundIcon}\n            label=\"Request a Refund\"\n          />\n          <ActionListItem\n            icon={ArchiveIcon}\n            label=\"Archive Order\"\n            onClick={handleOpenArchiveDialog}\n          />\n        </ActionList>\n      </Card>\n      <ConfirmationDialog\n        message=\"Are you sure you want to mark this order as paid? This can't be undone.\"\n        onCancel={handleCloseMarkDialog}\n        onConfirm={handleMark}\n        open={markDialogOpen}\n        title=\"Mark Order as paid\"\n        variant=\"info\"\n      />\n      <ConfirmationDialog\n        message=\"Are you sure you want to duplicate this order? This can't be undone.\"\n        onCancel={handleCloseDuplicateDialog}\n        onConfirm={handleDuplicate}\n        open={duplicateDialogOpen}\n        title=\"Duplicate Order\"\n        variant=\"warning\"\n      />\n      <ConfirmationDialog\n        message=\"Are you sure you want to archive this order? This can't be undone.\"\n        onCancel={handleCloseArchiveDialog}\n        onConfirm={handleArchive}\n        open={archiveDialogOpen}\n        title=\"Archive Order\"\n        variant=\"error\"\n      />\n    </>\n  );\n};\n\nOrderStatus.propTypes = {\n  order: PropTypes.object\n};\n"]},"metadata":{},"sourceType":"module"}
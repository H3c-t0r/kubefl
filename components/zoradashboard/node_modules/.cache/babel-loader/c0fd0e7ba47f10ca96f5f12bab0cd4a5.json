{"ast":null,"code":"const equal = (value1, value2) => {\n  if (!value2) {\n    return true;\n  }\n\n  if (value1) {\n    // Here we evaluate == instead of === because values can be number & string pair\n    // eslint-disable-next-line eqeqeq\n    return value1 == value2;\n  }\n\n  return false;\n};\n\nconst greaterThan = (value1, value2) => value1 > value2;\n\nconst lessThan = (value1, value2) => value1 < value2;\n\nconst isAfter = (value1, value2) => {\n  if (value1 && value2) {\n    return value1.getTime() > new Date(value2).getTime();\n  }\n\n  return false;\n};\n\nconst isBefore = (value1, value2) => {\n  if (value1 && value2) {\n    return value1.getTime() < new Date(value2).getTime();\n  }\n\n  return false;\n};\n\nconst isBlank = value => !value;\n\nconst isPresent = value => !!value;\n\nconst notEqual = (value1, value2) => {\n  if (!value2) {\n    return true;\n  }\n\n  if (value1) {\n    return value1 !== value2;\n  }\n\n  return false;\n};\n\nconst contains = (value1, value2) => {\n  if (!value2) {\n    return true;\n  }\n\n  if (value1) {\n    return value1.toLowerCase().includes(value2.toLowerCase());\n  }\n\n  return false;\n};\n\nconst notContains = (value1, value2) => {\n  if (!value2) {\n    return true;\n  }\n\n  if (value1) {\n    return !value1.includes(value2);\n  }\n\n  return false;\n};\n\nconst startsWith = (value1, value2) => {\n  if (!value2) {\n    return true;\n  }\n\n  if (value1) {\n    return value1.substring(0, value2.length) === value2;\n  }\n\n  return false;\n};\n\nconst endsWith = (value1, value2) => {\n  if (!value2) {\n    return true;\n  }\n\n  if (value1) {\n    return value1.substring(value1.length - value2.length) === value2;\n  }\n\n  return false;\n};\n\nexport const applyFilters = (rows, filters) => rows.filter(row => {\n  if (!filters || filters.length === 0) {\n    return rows;\n  }\n\n  let isAccepted = true;\n\n  for (let index = 0; index < filters.length; index++) {\n    switch (filters[index].operator) {\n      case 'equal':\n        isAccepted = equal(row[filters[index].property], filters[index].value);\n        break;\n\n      case 'greaterThan':\n        isAccepted = greaterThan(row[filters[index].property], filters[index].value);\n        break;\n\n      case 'lessThan':\n        isAccepted = lessThan(row[filters[index].property], filters[index].value);\n        break;\n\n      case 'isAfter':\n        isAccepted = isAfter(row[filters[index].property], filters[index].value);\n        break;\n\n      case 'isBefore':\n        isAccepted = isBefore(row[filters[index].property], filters[index].value);\n        break;\n\n      case 'isBlank':\n        isAccepted = isBlank(row[filters[index].property]);\n        break;\n\n      case 'isPresent':\n        isAccepted = isPresent(row[filters[index].property]);\n        break;\n\n      case 'notEqual':\n        isAccepted = notEqual(row[filters[index].property], filters[index].value);\n        break;\n\n      case 'contains':\n        isAccepted = contains(row[filters[index].property], filters[index].value);\n        break;\n\n      case 'notContains':\n        isAccepted = notContains(row[filters[index].property], filters[index].value);\n        break;\n\n      case 'startsWith':\n        isAccepted = startsWith(row[filters[index].property], filters[index].value);\n        break;\n\n      case 'endsWith':\n        isAccepted = endsWith(row[filters[index].property], filters[index].value);\n        break;\n\n      default:\n        break;\n    }\n\n    if (!isAccepted) {\n      break;\n    }\n  }\n\n  return isAccepted;\n});","map":{"version":3,"sources":["/Users/allan.chepkoy/cloud/kubeflow/components/zoradashboard/src/utils/apply-filters.js"],"names":["equal","value1","value2","greaterThan","lessThan","isAfter","getTime","Date","isBefore","isBlank","value","isPresent","notEqual","contains","toLowerCase","includes","notContains","startsWith","substring","length","endsWith","applyFilters","rows","filters","filter","row","isAccepted","index","operator","property"],"mappings":"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","sourcesContent":["const equal = (value1, value2) => {\n  if (!value2) {\n    return true;\n  }\n\n  if (value1) {\n    // Here we evaluate == instead of === because values can be number & string pair\n    // eslint-disable-next-line eqeqeq\n    return value1 == value2;\n  }\n\n  return false;\n};\n\nconst greaterThan = (value1, value2) => value1 > value2;\n\nconst lessThan = (value1, value2) => value1 < value2;\n\nconst isAfter = (value1, value2) => {\n  if (value1 && value2) {\n    return value1.getTime() > new Date(value2).getTime();\n  }\n\n  return false;\n};\n\nconst isBefore = (value1, value2) => {\n  if (value1 && value2) {\n    return value1.getTime() < new Date(value2).getTime();\n  }\n\n  return false;\n};\n\nconst isBlank = (value) => !value;\n\nconst isPresent = (value) => !!value;\n\nconst notEqual = (value1, value2) => {\n  if (!value2) {\n    return true;\n  }\n\n  if (value1) {\n    return value1 !== value2;\n  }\n\n  return false;\n};\n\nconst contains = (value1, value2) => {\n  if (!value2) {\n    return true;\n  }\n\n  if (value1) {\n    return value1.toLowerCase().includes(value2.toLowerCase());\n  }\n\n  return false;\n};\n\nconst notContains = (value1, value2) => {\n  if (!value2) {\n    return true;\n  }\n\n  if (value1) {\n    return !value1.includes(value2);\n  }\n\n  return false;\n};\n\nconst startsWith = (value1, value2) => {\n  if (!value2) {\n    return true;\n  }\n\n  if (value1) {\n    return value1.substring(0, value2.length) === value2;\n  }\n\n  return false;\n};\n\nconst endsWith = (value1, value2) => {\n  if (!value2) {\n    return true;\n  }\n\n  if (value1) {\n    return value1.substring(value1.length - value2.length) === value2;\n  }\n\n  return false;\n};\n\nexport const applyFilters = (rows, filters) => rows.filter((row) => {\n  if (!filters || filters.length === 0) {\n    return rows;\n  }\n\n  let isAccepted = true;\n\n  for (let index = 0; index < filters.length; index++) {\n    switch (filters[index].operator) {\n      case 'equal':\n        isAccepted = equal(row[filters[index].property], filters[index].value);\n        break;\n\n      case 'greaterThan':\n        isAccepted = greaterThan(row[filters[index].property], filters[index].value);\n        break;\n\n      case 'lessThan':\n        isAccepted = lessThan(row[filters[index].property], filters[index].value);\n        break;\n\n      case 'isAfter':\n        isAccepted = isAfter(row[filters[index].property], filters[index].value);\n        break;\n\n      case 'isBefore':\n        isAccepted = isBefore(row[filters[index].property], filters[index].value);\n        break;\n\n      case 'isBlank':\n        isAccepted = isBlank(row[filters[index].property]);\n        break;\n\n      case 'isPresent':\n        isAccepted = isPresent(row[filters[index].property]);\n        break;\n\n      case 'notEqual':\n        isAccepted = notEqual(row[filters[index].property], filters[index].value);\n        break;\n\n      case 'contains':\n        isAccepted = contains(row[filters[index].property], filters[index].value);\n        break;\n\n      case 'notContains':\n        isAccepted = notContains(row[filters[index].property], filters[index].value);\n        break;\n\n      case 'startsWith':\n        isAccepted = startsWith(row[filters[index].property], filters[index].value);\n        break;\n\n      case 'endsWith':\n        isAccepted = endsWith(row[filters[index].property], filters[index].value);\n        break;\n\n      default:\n        break;\n    }\n\n    if (!isAccepted) {\n      break;\n    }\n  }\n\n  return isAccepted;\n});\n"]},"metadata":{},"sourceType":"module"}
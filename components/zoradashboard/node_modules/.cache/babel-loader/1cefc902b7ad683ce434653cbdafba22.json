{"ast":null,"code":"var _jsxFileName = \"/Users/allan.chepkoy/cloud/kubeflow/components/zoradashboard/src/containers/customers.js\",\n    _s = $RefreshSig$();\n\nimport { useCallback, useEffect, useState } from 'react';\nimport { Helmet } from 'react-helmet-async';\nimport { Box, Button, Card, Container, Divider, Typography } from '@material-ui/core';\nimport { customerApi } from '../api/customer';\nimport { CustomerDialog } from '../components/customer/customer-dialog';\nimport { CustomersFilter } from '../components/customer/customers-filter';\nimport { CustomersTable } from '../components/customer/customers-table';\nimport { useMounted } from '../hooks/use-mounted';\nimport { useSelection } from '../hooks/use-selection';\nimport { Plus as PlusIcon } from '../icons/plus';\nimport gtm from '../lib/gtm';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport const Customers = () => {\n  _s();\n\n  var _customersState$data, _customersState$data2, _customersState$data3;\n\n  const mounted = useMounted();\n  const [controller, setController] = useState({\n    filters: [],\n    page: 0,\n    query: '',\n    sort: 'desc',\n    sortBy: 'createdAt',\n    view: 'all'\n  });\n  const [customersState, setCustomersState] = useState({\n    isLoading: true\n  });\n  const [selectedCustomers, handleSelect, handleSelectAll] = useSelection((_customersState$data = customersState.data) === null || _customersState$data === void 0 ? void 0 : _customersState$data.customers);\n  const [openCreateDialog, setOpenCreateDialog] = useState(false);\n  const getCustomers = useCallback(async () => {\n    setCustomersState(() => ({\n      isLoading: true\n    }));\n\n    try {\n      const result = await customerApi.getCustomers({\n        filters: controller.filters,\n        page: controller.page,\n        query: controller.query,\n        sort: controller.sort,\n        sortBy: controller.sortBy,\n        view: controller.view\n      });\n\n      if (mounted.current) {\n        setCustomersState(() => ({\n          isLoading: false,\n          data: result\n        }));\n      }\n    } catch (err) {\n      console.error(err);\n\n      if (mounted.current) {\n        setCustomersState(() => ({\n          isLoading: false,\n          error: err.message\n        }));\n      }\n    }\n  }, [controller]);\n  useEffect(() => {\n    getCustomers().catch(console.error);\n  }, [controller]);\n  useEffect(() => {\n    gtm.push({\n      event: 'page_view'\n    });\n  }, []);\n\n  const handleViewChange = newView => {\n    setController({ ...controller,\n      page: 0,\n      view: newView\n    });\n  };\n\n  const handleQueryChange = newQuery => {\n    setController({ ...controller,\n      page: 0,\n      query: newQuery\n    });\n  };\n\n  const handleFiltersApply = newFilters => {\n    const parsedFilters = newFilters.map(filter => ({\n      property: filter.property.name,\n      value: filter.value,\n      operator: filter.operator.value\n    }));\n    setController({ ...controller,\n      page: 0,\n      filters: parsedFilters\n    });\n  };\n\n  const handleFiltersClear = () => {\n    setController({ ...controller,\n      page: 0,\n      filters: []\n    });\n  };\n\n  const handlePageChange = newPage => {\n    setController({ ...controller,\n      page: newPage - 1\n    });\n  };\n\n  const handleSortChange = (event, property) => {\n    const isAsc = controller.sortBy === property && controller.sort === 'asc';\n    setController({ ...controller,\n      page: 0,\n      sort: isAsc ? 'desc' : 'asc',\n      sortBy: property\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Helmet, {\n      children: /*#__PURE__*/_jsxDEV(\"title\", {\n        children: \"Customer: List | Carpatin Dashboard\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Box, {\n      sx: {\n        backgroundColor: 'background.default',\n        flexGrow: 1\n      },\n      children: /*#__PURE__*/_jsxDEV(Container, {\n        maxWidth: \"lg\",\n        sx: {\n          display: 'flex',\n          flexDirection: 'column',\n          height: '100%'\n        },\n        children: [/*#__PURE__*/_jsxDEV(Box, {\n          sx: {\n            py: 4\n          },\n          children: /*#__PURE__*/_jsxDEV(Box, {\n            sx: {\n              alignItems: 'center',\n              display: 'flex'\n            },\n            children: [/*#__PURE__*/_jsxDEV(Typography, {\n              color: \"textPrimary\",\n              variant: \"h4\",\n              children: \"Customers\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 152,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Box, {\n              sx: {\n                flexGrow: 1\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 158,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Button, {\n              color: \"primary\",\n              onClick: () => setOpenCreateDialog(true),\n              size: \"large\",\n              startIcon: /*#__PURE__*/_jsxDEV(PlusIcon, {\n                fontSize: \"small\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 163,\n                columnNumber: 28\n              }, this),\n              variant: \"contained\",\n              children: \"Add\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 159,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 146,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 145,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Card, {\n          variant: \"outlined\",\n          sx: {\n            display: 'flex',\n            flexDirection: 'column',\n            flexGrow: 1\n          },\n          children: [/*#__PURE__*/_jsxDEV(CustomersFilter, {\n            disabled: customersState.isLoading,\n            filters: controller.filters,\n            onFiltersApply: handleFiltersApply,\n            onFiltersClear: handleFiltersClear,\n            onQueryChange: handleQueryChange,\n            onViewChange: handleViewChange,\n            query: controller.query,\n            selectedCustomers: selectedCustomers,\n            view: controller.view\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 178,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Divider, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 189,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(CustomersTable, {\n            customers: (_customersState$data2 = customersState.data) === null || _customersState$data2 === void 0 ? void 0 : _customersState$data2.customers,\n            customersCount: (_customersState$data3 = customersState.data) === null || _customersState$data3 === void 0 ? void 0 : _customersState$data3.customersCount,\n            error: customersState.error,\n            isLoading: customersState.isLoading,\n            onPageChange: handlePageChange,\n            onSelect: handleSelect,\n            onSelectAll: handleSelectAll,\n            onSortChange: handleSortChange,\n            page: controller.page + 1,\n            selectedCustomers: selectedCustomers,\n            sort: controller.sort,\n            sortBy: controller.sortBy\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 190,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 170,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 137,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(CustomerDialog, {\n      onClose: () => setOpenCreateDialog(false),\n      open: openCreateDialog\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 207,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n\n_s(Customers, \"vjDN7zGxm0JuIudbLhPsrrV/1GM=\", false, function () {\n  return [useMounted, useSelection];\n});\n\n_c = Customers;\n\nvar _c;\n\n$RefreshReg$(_c, \"Customers\");","map":{"version":3,"sources":["/Users/allan.chepkoy/cloud/kubeflow/components/zoradashboard/src/containers/customers.js"],"names":["useCallback","useEffect","useState","Helmet","Box","Button","Card","Container","Divider","Typography","customerApi","CustomerDialog","CustomersFilter","CustomersTable","useMounted","useSelection","Plus","PlusIcon","gtm","Customers","mounted","controller","setController","filters","page","query","sort","sortBy","view","customersState","setCustomersState","isLoading","selectedCustomers","handleSelect","handleSelectAll","data","customers","openCreateDialog","setOpenCreateDialog","getCustomers","result","current","err","console","error","message","catch","push","event","handleViewChange","newView","handleQueryChange","newQuery","handleFiltersApply","newFilters","parsedFilters","map","filter","property","name","value","operator","handleFiltersClear","handlePageChange","newPage","handleSortChange","isAsc","backgroundColor","flexGrow","display","flexDirection","height","py","alignItems","customersCount"],"mappings":"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","sourcesContent":["import { useCallback, useEffect, useState } from 'react';\nimport { Helmet } from 'react-helmet-async';\nimport { Box, Button, Card, Container, Divider, Typography } from '@material-ui/core';\nimport { customerApi } from '../api/customer';\nimport { CustomerDialog } from '../components/customer/customer-dialog';\nimport { CustomersFilter } from '../components/customer/customers-filter';\nimport { CustomersTable } from '../components/customer/customers-table';\nimport { useMounted } from '../hooks/use-mounted';\nimport { useSelection } from '../hooks/use-selection';\nimport { Plus as PlusIcon } from '../icons/plus';\nimport gtm from '../lib/gtm';\n\nexport const Customers = () => {\n  const mounted = useMounted();\n  const [controller, setController] = useState({\n    filters: [],\n    page: 0,\n    query: '',\n    sort: 'desc',\n    sortBy: 'createdAt',\n    view: 'all'\n  });\n  const [customersState, setCustomersState] = useState({ isLoading: true });\n  const [\n    selectedCustomers,\n    handleSelect,\n    handleSelectAll\n  ] = useSelection(customersState.data?.customers);\n  const [openCreateDialog, setOpenCreateDialog] = useState(false);\n\n  const getCustomers = useCallback(async () => {\n    setCustomersState(() => ({ isLoading: true }));\n\n    try {\n      const result = await customerApi.getCustomers({\n        filters: controller.filters,\n        page: controller.page,\n        query: controller.query,\n        sort: controller.sort,\n        sortBy: controller.sortBy,\n        view: controller.view\n      });\n\n      if (mounted.current) {\n        setCustomersState(() => ({\n          isLoading: false,\n          data: result\n        }));\n      }\n    } catch (err) {\n      console.error(err);\n\n      if (mounted.current) {\n        setCustomersState(() => ({\n          isLoading: false,\n          error: err.message\n        }));\n      }\n    }\n  }, [controller]);\n\n  useEffect(() => {\n    getCustomers().catch(console.error);\n  }, [controller]);\n\n  useEffect(() => {\n    gtm.push({ event: 'page_view' });\n  }, []);\n\n  const handleViewChange = (newView) => {\n    setController({\n      ...controller,\n      page: 0,\n      view: newView\n    });\n  };\n\n  const handleQueryChange = (newQuery) => {\n    setController({\n      ...controller,\n      page: 0,\n      query: newQuery\n    });\n  };\n\n  const handleFiltersApply = (newFilters) => {\n    const parsedFilters = newFilters.map((filter) => ({\n      property: filter.property.name,\n      value: filter.value,\n      operator: filter.operator.value\n    }));\n\n    setController({\n      ...controller,\n      page: 0,\n      filters: parsedFilters\n    });\n  };\n\n  const handleFiltersClear = () => {\n    setController({\n      ...controller,\n      page: 0,\n      filters: []\n    });\n  };\n\n  const handlePageChange = (newPage) => {\n    setController({\n      ...controller,\n      page: newPage - 1\n    });\n  };\n\n  const handleSortChange = (event, property) => {\n    const isAsc = controller.sortBy === property && controller.sort === 'asc';\n\n    setController({\n      ...controller,\n      page: 0,\n      sort: isAsc ? 'desc' : 'asc',\n      sortBy: property\n    });\n  };\n\n  return (\n    <>\n      <Helmet>\n        <title>Customer: List | Carpatin Dashboard</title>\n      </Helmet>\n      <Box\n        sx={{\n          backgroundColor: 'background.default',\n          flexGrow: 1\n        }}\n      >\n        <Container\n          maxWidth=\"lg\"\n          sx={{\n            display: 'flex',\n            flexDirection: 'column',\n            height: '100%'\n          }}\n        >\n          <Box sx={{ py: 4 }}>\n            <Box\n              sx={{\n                alignItems: 'center',\n                display: 'flex'\n              }}\n            >\n              <Typography\n                color=\"textPrimary\"\n                variant=\"h4\"\n              >\n                Customers\n              </Typography>\n              <Box sx={{ flexGrow: 1 }} />\n              <Button\n                color=\"primary\"\n                onClick={() => setOpenCreateDialog(true)}\n                size=\"large\"\n                startIcon={<PlusIcon fontSize=\"small\" />}\n                variant=\"contained\"\n              >\n                Add\n              </Button>\n            </Box>\n          </Box>\n          <Card\n            variant=\"outlined\"\n            sx={{\n              display: 'flex',\n              flexDirection: 'column',\n              flexGrow: 1\n            }}\n          >\n            <CustomersFilter\n              disabled={customersState.isLoading}\n              filters={controller.filters}\n              onFiltersApply={handleFiltersApply}\n              onFiltersClear={handleFiltersClear}\n              onQueryChange={handleQueryChange}\n              onViewChange={handleViewChange}\n              query={controller.query}\n              selectedCustomers={selectedCustomers}\n              view={controller.view}\n            />\n            <Divider />\n            <CustomersTable\n              customers={customersState.data?.customers}\n              customersCount={customersState.data?.customersCount}\n              error={customersState.error}\n              isLoading={customersState.isLoading}\n              onPageChange={handlePageChange}\n              onSelect={handleSelect}\n              onSelectAll={handleSelectAll}\n              onSortChange={handleSortChange}\n              page={controller.page + 1}\n              selectedCustomers={selectedCustomers}\n              sort={controller.sort}\n              sortBy={controller.sortBy}\n            />\n          </Card>\n        </Container>\n      </Box>\n      <CustomerDialog\n        onClose={() => setOpenCreateDialog(false)}\n        open={openCreateDialog}\n      />\n    </>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"var _jsxFileName = \"/Users/allan.chepkoy/cloud/kubeflow/components/zoradashboard/src/components/organization/organization-billing-plan.js\",\n    _s = $RefreshSig$();\n\nimport { Fragment, useState } from 'react';\nimport toast from 'react-hot-toast';\nimport { useFormik } from 'formik';\nimport * as Yup from 'yup';\nimport numeral from 'numeral';\nimport { Box, Button, Card, CardActions, CardHeader, Divider, FormControlLabel, FormHelperText, Radio, RadioGroup, ToggleButton, ToggleButtonGroup, Typography } from '@material-ui/core';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst planOptions = [{\n  id: '1',\n  description: 'Up to 2 team members',\n  label: 'Free',\n  priceOptions: [{\n    chargeType: 'monthly',\n    amount: 0\n  }, {\n    chargeType: 'yearly',\n    amount: 0\n  }],\n  value: 'free'\n}, {\n  id: '2',\n  description: 'Best for simple projects or applications.',\n  label: 'Essential',\n  priceOptions: [{\n    chargeType: 'monthly',\n    amount: 120\n  }, {\n    chargeType: 'yearly',\n    amount: 1320\n  }],\n  value: 'essential'\n}, {\n  id: '3',\n  description: 'Best for teams and multiple projects that need added security.',\n  label: 'Professional',\n  priceOptions: [{\n    chargeType: 'monthly',\n    amount: 480\n  }, {\n    chargeType: 'yearly',\n    amount: 5280\n  }],\n  value: 'professional'\n}];\nexport const OrganizationBillingPlan = () => {\n  _s();\n\n  const formik = useFormik({\n    initialValues: {\n      plan: 'free',\n      submit: null\n    },\n    validationSchema: Yup.object().shape({\n      plan: Yup.mixed().oneOf(planOptions.map(option => option.value))\n    }),\n    onSubmit: async (values, helpers) => {\n      try {\n        toast.success('Plan updated');\n        helpers.setStatus({\n          success: true\n        });\n        helpers.setSubmitting(false);\n      } catch (err) {\n        console.error(err);\n        helpers.setStatus({\n          success: false\n        });\n        helpers.setErrors({\n          submit: err.message\n        });\n        helpers.setSubmitting(false);\n      }\n    }\n  });\n  const [chargeType, setChargeType] = useState('monthly');\n\n  const handleChargeTypeChange = (event, newMode) => {\n    if (newMode) {\n      setChargeType(newMode);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(Card, {\n    variant: \"outlined\",\n    children: [/*#__PURE__*/_jsxDEV(CardHeader, {\n      title: \"Subscription Plan\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Divider, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Box, {\n      sx: {\n        alignItems: 'center',\n        display: 'flex',\n        px: 3,\n        py: 2\n      },\n      children: [/*#__PURE__*/_jsxDEV(Typography, {\n        color: \"textPrimary\",\n        sx: {\n          mr: 3\n        },\n        variant: \"subtitle2\",\n        children: \"Billing\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(ToggleButtonGroup, {\n        exclusive: true,\n        onChange: handleChargeTypeChange,\n        size: \"small\",\n        value: chargeType,\n        children: [/*#__PURE__*/_jsxDEV(ToggleButton, {\n          value: \"monthly\",\n          children: \"Monthly\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 128,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(ToggleButton, {\n          value: \"yearly\",\n          children: \"Yearly\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 131,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Divider, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(RadioGroup, {\n      name: \"plan\",\n      onBlur: formik.handleBlur,\n      onChange: formik.handleChange,\n      value: formik.values.plan,\n      children: planOptions.map(option => /*#__PURE__*/_jsxDEV(Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(FormControlLabel, {\n          disableTypography: true,\n          control: /*#__PURE__*/_jsxDEV(Radio, {\n            color: \"primary\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 147,\n            columnNumber: 24\n          }, this),\n          label: /*#__PURE__*/_jsxDEV(Box, {\n            sx: {\n              alignItems: 'center',\n              display: 'flex',\n              width: '100%'\n            },\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              children: [/*#__PURE__*/_jsxDEV(Typography, {\n                color: \"textPrimary\",\n                variant: \"body1\",\n                children: option.label\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 157,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(Typography, {\n                color: \"textSecondary\",\n                variant: \"caption\",\n                children: option.description\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 163,\n                columnNumber: 21\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 156,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(Box, {\n              sx: {\n                flexGrow: 1\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 170,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(Typography, {\n              color: \"textPrimary\",\n              variant: \"h5\",\n              children: numeral(option.priceOptions.find(priceOption => priceOption.chargeType === chargeType).amount).format('$0,0')\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 171,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 149,\n            columnNumber: 17\n          }, this),\n          sx: {\n            m: 0,\n            px: 3,\n            py: 1.5\n          },\n          value: option.value\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 145,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Divider, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 189,\n          columnNumber: 13\n        }, this)]\n      }, option.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 144,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 7\n    }, this), formik.touched.plan && formik.errors.plan && /*#__PURE__*/_jsxDEV(FormHelperText, {\n      error: true,\n      children: formik.errors.plan\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 194,\n      columnNumber: 9\n    }, this), formik.errors.submit && /*#__PURE__*/_jsxDEV(FormHelperText, {\n      error: true,\n      sx: {\n        mt: 2\n      },\n      children: formik.errors.submit\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 199,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(CardActions, {\n      children: /*#__PURE__*/_jsxDEV(Button, {\n        color: \"primary\",\n        disabled: formik.isSubmitting,\n        onClick: () => formik.handleSubmit(),\n        variant: \"contained\",\n        children: \"Upgrade Plan\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 207,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 206,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 104,\n    columnNumber: 5\n  }, this);\n};\n\n_s(OrganizationBillingPlan, \"yhyke0x6iras3VKoP5yN2mumL/8=\", false, function () {\n  return [useFormik];\n});\n\n_c = OrganizationBillingPlan;\n\nvar _c;\n\n$RefreshReg$(_c, \"OrganizationBillingPlan\");","map":{"version":3,"sources":["/Users/allan.chepkoy/cloud/kubeflow/components/zoradashboard/src/components/organization/organization-billing-plan.js"],"names":["Fragment","useState","toast","useFormik","Yup","numeral","Box","Button","Card","CardActions","CardHeader","Divider","FormControlLabel","FormHelperText","Radio","RadioGroup","ToggleButton","ToggleButtonGroup","Typography","planOptions","id","description","label","priceOptions","chargeType","amount","value","OrganizationBillingPlan","formik","initialValues","plan","submit","validationSchema","object","shape","mixed","oneOf","map","option","onSubmit","values","helpers","success","setStatus","setSubmitting","err","console","error","setErrors","message","setChargeType","handleChargeTypeChange","event","newMode","alignItems","display","px","py","mr","handleBlur","handleChange","width","flexGrow","find","priceOption","format","m","touched","errors","mt","isSubmitting","handleSubmit"],"mappings":"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","sourcesContent":["import { Fragment, useState } from 'react';\nimport toast from 'react-hot-toast';\nimport { useFormik } from 'formik';\nimport * as Yup from 'yup';\nimport numeral from 'numeral';\nimport {\n  Box,\n  Button,\n  Card,\n  CardActions,\n  CardHeader,\n  Divider,\n  FormControlLabel,\n  FormHelperText,\n  Radio,\n  RadioGroup,\n  ToggleButton,\n  ToggleButtonGroup,\n  Typography\n} from '@material-ui/core';\n\nconst planOptions = [\n  {\n    id: '1',\n    description: 'Up to 2 team members',\n    label: 'Free',\n    priceOptions: [\n      {\n        chargeType: 'monthly',\n        amount: 0\n      },\n      {\n        chargeType: 'yearly',\n        amount: 0\n      }\n    ],\n    value: 'free'\n  },\n  {\n    id: '2',\n    description: 'Best for simple projects or applications.',\n    label: 'Essential',\n    priceOptions: [\n      {\n        chargeType: 'monthly',\n        amount: 120\n      },\n      {\n        chargeType: 'yearly',\n        amount: 1320\n      }\n    ],\n    value: 'essential'\n  },\n  {\n    id: '3',\n    description: 'Best for teams and multiple projects that need added security.',\n    label: 'Professional',\n    priceOptions: [\n      {\n        chargeType: 'monthly',\n        amount: 480\n      },\n      {\n        chargeType: 'yearly',\n        amount: 5280\n      }\n    ],\n    value: 'professional'\n  }\n];\n\nexport const OrganizationBillingPlan = () => {\n  const formik = useFormik({\n    initialValues: {\n      plan: 'free',\n      submit: null\n    },\n    validationSchema: Yup.object().shape({\n      plan: Yup.mixed().oneOf(planOptions.map((option) => option.value))\n    }),\n    onSubmit: async (values, helpers) => {\n      try {\n        toast.success('Plan updated');\n        helpers.setStatus({ success: true });\n        helpers.setSubmitting(false);\n      } catch (err) {\n        console.error(err);\n        helpers.setStatus({ success: false });\n        helpers.setErrors({ submit: err.message });\n        helpers.setSubmitting(false);\n      }\n    }\n  });\n  const [chargeType, setChargeType] = useState('monthly');\n\n  const handleChargeTypeChange = (event, newMode) => {\n    if (newMode) {\n      setChargeType(newMode);\n    }\n  };\n\n  return (\n    <Card variant=\"outlined\">\n      <CardHeader title=\"Subscription Plan\" />\n      <Divider />\n      <Box\n        sx={{\n          alignItems: 'center',\n          display: 'flex',\n          px: 3,\n          py: 2\n        }}\n      >\n        <Typography\n          color=\"textPrimary\"\n          sx={{ mr: 3 }}\n          variant=\"subtitle2\"\n        >\n          Billing\n        </Typography>\n        <ToggleButtonGroup\n          exclusive\n          onChange={handleChargeTypeChange}\n          size=\"small\"\n          value={chargeType}\n        >\n          <ToggleButton value=\"monthly\">\n            Monthly\n          </ToggleButton>\n          <ToggleButton value=\"yearly\">\n            Yearly\n          </ToggleButton>\n        </ToggleButtonGroup>\n      </Box>\n      <Divider />\n      <RadioGroup\n        name=\"plan\"\n        onBlur={formik.handleBlur}\n        onChange={formik.handleChange}\n        value={formik.values.plan}\n      >\n        {planOptions.map((option) => (\n          <Fragment key={option.id}>\n            <FormControlLabel\n              disableTypography\n              control={<Radio color=\"primary\" />}\n              label={(\n                <Box\n                  sx={{\n                    alignItems: 'center',\n                    display: 'flex',\n                    width: '100%'\n                  }}\n                >\n                  <div>\n                    <Typography\n                      color=\"textPrimary\"\n                      variant=\"body1\"\n                    >\n                      {option.label}\n                    </Typography>\n                    <Typography\n                      color=\"textSecondary\"\n                      variant=\"caption\"\n                    >\n                      {option.description}\n                    </Typography>\n                  </div>\n                  <Box sx={{ flexGrow: 1 }} />\n                  <Typography\n                    color=\"textPrimary\"\n                    variant=\"h5\"\n                  >\n                    {numeral(option\n                      .priceOptions\n                      .find((priceOption) => priceOption.chargeType === chargeType)\n                      .amount).format('$0,0')}\n                  </Typography>\n                </Box>\n              )}\n              sx={{\n                m: 0,\n                px: 3,\n                py: 1.5\n              }}\n              value={option.value}\n            />\n            <Divider />\n          </Fragment>\n        ))}\n      </RadioGroup>\n      {formik.touched.plan && formik.errors.plan && (\n        <FormHelperText error>\n          {formik.errors.plan}\n        </FormHelperText>\n      )}\n      {formik.errors.submit && (\n        <FormHelperText\n          error\n          sx={{ mt: 2 }}\n        >\n          {formik.errors.submit}\n        </FormHelperText>\n      )}\n      <CardActions>\n        <Button\n          color=\"primary\"\n          disabled={formik.isSubmitting}\n          onClick={() => formik.handleSubmit()}\n          variant=\"contained\"\n        >\n          Upgrade Plan\n        </Button>\n      </CardActions>\n    </Card>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}
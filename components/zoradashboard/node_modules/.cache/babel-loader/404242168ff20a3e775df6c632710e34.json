{"ast":null,"code":"var _jsxFileName = \"/Users/allan.chepkoy/cloud/kubeflow/components/zoradashboard/src/components/customer/customer-dialog.js\",\n    _s = $RefreshSig$();\n\nimport PropTypes from 'prop-types';\nimport { useFormik } from 'formik';\nimport * as Yup from 'yup';\nimport toast from 'react-hot-toast';\nimport { Button, Dialog, DialogActions, DialogContent, DialogTitle, FormHelperText, Grid, MenuItem } from '@material-ui/core';\nimport { InputField } from '../input-field';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst countryOptions = ['USA', 'Germany', 'Spain', 'Italy'];\nexport const CustomerDialog = props => {\n  _s();\n\n  const {\n    customer,\n    open,\n    onClose,\n    ...other\n  } = props;\n  const formik = useFormik({\n    enableReinitialize: true,\n    initialValues: {\n      address: (customer === null || customer === void 0 ? void 0 : customer.address) || '',\n      email: (customer === null || customer === void 0 ? void 0 : customer.email) || '',\n      fullName: (customer === null || customer === void 0 ? void 0 : customer.fullName) || '',\n      country: (customer === null || customer === void 0 ? void 0 : customer.country) || '',\n      phone: (customer === null || customer === void 0 ? void 0 : customer.phone) || '',\n      submit: null\n    },\n    validationSchema: Yup.object().shape({\n      address: Yup.string().max(255),\n      email: Yup.string().email('Must be a valid email').max(255).required('Email is required'),\n      fullName: Yup.string().max(255).required('Full name is required'),\n      country: Yup.string().oneOf(countryOptions),\n      phone: Yup.string().max(255)\n    }),\n    onSubmit: async (values, helpers) => {\n      try {\n        toast.success(`Customer ${customer ? 'updated' : 'created'}`);\n        helpers.resetForm();\n        helpers.setStatus({\n          success: true\n        });\n        helpers.setSubmitting(false);\n      } catch (err) {\n        console.error(err);\n        helpers.setStatus({\n          success: false\n        });\n        helpers.setErrors({\n          submit: err.message\n        });\n        helpers.setSubmitting(false);\n      }\n    }\n  });\n  return /*#__PURE__*/_jsxDEV(Dialog, {\n    onClose: onClose,\n    open: open,\n    TransitionProps: {\n      onExited: () => formik.resetForm()\n    },\n    ...other,\n    children: [/*#__PURE__*/_jsxDEV(DialogTitle, {\n      children: customer ? 'Update Customer' : 'Create Customer'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(DialogContent, {\n      children: /*#__PURE__*/_jsxDEV(Grid, {\n        container: true,\n        spacing: 2,\n        children: [/*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          xs: 12,\n          children: /*#__PURE__*/_jsxDEV(InputField, {\n            error: Boolean(formik.touched.email && formik.errors.email),\n            fullWidth: true,\n            helperText: formik.touched.email && formik.errors.email,\n            label: \"Email address\",\n            name: \"email\",\n            onBlur: formik.handleBlur,\n            onChange: formik.handleChange,\n            required: true,\n            type: \"email\",\n            value: formik.values.email\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 74,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          xs: 12,\n          children: /*#__PURE__*/_jsxDEV(InputField, {\n            error: Boolean(formik.touched.fullName && formik.errors.fullName),\n            fullWidth: true,\n            helperText: formik.touched.fullName && formik.errors.fullName,\n            label: \"Full Name\",\n            name: \"fullName\",\n            onBlur: formik.handleBlur,\n            onChange: formik.handleChange,\n            required: true,\n            value: formik.values.fullName\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 91,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          xs: 12,\n          children: /*#__PURE__*/_jsxDEV(InputField, {\n            error: Boolean(formik.touched.phone && formik.errors.phone),\n            fullWidth: true,\n            helperText: formik.touched.phone && formik.errors.phone,\n            label: \"Phone number\",\n            name: \"phone\",\n            onBlur: formik.handleBlur,\n            onChange: formik.handleChange,\n            value: formik.values.phone\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 107,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 103,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          xs: 12,\n          children: /*#__PURE__*/_jsxDEV(InputField, {\n            error: Boolean(formik.touched.country && formik.errors.country),\n            fullWidth: true,\n            helperText: formik.touched.country && formik.errors.country,\n            label: \"Location\",\n            name: \"country\",\n            onBlur: formik.handleBlur,\n            onChange: formik.handleChange,\n            select: true,\n            value: formik.values.country,\n            children: countryOptions.map(option => /*#__PURE__*/_jsxDEV(MenuItem, {\n              value: option,\n              children: option\n            }, option, false, {\n              fileName: _jsxFileName,\n              lineNumber: 134,\n              columnNumber: 17\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 122,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 118,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          xs: 12,\n          children: /*#__PURE__*/_jsxDEV(InputField, {\n            error: Boolean(formik.touched.address && formik.errors.address),\n            fullWidth: true,\n            helperText: formik.touched.address && formik.errors.address,\n            label: \"Full address\",\n            name: \"address\",\n            onBlur: formik.handleBlur,\n            onChange: formik.handleChange,\n            value: formik.values.address\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 147,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 143,\n          columnNumber: 11\n        }, this), formik.errors.submit && /*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          xs: 12,\n          children: /*#__PURE__*/_jsxDEV(FormHelperText, {\n            error: true,\n            children: formik.errors.submit\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 163,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 159,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(DialogActions, {\n      children: [/*#__PURE__*/_jsxDEV(Button, {\n        color: \"primary\",\n        onClick: onClose,\n        variant: \"outlined\",\n        children: \"Cancel\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 171,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        color: \"primary\",\n        disabled: formik.isSubmitting,\n        onClick: () => {\n          formik.handleSubmit();\n        },\n        variant: \"contained\",\n        children: customer ? 'Update' : 'Create'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 178,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 170,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 54,\n    columnNumber: 5\n  }, this);\n};\n\n_s(CustomerDialog, \"B/4rI4IXClQ7sG7psKj+pOuRe5Q=\", false, function () {\n  return [useFormik];\n});\n\n_c = CustomerDialog;\nCustomerDialog.defaultProps = {\n  open: false\n};\nCustomerDialog.propTypes = {\n  customer: PropTypes.object,\n  open: PropTypes.bool,\n  onClose: PropTypes.func\n};\n\nvar _c;\n\n$RefreshReg$(_c, \"CustomerDialog\");","map":{"version":3,"sources":["/Users/allan.chepkoy/cloud/kubeflow/components/zoradashboard/src/components/customer/customer-dialog.js"],"names":["PropTypes","useFormik","Yup","toast","Button","Dialog","DialogActions","DialogContent","DialogTitle","FormHelperText","Grid","MenuItem","InputField","countryOptions","CustomerDialog","props","customer","open","onClose","other","formik","enableReinitialize","initialValues","address","email","fullName","country","phone","submit","validationSchema","object","shape","string","max","required","oneOf","onSubmit","values","helpers","success","resetForm","setStatus","setSubmitting","err","console","error","setErrors","message","onExited","Boolean","touched","errors","handleBlur","handleChange","map","option","isSubmitting","handleSubmit","defaultProps","propTypes","bool","func"],"mappings":"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","sourcesContent":["import PropTypes from 'prop-types';\nimport { useFormik } from 'formik';\nimport * as Yup from 'yup';\nimport toast from 'react-hot-toast';\nimport {\n  Button,\n  Dialog,\n  DialogActions,\n  DialogContent,\n  DialogTitle,\n  FormHelperText,\n  Grid,\n  MenuItem\n} from '@material-ui/core';\nimport { InputField } from '../input-field';\n\nconst countryOptions = ['USA', 'Germany', 'Spain', 'Italy'];\n\nexport const CustomerDialog = (props) => {\n  const { customer, open, onClose, ...other } = props;\n  const formik = useFormik({\n    enableReinitialize: true,\n    initialValues: {\n      address: customer?.address || '',\n      email: customer?.email || '',\n      fullName: customer?.fullName || '',\n      country: customer?.country || '',\n      phone: customer?.phone || '',\n      submit: null\n    },\n    validationSchema: Yup.object().shape({\n      address: Yup.string().max(255),\n      email: Yup.string().email('Must be a valid email').max(255).required('Email is required'),\n      fullName: Yup.string().max(255).required('Full name is required'),\n      country: Yup.string().oneOf(countryOptions),\n      phone: Yup.string().max(255)\n    }),\n    onSubmit: async (values, helpers) => {\n      try {\n        toast.success(`Customer ${customer ? 'updated' : 'created'}`);\n        helpers.resetForm();\n        helpers.setStatus({ success: true });\n        helpers.setSubmitting(false);\n      } catch (err) {\n        console.error(err);\n        helpers.setStatus({ success: false });\n        helpers.setErrors({ submit: err.message });\n        helpers.setSubmitting(false);\n      }\n    }\n  });\n\n  return (\n    <Dialog\n      onClose={onClose}\n      open={open}\n      TransitionProps={{\n        onExited: () => formik.resetForm()\n      }}\n      {...other}\n    >\n      <DialogTitle>\n        {customer ? 'Update Customer' : 'Create Customer'}\n      </DialogTitle>\n      <DialogContent>\n        <Grid\n          container\n          spacing={2}\n        >\n          <Grid\n            item\n            xs={12}\n          >\n            <InputField\n              error={Boolean(formik.touched.email && formik.errors.email)}\n              fullWidth\n              helperText={formik.touched.email && formik.errors.email}\n              label=\"Email address\"\n              name=\"email\"\n              onBlur={formik.handleBlur}\n              onChange={formik.handleChange}\n              required\n              type=\"email\"\n              value={formik.values.email}\n            />\n          </Grid>\n          <Grid\n            item\n            xs={12}\n          >\n            <InputField\n              error={Boolean(formik.touched.fullName && formik.errors.fullName)}\n              fullWidth\n              helperText={formik.touched.fullName && formik.errors.fullName}\n              label=\"Full Name\"\n              name=\"fullName\"\n              onBlur={formik.handleBlur}\n              onChange={formik.handleChange}\n              required\n              value={formik.values.fullName}\n            />\n          </Grid>\n          <Grid\n            item\n            xs={12}\n          >\n            <InputField\n              error={Boolean(formik.touched.phone && formik.errors.phone)}\n              fullWidth\n              helperText={formik.touched.phone && formik.errors.phone}\n              label=\"Phone number\"\n              name=\"phone\"\n              onBlur={formik.handleBlur}\n              onChange={formik.handleChange}\n              value={formik.values.phone}\n            />\n          </Grid>\n          <Grid\n            item\n            xs={12}\n          >\n            <InputField\n              error={Boolean(formik.touched.country && formik.errors.country)}\n              fullWidth\n              helperText={formik.touched.country && formik.errors.country}\n              label=\"Location\"\n              name=\"country\"\n              onBlur={formik.handleBlur}\n              onChange={formik.handleChange}\n              select\n              value={formik.values.country}\n            >\n              {countryOptions.map((option) => (\n                <MenuItem\n                  key={option}\n                  value={option}\n                >\n                  {option}\n                </MenuItem>\n              ))}\n            </InputField>\n          </Grid>\n          <Grid\n            item\n            xs={12}\n          >\n            <InputField\n              error={Boolean(formik.touched.address && formik.errors.address)}\n              fullWidth\n              helperText={formik.touched.address && formik.errors.address}\n              label=\"Full address\"\n              name=\"address\"\n              onBlur={formik.handleBlur}\n              onChange={formik.handleChange}\n              value={formik.values.address}\n            />\n          </Grid>\n          {formik.errors.submit && (\n            <Grid\n              item\n              xs={12}\n            >\n              <FormHelperText error>\n                {formik.errors.submit}\n              </FormHelperText>\n            </Grid>\n          )}\n        </Grid>\n      </DialogContent>\n      <DialogActions>\n        <Button\n          color=\"primary\"\n          onClick={onClose}\n          variant=\"outlined\"\n        >\n          Cancel\n        </Button>\n        <Button\n          color=\"primary\"\n          disabled={formik.isSubmitting}\n          onClick={() => { formik.handleSubmit(); }}\n          variant=\"contained\"\n        >\n          {customer ? 'Update' : 'Create'}\n        </Button>\n      </DialogActions>\n    </Dialog>\n  );\n};\n\nCustomerDialog.defaultProps = {\n  open: false\n};\n\nCustomerDialog.propTypes = {\n  customer: PropTypes.object,\n  open: PropTypes.bool,\n  onClose: PropTypes.func\n};\n"]},"metadata":{},"sourceType":"module"}
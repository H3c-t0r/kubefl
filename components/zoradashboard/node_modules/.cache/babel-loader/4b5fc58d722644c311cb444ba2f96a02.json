{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState } from 'react';\nexport const useSelection = rows => {\n  _s();\n\n  const [selectedRows, setSelectedRows] = useState([]);\n\n  const handleSelect = (event, rowId) => {\n    setSelectedRows(prevSelectedRows => {\n      if (event.target.checked) {\n        return [...prevSelectedRows, rowId];\n      }\n\n      return prevSelectedRows.filter(selectedRow => selectedRow !== rowId);\n    });\n  };\n\n  const handleClearSelected = () => {\n    setSelectedRows([]);\n  };\n\n  const handleSelectAll = event => {\n    if (event.target.checked) {\n      setSelectedRows(rows.map(row => row.id));\n      return;\n    }\n\n    handleClearSelected();\n  };\n\n  return [selectedRows, handleSelect, handleSelectAll];\n};\n\n_s(useSelection, \"kE+zebKPJPLpKtm4LqE61mD+8P8=\");","map":{"version":3,"sources":["/Users/allan.chepkoy/cloud/kubeflow/components/zoradashboard/src/hooks/use-selection.js"],"names":["useState","useSelection","rows","selectedRows","setSelectedRows","handleSelect","event","rowId","prevSelectedRows","target","checked","filter","selectedRow","handleClearSelected","handleSelectAll","map","row","id"],"mappings":";;AAAA,SAASA,QAAT,QAAyB,OAAzB;AAEA,OAAO,MAAMC,YAAY,GAAIC,IAAD,IAAU;AAAA;;AACpC,QAAM,CAACC,YAAD,EAAeC,eAAf,IAAkCJ,QAAQ,CAAC,EAAD,CAAhD;;AAEA,QAAMK,YAAY,GAAG,CAACC,KAAD,EAAQC,KAAR,KAAkB;AACrCH,IAAAA,eAAe,CAAEI,gBAAD,IAAsB;AACpC,UAAIF,KAAK,CAACG,MAAN,CAAaC,OAAjB,EAA0B;AACxB,eAAO,CAAC,GAAGF,gBAAJ,EAAsBD,KAAtB,CAAP;AACD;;AAED,aAAOC,gBAAgB,CAACG,MAAjB,CAAyBC,WAAD,IAAiBA,WAAW,KAAKL,KAAzD,CAAP;AACD,KANc,CAAf;AAOD,GARD;;AAUA,QAAMM,mBAAmB,GAAG,MAAM;AAChCT,IAAAA,eAAe,CAAC,EAAD,CAAf;AACD,GAFD;;AAIA,QAAMU,eAAe,GAAIR,KAAD,IAAW;AACjC,QAAIA,KAAK,CAACG,MAAN,CAAaC,OAAjB,EAA0B;AACxBN,MAAAA,eAAe,CAACF,IAAI,CAACa,GAAL,CAAUC,GAAD,IAASA,GAAG,CAACC,EAAtB,CAAD,CAAf;AACA;AACD;;AAEDJ,IAAAA,mBAAmB;AACpB,GAPD;;AASA,SAAO,CAACV,YAAD,EAAeE,YAAf,EAA6BS,eAA7B,CAAP;AACD,CA3BM;;GAAMb,Y","sourcesContent":["import { useState } from 'react';\n\nexport const useSelection = (rows) => {\n  const [selectedRows, setSelectedRows] = useState([]);\n\n  const handleSelect = (event, rowId) => {\n    setSelectedRows((prevSelectedRows) => {\n      if (event.target.checked) {\n        return [...prevSelectedRows, rowId];\n      }\n\n      return prevSelectedRows.filter((selectedRow) => selectedRow !== rowId);\n    });\n  };\n\n  const handleClearSelected = () => {\n    setSelectedRows([]);\n  };\n\n  const handleSelectAll = (event) => {\n    if (event.target.checked) {\n      setSelectedRows(rows.map((row) => row.id));\n      return;\n    }\n\n    handleClearSelected();\n  };\n\n  return [selectedRows, handleSelect, handleSelectAll];\n};\n"]},"metadata":{},"sourceType":"module"}
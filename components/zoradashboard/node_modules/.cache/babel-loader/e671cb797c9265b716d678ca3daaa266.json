{"ast":null,"code":"import { subDays, subMinutes } from 'date-fns';\nimport { throttle } from '../config';\nimport { applyFilters } from '../utils/apply-filters';\nimport { applyPagination } from '../utils/apply-pagination';\nimport { applySort } from '../utils/apply-sort';\nimport { wait } from '../utils/wait';\nconst now = new Date();\nconst invoices = [{\n  currencySymbol: '$',\n  dueDate: subDays(now, 2),\n  id: 'DEV5437',\n  issueDate: subDays(now, 9),\n  paymentMethod: 'Credit Card',\n  status: 'ongoing',\n  totalAmount: 192.5\n}, {\n  currencySymbol: '$',\n  dueDate: subDays(now, 1),\n  id: 'DEV5436',\n  issueDate: subDays(now, 12),\n  paymentMethod: 'Credit Card',\n  status: 'ongoing',\n  totalAmount: 192\n}, {\n  currencySymbol: '$',\n  dueDate: subDays(now, 14),\n  id: 'DEV54375',\n  issueDate: subDays(now, 4),\n  paymentMethod: 'PayPal',\n  status: 'ongoing',\n  totalAmount: 60\n}, {\n  currencySymbol: '$',\n  dueDate: subDays(now, 22),\n  id: 'DEV5434',\n  issueDate: subDays(now, 12),\n  paymentMethod: 'Credit Card',\n  status: 'draft',\n  totalAmount: 631\n}, {\n  currencySymbol: '$',\n  dueDate: subDays(now, 32),\n  id: 'DEV5433',\n  issueDate: subDays(now, 19),\n  paymentMethod: 'PayPal',\n  status: 'paid',\n  totalAmount: 1200\n}, {\n  currencySymbol: '$',\n  dueDate: subDays(now, 12),\n  id: 'DEV5432',\n  issueDate: subDays(now, 5),\n  paymentMethod: 'PayPal',\n  status: 'overdue',\n  totalAmount: 631\n}];\nconst invoice = {\n  createdAt: subDays(now, 10),\n  currencySymbol: '$',\n  customerName: 'Natalie Rusell',\n  dueDate: subDays(subMinutes(now, 29), 2),\n  id: 'DEV5437',\n  issueDate: subDays(subMinutes(now, 45), 9),\n  note: '“Please confirm once paid.”',\n  paymentAt: subDays(subMinutes(now, 11), 5),\n  paymentMethod: 'Credit Card',\n  paymentStatus: 'Failed',\n  status: 'ongoing',\n  subtotalAmount: 160,\n  taxAmount: 32.5,\n  totalAmount: 192.5,\n  transactionFees: 0,\n  transactionId: 'tran_54febasdaoiuhqja1837hj',\n  lineItems: [{\n    currency: 'USD',\n    currencySymbol: '$',\n    discountAmount: 0,\n    image: '/static/product-01.png',\n    name: 'Watch with Leather Strap',\n    quantity: 1,\n    sku: 'BBAK01-A',\n    subtotalAmount: 160,\n    taxAmount: 32.5,\n    totalAmount: 192.5,\n    unitAmount: 160,\n    isTaxable: true\n  }]\n};\n\nclass InvoiceApi {\n  async getInvoices(options) {\n    if (throttle) {\n      await wait(throttle);\n    }\n\n    const {\n      filters,\n      sort,\n      sortBy,\n      page,\n      query,\n      view\n    } = options;\n    /*\n     NOTE: Query, filter, sort and pagination are operation meant to be executed on the server.\n     Since this does not connect to a real backend, we simulate these operations.\n     */\n\n    const queriedInvoices = invoices.filter(_invoice => {\n      var _invoice$id;\n\n      // If query exists, it looks only in customer id field\n      if (!!query && !((_invoice$id = _invoice.id) === null || _invoice$id === void 0 ? void 0 : _invoice$id.toLowerCase().includes(query.toLowerCase()))) {\n        return false;\n      } // No need to look for any resource fields\n\n\n      if (typeof view === 'undefined' || view === 'all') {\n        return true;\n      } // In this case, the view represents the resource status\n\n\n      return _invoice.status === view;\n    });\n    const filteredInvoices = applyFilters(queriedInvoices, filters);\n    const sortedInvoices = applySort(filteredInvoices, sort, sortBy);\n    const paginatedInvoices = applyPagination(sortedInvoices, page);\n    return Promise.resolve({\n      invoices: paginatedInvoices,\n      invoicesCount: filteredInvoices.length\n    });\n  }\n\n  async getInvoice() {\n    if (throttle) {\n      await wait(throttle);\n    }\n\n    return Promise.resolve(invoice);\n  }\n\n}\n\nexport const invoiceApi = new InvoiceApi();","map":{"version":3,"sources":["/Users/allan.chepkoy/cloud/kubeflow/components/zoradashboard/src/api/invoice.js"],"names":["subDays","subMinutes","throttle","applyFilters","applyPagination","applySort","wait","now","Date","invoices","currencySymbol","dueDate","id","issueDate","paymentMethod","status","totalAmount","invoice","createdAt","customerName","note","paymentAt","paymentStatus","subtotalAmount","taxAmount","transactionFees","transactionId","lineItems","currency","discountAmount","image","name","quantity","sku","unitAmount","isTaxable","InvoiceApi","getInvoices","options","filters","sort","sortBy","page","query","view","queriedInvoices","filter","_invoice","toLowerCase","includes","filteredInvoices","sortedInvoices","paginatedInvoices","Promise","resolve","invoicesCount","length","getInvoice","invoiceApi"],"mappings":"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","sourcesContent":["import { subDays, subMinutes } from 'date-fns';\nimport { throttle } from '../config';\nimport { applyFilters } from '../utils/apply-filters';\nimport { applyPagination } from '../utils/apply-pagination';\nimport { applySort } from '../utils/apply-sort';\nimport { wait } from '../utils/wait';\n\nconst now = new Date();\n\nconst invoices = [\n  {\n    currencySymbol: '$',\n    dueDate: subDays(now, 2),\n    id: 'DEV5437',\n    issueDate: subDays(now, 9),\n    paymentMethod: 'Credit Card',\n    status: 'ongoing',\n    totalAmount: 192.5\n  },\n  {\n    currencySymbol: '$',\n    dueDate: subDays(now, 1),\n    id: 'DEV5436',\n    issueDate: subDays(now, 12),\n    paymentMethod: 'Credit Card',\n    status: 'ongoing',\n    totalAmount: 192\n  },\n  {\n    currencySymbol: '$',\n    dueDate: subDays(now, 14),\n    id: 'DEV54375',\n    issueDate: subDays(now, 4),\n    paymentMethod: 'PayPal',\n    status: 'ongoing',\n    totalAmount: 60\n  },\n  {\n    currencySymbol: '$',\n    dueDate: subDays(now, 22),\n    id: 'DEV5434',\n    issueDate: subDays(now, 12),\n    paymentMethod: 'Credit Card',\n    status: 'draft',\n    totalAmount: 631\n  },\n  {\n    currencySymbol: '$',\n    dueDate: subDays(now, 32),\n    id: 'DEV5433',\n    issueDate: subDays(now, 19),\n    paymentMethod: 'PayPal',\n    status: 'paid',\n    totalAmount: 1200\n  },\n  {\n    currencySymbol: '$',\n    dueDate: subDays(now, 12),\n    id: 'DEV5432',\n    issueDate: subDays(now, 5),\n    paymentMethod: 'PayPal',\n    status: 'overdue',\n    totalAmount: 631\n  }\n];\n\nconst invoice = {\n  createdAt: subDays(now, 10),\n  currencySymbol: '$',\n  customerName: 'Natalie Rusell',\n  dueDate: subDays(subMinutes(now, 29), 2),\n  id: 'DEV5437',\n  issueDate: subDays(subMinutes(now, 45), 9),\n  note: '“Please confirm once paid.”',\n  paymentAt: subDays(subMinutes(now, 11), 5),\n  paymentMethod: 'Credit Card',\n  paymentStatus: 'Failed',\n  status: 'ongoing',\n  subtotalAmount: 160,\n  taxAmount: 32.5,\n  totalAmount: 192.5,\n  transactionFees: 0,\n  transactionId: 'tran_54febasdaoiuhqja1837hj',\n  lineItems: [\n    {\n      currency: 'USD',\n      currencySymbol: '$',\n      discountAmount: 0,\n      image: '/static/product-01.png',\n      name: 'Watch with Leather Strap',\n      quantity: 1,\n      sku: 'BBAK01-A',\n      subtotalAmount: 160,\n      taxAmount: 32.5,\n      totalAmount: 192.5,\n      unitAmount: 160,\n      isTaxable: true\n    }\n  ]\n};\n\nclass InvoiceApi {\n  async getInvoices(options) {\n    if (throttle) {\n      await wait(throttle);\n    }\n\n    const { filters, sort, sortBy, page, query, view } = options;\n\n    /*\n     NOTE: Query, filter, sort and pagination are operation meant to be executed on the server.\n     Since this does not connect to a real backend, we simulate these operations.\n     */\n\n    const queriedInvoices = invoices.filter((_invoice) => {\n      // If query exists, it looks only in customer id field\n      if (!!query && !_invoice.id?.toLowerCase().includes(query.toLowerCase())) {\n        return false;\n      }\n\n      // No need to look for any resource fields\n      if (typeof view === 'undefined' || view === 'all') {\n        return true;\n      }\n\n      // In this case, the view represents the resource status\n      return _invoice.status === view;\n    });\n    const filteredInvoices = applyFilters(queriedInvoices, filters);\n    const sortedInvoices = applySort(filteredInvoices, sort, sortBy);\n    const paginatedInvoices = applyPagination(sortedInvoices, page);\n\n    return Promise.resolve({\n      invoices: paginatedInvoices,\n      invoicesCount: filteredInvoices.length\n    });\n  }\n\n  async getInvoice() {\n    if (throttle) {\n      await wait(throttle);\n    }\n\n    return Promise.resolve(invoice);\n  }\n}\n\nexport const invoiceApi = new InvoiceApi();\n"]},"metadata":{},"sourceType":"module"}
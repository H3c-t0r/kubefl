{"ast":null,"code":"var _jsxFileName = \"/Users/allan.chepkoy/cloud/kubeflow/components/zoradashboard/src/containers/orders.js\",\n    _s = $RefreshSig$();\n\nimport { useCallback, useEffect, useState } from 'react';\nimport { Helmet } from 'react-helmet-async';\nimport { Box, Button, Card, Container, Typography } from '@material-ui/core';\nimport { orderApi } from '../api/order';\nimport { OrderCreateDialog } from '../components/order/order-create-dialog';\nimport { OrdersDnd } from '../components/order/orders-dnd';\nimport { OrdersFilter } from '../components/order/orders-filter';\nimport { OrdersTable } from '../components/order/orders-table';\nimport { useMounted } from '../hooks/use-mounted';\nimport { useSelection } from '../hooks/use-selection';\nimport { Plus as PlusIcon } from '../icons/plus';\nimport gtm from '../lib/gtm';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport const Orders = () => {\n  _s();\n\n  var _ordersState$data, _ordersState$data2, _ordersState$data3, _ordersState$data4;\n\n  const mounted = useMounted();\n  const [controller, setController] = useState({\n    filters: [],\n    page: 0,\n    query: '',\n    sort: 'desc',\n    sortBy: 'createdAt',\n    view: 'all'\n  });\n  const [ordersState, setOrdersState] = useState({\n    isLoading: true\n  });\n  const [selectedOrders, handleSelect, handleSelectAll] = useSelection((_ordersState$data = ordersState.data) === null || _ordersState$data === void 0 ? void 0 : _ordersState$data.orders);\n  const [openCreateDialog, setOpenCreateDialog] = useState();\n  const [mode, setMode] = useState('dnd');\n  const getOrders = useCallback(async () => {\n    setOrdersState(() => ({\n      isLoading: true\n    }));\n\n    try {\n      const result = await orderApi.getOrders({\n        filters: controller.filters,\n        page: controller.page,\n        query: controller.query,\n        sort: controller.sort,\n        sortBy: controller.sortBy,\n        view: controller.view\n      });\n\n      if (mounted.current) {\n        setOrdersState(() => ({\n          isLoading: false,\n          data: result\n        }));\n      }\n    } catch (err) {\n      console.error(err);\n\n      if (mounted.current) {\n        setOrdersState(() => ({\n          isLoading: false,\n          error: err.message\n        }));\n      }\n    }\n  }, [controller]);\n  useEffect(() => {\n    getOrders().catch(console.error);\n  }, [controller]);\n  useEffect(() => {\n    gtm.push({\n      event: 'page_view'\n    });\n  }, []);\n\n  const handleViewChange = newView => {\n    setController({ ...controller,\n      page: 0,\n      view: newView\n    });\n  };\n\n  const handleQueryChange = newQuery => {\n    setController({ ...controller,\n      page: 0,\n      query: newQuery\n    });\n  };\n\n  const handleFiltersApply = newFilters => {\n    const parsedFilters = newFilters.map(filter => ({\n      property: filter.property.name,\n      value: filter.value,\n      operator: filter.operator.value\n    }));\n    setController({ ...controller,\n      page: 0,\n      filters: parsedFilters\n    });\n  };\n\n  const handleFiltersClear = () => {\n    setController({ ...controller,\n      page: 0,\n      filters: []\n    });\n  };\n\n  const handlePageChange = newPage => {\n    setController({ ...controller,\n      page: newPage - 1\n    });\n  };\n\n  const handleSortChange = (event, property) => {\n    const isAsc = controller.sortBy === property && controller.sort === 'asc';\n    setController({ ...controller,\n      page: 0,\n      sort: isAsc ? 'desc' : 'asc',\n      sortBy: property\n    });\n  };\n\n  const handleModeChange = (event, newMode) => {\n    if (newMode) {\n      setMode(newMode);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Helmet, {\n      children: /*#__PURE__*/_jsxDEV(\"title\", {\n        children: \"Order: List | Carpatin Dashboard\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Box, {\n      sx: {\n        backgroundColor: 'background.default',\n        flexGrow: 1\n      },\n      children: /*#__PURE__*/_jsxDEV(Container, {\n        maxWidth: \"lg\",\n        sx: {\n          display: 'flex',\n          flexDirection: 'column',\n          height: '100%'\n        },\n        children: [/*#__PURE__*/_jsxDEV(Box, {\n          sx: {\n            py: 4\n          },\n          children: /*#__PURE__*/_jsxDEV(Box, {\n            sx: {\n              alignItems: 'center',\n              display: 'flex'\n            },\n            children: [/*#__PURE__*/_jsxDEV(Typography, {\n              color: \"textPrimary\",\n              variant: \"h4\",\n              children: \"Orders\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 156,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Box, {\n              sx: {\n                flexGrow: 1\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 162,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Button, {\n              color: \"primary\",\n              onClick: () => setOpenCreateDialog(true),\n              startIcon: /*#__PURE__*/_jsxDEV(PlusIcon, {\n                fontSize: \"small\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 166,\n                columnNumber: 28\n              }, this),\n              variant: \"contained\",\n              size: \"large\",\n              children: \"Add\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 163,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 150,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 149,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Card, {\n          variant: \"outlined\",\n          sx: {\n            display: 'flex',\n            flexDirection: 'column',\n            flexGrow: 1\n          },\n          children: [/*#__PURE__*/_jsxDEV(OrdersFilter, {\n            disabled: ordersState.isLoading,\n            filters: controller.filters,\n            mode: mode,\n            onFiltersApply: handleFiltersApply,\n            onFiltersClear: handleFiltersClear,\n            onModeChange: handleModeChange,\n            onQueryChange: handleQueryChange,\n            onViewChange: handleViewChange,\n            query: controller.query,\n            selectedOrders: selectedOrders,\n            view: controller.view\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 182,\n            columnNumber: 13\n          }, this), mode === 'table' ? /*#__PURE__*/_jsxDEV(OrdersTable, {\n            error: ordersState.error,\n            isLoading: ordersState.isLoading,\n            onPageChange: handlePageChange,\n            onSelect: handleSelect,\n            onSelectAll: handleSelectAll,\n            onSortChange: handleSortChange,\n            orders: (_ordersState$data2 = ordersState.data) === null || _ordersState$data2 === void 0 ? void 0 : _ordersState$data2.orders,\n            ordersCount: (_ordersState$data3 = ordersState.data) === null || _ordersState$data3 === void 0 ? void 0 : _ordersState$data3.ordersCount,\n            page: controller.page + 1,\n            selectedOrders: selectedOrders,\n            sort: controller.sort,\n            sortBy: controller.sortBy\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 197,\n            columnNumber: 17\n          }, this) : /*#__PURE__*/_jsxDEV(OrdersDnd, {\n            error: ordersState.error,\n            isLoading: ordersState.isLoading,\n            orders: (_ordersState$data4 = ordersState.data) === null || _ordersState$data4 === void 0 ? void 0 : _ordersState$data4.orders\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 213,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 174,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 141,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(OrderCreateDialog, {\n      onClose: () => setOpenCreateDialog(false),\n      open: openCreateDialog\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 222,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n\n_s(Orders, \"t0BESjK8WPAJWlFX41p1Zf4L30s=\", false, function () {\n  return [useMounted, useSelection];\n});\n\n_c = Orders;\n\nvar _c;\n\n$RefreshReg$(_c, \"Orders\");","map":{"version":3,"sources":["/Users/allan.chepkoy/cloud/kubeflow/components/zoradashboard/src/containers/orders.js"],"names":["useCallback","useEffect","useState","Helmet","Box","Button","Card","Container","Typography","orderApi","OrderCreateDialog","OrdersDnd","OrdersFilter","OrdersTable","useMounted","useSelection","Plus","PlusIcon","gtm","Orders","mounted","controller","setController","filters","page","query","sort","sortBy","view","ordersState","setOrdersState","isLoading","selectedOrders","handleSelect","handleSelectAll","data","orders","openCreateDialog","setOpenCreateDialog","mode","setMode","getOrders","result","current","err","console","error","message","catch","push","event","handleViewChange","newView","handleQueryChange","newQuery","handleFiltersApply","newFilters","parsedFilters","map","filter","property","name","value","operator","handleFiltersClear","handlePageChange","newPage","handleSortChange","isAsc","handleModeChange","newMode","backgroundColor","flexGrow","display","flexDirection","height","py","alignItems","ordersCount"],"mappings":"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","sourcesContent":["import { useCallback, useEffect, useState } from 'react';\nimport { Helmet } from 'react-helmet-async';\nimport { Box, Button, Card, Container, Typography } from '@material-ui/core';\nimport { orderApi } from '../api/order';\nimport { OrderCreateDialog } from '../components/order/order-create-dialog';\nimport { OrdersDnd } from '../components/order/orders-dnd';\nimport { OrdersFilter } from '../components/order/orders-filter';\nimport { OrdersTable } from '../components/order/orders-table';\nimport { useMounted } from '../hooks/use-mounted';\nimport { useSelection } from '../hooks/use-selection';\nimport { Plus as PlusIcon } from '../icons/plus';\nimport gtm from '../lib/gtm';\n\nexport const Orders = () => {\n  const mounted = useMounted();\n  const [controller, setController] = useState({\n    filters: [],\n    page: 0,\n    query: '',\n    sort: 'desc',\n    sortBy: 'createdAt',\n    view: 'all'\n  });\n  const [ordersState, setOrdersState] = useState({ isLoading: true });\n  const [selectedOrders, handleSelect, handleSelectAll] = useSelection(ordersState.data?.orders);\n  const [openCreateDialog, setOpenCreateDialog] = useState();\n  const [mode, setMode] = useState('dnd');\n\n  const getOrders = useCallback(async () => {\n    setOrdersState(() => ({ isLoading: true }));\n\n    try {\n      const result = await orderApi.getOrders({\n        filters: controller.filters,\n        page: controller.page,\n        query: controller.query,\n        sort: controller.sort,\n        sortBy: controller.sortBy,\n        view: controller.view\n      });\n\n      if (mounted.current) {\n        setOrdersState(() => ({\n          isLoading: false,\n          data: result\n        }));\n      }\n    } catch (err) {\n      console.error(err);\n\n      if (mounted.current) {\n        setOrdersState(() => ({\n          isLoading: false,\n          error: err.message\n        }));\n      }\n    }\n  }, [controller]);\n\n  useEffect(() => {\n    getOrders().catch(console.error);\n  }, [controller]);\n\n  useEffect(() => {\n    gtm.push({ event: 'page_view' });\n  }, []);\n\n  const handleViewChange = (newView) => {\n    setController({\n      ...controller,\n      page: 0,\n      view: newView\n    });\n  };\n\n  const handleQueryChange = (newQuery) => {\n    setController({\n      ...controller,\n      page: 0,\n      query: newQuery\n    });\n  };\n\n  const handleFiltersApply = (newFilters) => {\n    const parsedFilters = newFilters.map((filter) => ({\n      property: filter.property.name,\n      value: filter.value,\n      operator: filter.operator.value\n    }));\n\n    setController({\n      ...controller,\n      page: 0,\n      filters: parsedFilters\n    });\n  };\n\n  const handleFiltersClear = () => {\n    setController({\n      ...controller,\n      page: 0,\n      filters: []\n    });\n  };\n\n  const handlePageChange = (newPage) => {\n    setController({\n      ...controller,\n      page: newPage - 1\n    });\n  };\n\n  const handleSortChange = (event, property) => {\n    const isAsc = controller.sortBy === property && controller.sort === 'asc';\n\n    setController({\n      ...controller,\n      page: 0,\n      sort: isAsc ? 'desc' : 'asc',\n      sortBy: property\n    });\n  };\n\n  const handleModeChange = (event, newMode) => {\n    if (newMode) {\n      setMode(newMode);\n    }\n  };\n\n  return (\n    <>\n      <Helmet>\n        <title>Order: List | Carpatin Dashboard</title>\n      </Helmet>\n      <Box\n        sx={{\n          backgroundColor: 'background.default',\n          flexGrow: 1\n        }}\n      >\n        <Container\n          maxWidth=\"lg\"\n          sx={{\n            display: 'flex',\n            flexDirection: 'column',\n            height: '100%'\n          }}\n        >\n          <Box sx={{ py: 4 }}>\n            <Box\n              sx={{\n                alignItems: 'center',\n                display: 'flex'\n              }}\n            >\n              <Typography\n                color=\"textPrimary\"\n                variant=\"h4\"\n              >\n                Orders\n              </Typography>\n              <Box sx={{ flexGrow: 1 }} />\n              <Button\n                color=\"primary\"\n                onClick={() => setOpenCreateDialog(true)}\n                startIcon={<PlusIcon fontSize=\"small\" />}\n                variant=\"contained\"\n                size=\"large\"\n              >\n                Add\n              </Button>\n            </Box>\n          </Box>\n          <Card\n            variant=\"outlined\"\n            sx={{\n              display: 'flex',\n              flexDirection: 'column',\n              flexGrow: 1\n            }}\n          >\n            <OrdersFilter\n              disabled={ordersState.isLoading}\n              filters={controller.filters}\n              mode={mode}\n              onFiltersApply={handleFiltersApply}\n              onFiltersClear={handleFiltersClear}\n              onModeChange={handleModeChange}\n              onQueryChange={handleQueryChange}\n              onViewChange={handleViewChange}\n              query={controller.query}\n              selectedOrders={selectedOrders}\n              view={controller.view}\n            />\n            {mode === 'table'\n              ? (\n                <OrdersTable\n                  error={ordersState.error}\n                  isLoading={ordersState.isLoading}\n                  onPageChange={handlePageChange}\n                  onSelect={handleSelect}\n                  onSelectAll={handleSelectAll}\n                  onSortChange={handleSortChange}\n                  orders={ordersState.data?.orders}\n                  ordersCount={ordersState.data?.ordersCount}\n                  page={controller.page + 1}\n                  selectedOrders={selectedOrders}\n                  sort={controller.sort}\n                  sortBy={controller.sortBy}\n                />\n              )\n              : (\n                <OrdersDnd\n                  error={ordersState.error}\n                  isLoading={ordersState.isLoading}\n                  orders={ordersState.data?.orders}\n                />\n              )}\n          </Card>\n        </Container>\n      </Box>\n      <OrderCreateDialog\n        onClose={() => setOpenCreateDialog(false)}\n        open={openCreateDialog}\n      />\n    </>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}
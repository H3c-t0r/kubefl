{"ast":null,"code":"var _jsxFileName = \"/Users/allan.chepkoy/cloud/kubeflow/components/zoradashboard/src/components/order/order-info-dialog.js\",\n    _s = $RefreshSig$();\n\nimport PropTypes from 'prop-types';\nimport { useFormik } from 'formik';\nimport * as Yup from 'yup';\nimport toast from 'react-hot-toast';\nimport { Button, Dialog, DialogActions, DialogContent, DialogTitle, FormHelperText, Grid, MenuItem } from '@material-ui/core';\nimport { InputField } from '../input-field';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst statusOptions = [{\n  label: 'Placed',\n  value: 'placed'\n}, {\n  label: 'Processed',\n  value: 'processed'\n}, {\n  label: 'Delivered',\n  value: 'delivered'\n}, {\n  label: 'Complete',\n  value: 'complete'\n}];\nconst countryOptions = [{\n  value: 'USA',\n  cities: ['New York', 'Los Angeles', 'Chicago', 'Houston', 'Austin']\n}, {\n  value: 'Germany',\n  cities: ['Berlin', 'Hamburg', 'Munich', 'Dortmund', 'Bremen']\n}, {\n  value: 'Spain',\n  cities: ['Madrid', 'Barcelona', 'Valencia', 'MÃ¡laga', 'Sevilla']\n}, {\n  value: 'Italy',\n  cities: ['Rome', 'Milan', 'Naples', 'Turin', 'Palermo']\n}];\nexport const OrderInfoDialog = props => {\n  _s();\n\n  var _countryOptions$find;\n\n  const {\n    open,\n    onClose,\n    order\n  } = props;\n  const formik = useFormik({\n    enableReinitialize: true,\n    initialValues: {\n      address: (order === null || order === void 0 ? void 0 : order.customer.address) || '',\n      country: (order === null || order === void 0 ? void 0 : order.customer.country) || '',\n      email: (order === null || order === void 0 ? void 0 : order.customer.email) || '',\n      phone: (order === null || order === void 0 ? void 0 : order.customer.phone) || '',\n      city: (order === null || order === void 0 ? void 0 : order.customer.city) || '',\n      status: (order === null || order === void 0 ? void 0 : order.status) || '',\n      submit: null\n    },\n    validationSchema: Yup.object().shape({\n      address: Yup.string().max(255).required('Address is required'),\n      country: Yup.string().max(255).oneOf(countryOptions.map(option => option.value)).required('Country is required'),\n      email: Yup.string().email('Must be a valid email').max(255).required('Email is required'),\n      phone: Yup.string().max(255).required('Phone number is required'),\n      city: Yup.string().max(255).required('City is required'),\n      status: Yup.string().max(255).required('Status is required')\n    }),\n    onSubmit: async (values, helpers) => {\n      try {\n        toast.success('Order updated');\n        helpers.setStatus({\n          success: true\n        });\n        helpers.setSubmitting(false);\n        onClose === null || onClose === void 0 ? void 0 : onClose();\n      } catch (err) {\n        console.error(err);\n        helpers.setStatus({\n          success: false\n        });\n        helpers.setErrors({\n          submit: err.message\n        });\n        helpers.setSubmitting(false);\n      }\n    }\n  });\n  return /*#__PURE__*/_jsxDEV(Dialog, {\n    onClose: onClose,\n    open: open,\n    PaperProps: {\n      sx: {\n        width: '100%'\n      }\n    },\n    TransitionProps: {\n      onExited: () => formik.resetForm()\n    },\n    children: [/*#__PURE__*/_jsxDEV(DialogTitle, {\n      children: \"Edit order\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(DialogContent, {\n      children: /*#__PURE__*/_jsxDEV(Grid, {\n        container: true,\n        spacing: 2,\n        children: [/*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          xs: 12,\n          children: /*#__PURE__*/_jsxDEV(InputField, {\n            error: Boolean(formik.touched.email && formik.errors.email),\n            fullWidth: true,\n            helperText: formik.touched.email && formik.errors.email,\n            label: \"Email\",\n            name: \"email\",\n            onBlur: formik.handleBlur,\n            onChange: formik.handleChange,\n            type: \"email\",\n            value: formik.values.email\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 120,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 116,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          xs: 12,\n          children: /*#__PURE__*/_jsxDEV(InputField, {\n            error: Boolean(formik.touched.address && formik.errors.address),\n            fullWidth: true,\n            helperText: formik.touched.address && formik.errors.address,\n            label: \"Address\",\n            name: \"address\",\n            onBlur: formik.handleBlur,\n            onChange: formik.handleChange,\n            value: formik.values.address\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 136,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 132,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          xs: 12,\n          children: /*#__PURE__*/_jsxDEV(InputField, {\n            error: Boolean(formik.touched.phone && formik.errors.phone),\n            fullWidth: true,\n            helperText: formik.touched.phone && formik.errors.phone,\n            label: \"Phone number\",\n            name: \"phone\",\n            onBlur: formik.handleBlur,\n            onChange: formik.handleChange,\n            value: formik.values.phone\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 151,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 147,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          xs: 12,\n          children: /*#__PURE__*/_jsxDEV(InputField, {\n            error: Boolean(formik.touched.status && formik.errors.status),\n            fullWidth: true,\n            helperText: formik.touched.status && formik.errors.status,\n            label: \"Status\",\n            name: \"status\",\n            onBlur: formik.handleBlur,\n            onChange: formik.handleChange,\n            select: true,\n            value: formik.values.status,\n            children: statusOptions.map(option => /*#__PURE__*/_jsxDEV(MenuItem, {\n              value: option.value,\n              children: option.label\n            }, option.value, false, {\n              fileName: _jsxFileName,\n              lineNumber: 178,\n              columnNumber: 17\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 166,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 162,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          xs: 12,\n          children: /*#__PURE__*/_jsxDEV(InputField, {\n            error: Boolean(formik.touched.country && formik.errors.country),\n            fullWidth: true,\n            helperText: formik.touched.country && formik.errors.country,\n            label: \"Country\",\n            name: \"country\",\n            onBlur: formik.handleBlur,\n            onChange: formik.handleChange,\n            select: true,\n            value: formik.values.country,\n            children: countryOptions.map(option => /*#__PURE__*/_jsxDEV(MenuItem, {\n              value: option.value,\n              children: option.value\n            }, option.value, false, {\n              fileName: _jsxFileName,\n              lineNumber: 203,\n              columnNumber: 17\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 191,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 187,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          xs: 12,\n          children: /*#__PURE__*/_jsxDEV(InputField, {\n            error: Boolean(formik.touched.city && formik.errors.city),\n            fullWidth: true,\n            helperText: formik.touched.city && formik.errors.city,\n            label: \"City\",\n            name: \"city\",\n            onBlur: formik.handleBlur,\n            onChange: formik.handleChange,\n            select: true,\n            value: formik.values.city,\n            children: (((_countryOptions$find = countryOptions.find(option => option.value === formik.values.country)) === null || _countryOptions$find === void 0 ? void 0 : _countryOptions$find.cities) || []).map(option => /*#__PURE__*/_jsxDEV(MenuItem, {\n              value: option,\n              children: option\n            }, option, false, {\n              fileName: _jsxFileName,\n              lineNumber: 230,\n              columnNumber: 19\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 216,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 212,\n          columnNumber: 11\n        }, this), formik.errors.submit && /*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          xs: 12,\n          children: /*#__PURE__*/_jsxDEV(FormHelperText, {\n            error: true,\n            children: formik.errors.submit\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 244,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 240,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(DialogActions, {\n      children: [/*#__PURE__*/_jsxDEV(Button, {\n        color: \"primary\",\n        onClick: onClose,\n        variant: \"text\",\n        children: \"Cancel\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 252,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        color: \"primary\",\n        onClick: () => {\n          formik.handleSubmit();\n        },\n        variant: \"contained\",\n        children: \"Save Changes\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 259,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 251,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 96,\n    columnNumber: 5\n  }, this);\n};\n\n_s(OrderInfoDialog, \"B/4rI4IXClQ7sG7psKj+pOuRe5Q=\", false, function () {\n  return [useFormik];\n});\n\n_c = OrderInfoDialog;\nOrderInfoDialog.defaultProps = {\n  open: false\n};\nOrderInfoDialog.propTypes = {\n  onClose: PropTypes.func,\n  open: PropTypes.bool,\n  order: PropTypes.object\n};\n\nvar _c;\n\n$RefreshReg$(_c, \"OrderInfoDialog\");","map":{"version":3,"sources":["/Users/allan.chepkoy/cloud/kubeflow/components/zoradashboard/src/components/order/order-info-dialog.js"],"names":["PropTypes","useFormik","Yup","toast","Button","Dialog","DialogActions","DialogContent","DialogTitle","FormHelperText","Grid","MenuItem","InputField","statusOptions","label","value","countryOptions","cities","OrderInfoDialog","props","open","onClose","order","formik","enableReinitialize","initialValues","address","customer","country","email","phone","city","status","submit","validationSchema","object","shape","string","max","required","oneOf","map","option","onSubmit","values","helpers","success","setStatus","setSubmitting","err","console","error","setErrors","message","sx","width","onExited","resetForm","Boolean","touched","errors","handleBlur","handleChange","find","handleSubmit","defaultProps","propTypes","func","bool"],"mappings":"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","sourcesContent":["import PropTypes from 'prop-types';\nimport { useFormik } from 'formik';\nimport * as Yup from 'yup';\nimport toast from 'react-hot-toast';\nimport {\n  Button,\n  Dialog,\n  DialogActions,\n  DialogContent,\n  DialogTitle,\n  FormHelperText,\n  Grid,\n  MenuItem\n} from '@material-ui/core';\nimport { InputField } from '../input-field';\n\nconst statusOptions = [\n  {\n    label: 'Placed',\n    value: 'placed'\n  },\n  {\n    label: 'Processed',\n    value: 'processed'\n  },\n  {\n    label: 'Delivered',\n    value: 'delivered'\n  },\n  {\n    label: 'Complete',\n    value: 'complete'\n  }\n];\n\nconst countryOptions = [\n  {\n    value: 'USA',\n    cities: ['New York', 'Los Angeles', 'Chicago', 'Houston', 'Austin']\n  },\n  {\n    value: 'Germany',\n    cities: ['Berlin', 'Hamburg', 'Munich', 'Dortmund', 'Bremen']\n  },\n  {\n    value: 'Spain',\n    cities: ['Madrid', 'Barcelona', 'Valencia', 'MÃ¡laga', 'Sevilla']\n  },\n  {\n    value: 'Italy',\n    cities: ['Rome', 'Milan', 'Naples', 'Turin', 'Palermo']\n  }\n];\n\nexport const OrderInfoDialog = (props) => {\n  const { open, onClose, order } = props;\n  const formik = useFormik({\n    enableReinitialize: true,\n    initialValues: {\n      address: order?.customer.address || '',\n      country: order?.customer.country || '',\n      email: order?.customer.email || '',\n      phone: order?.customer.phone || '',\n      city: order?.customer.city || '',\n      status: order?.status || '',\n      submit: null\n    },\n    validationSchema: Yup.object().shape({\n      address: Yup.string().max(255).required('Address is required'),\n      country: Yup\n        .string()\n        .max(255)\n        .oneOf(countryOptions.map((option) => option.value))\n        .required('Country is required'),\n      email: Yup.string().email('Must be a valid email').max(255).required('Email is required'),\n      phone: Yup.string().max(255).required('Phone number is required'),\n      city: Yup.string().max(255).required('City is required'),\n      status: Yup.string().max(255).required('Status is required')\n    }),\n    onSubmit: async (values, helpers) => {\n      try {\n        toast.success('Order updated');\n        helpers.setStatus({ success: true });\n        helpers.setSubmitting(false);\n        onClose?.();\n      } catch (err) {\n        console.error(err);\n        helpers.setStatus({ success: false });\n        helpers.setErrors({ submit: err.message });\n        helpers.setSubmitting(false);\n      }\n    }\n  });\n\n  return (\n    <Dialog\n      onClose={onClose}\n      open={open}\n      PaperProps={{\n        sx: {\n          width: '100%'\n        }\n      }}\n      TransitionProps={{\n        onExited: () => formik.resetForm()\n      }}\n    >\n      <DialogTitle>\n        Edit order\n      </DialogTitle>\n      <DialogContent>\n        <Grid\n          container\n          spacing={2}\n        >\n          <Grid\n            item\n            xs={12}\n          >\n            <InputField\n              error={Boolean(formik.touched.email && formik.errors.email)}\n              fullWidth\n              helperText={formik.touched.email && formik.errors.email}\n              label=\"Email\"\n              name=\"email\"\n              onBlur={formik.handleBlur}\n              onChange={formik.handleChange}\n              type=\"email\"\n              value={formik.values.email}\n            />\n          </Grid>\n          <Grid\n            item\n            xs={12}\n          >\n            <InputField\n              error={Boolean(formik.touched.address && formik.errors.address)}\n              fullWidth\n              helperText={formik.touched.address && formik.errors.address}\n              label=\"Address\"\n              name=\"address\"\n              onBlur={formik.handleBlur}\n              onChange={formik.handleChange}\n              value={formik.values.address}\n            />\n          </Grid>\n          <Grid\n            item\n            xs={12}\n          >\n            <InputField\n              error={Boolean(formik.touched.phone && formik.errors.phone)}\n              fullWidth\n              helperText={formik.touched.phone && formik.errors.phone}\n              label=\"Phone number\"\n              name=\"phone\"\n              onBlur={formik.handleBlur}\n              onChange={formik.handleChange}\n              value={formik.values.phone}\n            />\n          </Grid>\n          <Grid\n            item\n            xs={12}\n          >\n            <InputField\n              error={Boolean(formik.touched.status && formik.errors.status)}\n              fullWidth\n              helperText={formik.touched.status && formik.errors.status}\n              label=\"Status\"\n              name=\"status\"\n              onBlur={formik.handleBlur}\n              onChange={formik.handleChange}\n              select\n              value={formik.values.status}\n            >\n              {statusOptions.map((option) => (\n                <MenuItem\n                  key={option.value}\n                  value={option.value}\n                >\n                  {option.label}\n                </MenuItem>\n              ))}\n            </InputField>\n          </Grid>\n          <Grid\n            item\n            xs={12}\n          >\n            <InputField\n              error={Boolean(formik.touched.country && formik.errors.country)}\n              fullWidth\n              helperText={formik.touched.country && formik.errors.country}\n              label=\"Country\"\n              name=\"country\"\n              onBlur={formik.handleBlur}\n              onChange={formik.handleChange}\n              select\n              value={formik.values.country}\n            >\n              {countryOptions.map((option) => (\n                <MenuItem\n                  key={option.value}\n                  value={option.value}\n                >\n                  {option.value}\n                </MenuItem>\n              ))}\n            </InputField>\n          </Grid>\n          <Grid\n            item\n            xs={12}\n          >\n            <InputField\n              error={Boolean(formik.touched.city && formik.errors.city)}\n              fullWidth\n              helperText={formik.touched.city && formik.errors.city}\n              label=\"City\"\n              name=\"city\"\n              onBlur={formik.handleBlur}\n              onChange={formik.handleChange}\n              select\n              value={formik.values.city}\n            >\n              {(countryOptions\n                .find((option) => option.value === formik.values.country)?.cities || [])\n                .map((option) => (\n                  <MenuItem\n                    key={option}\n                    value={option}\n                  >\n                    {option}\n                  </MenuItem>\n                ))}\n            </InputField>\n          </Grid>\n          {formik.errors.submit && (\n            <Grid\n              item\n              xs={12}\n            >\n              <FormHelperText error>\n                {formik.errors.submit}\n              </FormHelperText>\n            </Grid>\n          )}\n        </Grid>\n      </DialogContent>\n      <DialogActions>\n        <Button\n          color=\"primary\"\n          onClick={onClose}\n          variant=\"text\"\n        >\n          Cancel\n        </Button>\n        <Button\n          color=\"primary\"\n          onClick={() => { formik.handleSubmit(); }}\n          variant=\"contained\"\n        >\n          Save Changes\n        </Button>\n      </DialogActions>\n    </Dialog>\n  );\n};\n\nOrderInfoDialog.defaultProps = {\n  open: false\n};\n\nOrderInfoDialog.propTypes = {\n  onClose: PropTypes.func,\n  open: PropTypes.bool,\n  order: PropTypes.object\n};\n"]},"metadata":{},"sourceType":"module"}
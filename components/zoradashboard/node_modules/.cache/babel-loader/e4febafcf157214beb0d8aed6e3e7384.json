{"ast":null,"code":"var _jsxFileName = \"/Users/allan.chepkoy/cloud/kubeflow/components/zoradashboard/src/components/images-uploader-dialog.js\",\n    _s = $RefreshSig$();\n\nimport { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { Box, Button, Checkbox, IconButton, Dialog, DialogActions, DialogContent, DialogTitle, Typography } from '@material-ui/core';\nimport { Trash as TrashIcon } from '../icons/trash';\nimport { ImageDropzone } from './image-dropzone';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const ImagesUploaderDialog = props => {\n  _s();\n\n  const {\n    onCancel,\n    onSaveImages,\n    open,\n    selectedImages: selectedImagesProp,\n    ...other\n  } = props;\n  const [images, setImages] = useState(['/static/product-07.png', '/static/product-08.png', '/static/product-09.png', '/static/product-10.png']);\n  const [selectedImages, setSelectedImages] = useState(selectedImagesProp);\n\n  const handleDeleteImage = image => {\n    setImages(prevImages => prevImages.filter(_image => _image !== image));\n  };\n\n  const handleSelectImage = image => {\n    if (selectedImages.includes(image)) {\n      setSelectedImages(prevSelectedImages => prevSelectedImages.filter(selectedImage => selectedImage !== image));\n      return;\n    }\n\n    setSelectedImages(prevSelectedImages => [...prevSelectedImages, image]);\n  };\n\n  const handleDrop = newFiles => {\n    setImages(prevImages => [...prevImages, URL.createObjectURL(newFiles[0])]);\n  };\n\n  useEffect(() => {\n    setSelectedImages(selectedImagesProp);\n  }, [selectedImagesProp]);\n  return /*#__PURE__*/_jsxDEV(Dialog, {\n    onClose: onCancel,\n    open: open,\n    PaperProps: {\n      sx: {\n        width: '100%'\n      }\n    },\n    ...other,\n    children: [/*#__PURE__*/_jsxDEV(DialogTitle, {\n      children: \"Select image\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(DialogContent, {\n      children: [/*#__PURE__*/_jsxDEV(Typography, {\n        color: \"textSecondary\",\n        sx: {\n          mb: 3\n        },\n        variant: \"body2\",\n        children: \"You can only choose images as variant media\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Box, {\n        sx: {\n          display: 'grid',\n          gap: 2,\n          gridTemplateColumns: !selectedImages.length ? '1fr' : {\n            md: 'repeat(4, 1fr)',\n            sm: 'repeat(3, 1fr)',\n            xs: 'repeat(2, 1fr)'\n          },\n          '& img': {\n            borderRadius: 1,\n            maxWidth: '100%'\n          }\n        },\n        children: [/*#__PURE__*/_jsxDEV(ImageDropzone, {\n          onDrop: handleDrop,\n          sx: {\n            height: '100%'\n          },\n          accept: \"image/jpeg, image/png\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 11\n        }, this), images.map(image => {\n          const isSelected = selectedImages.includes(image);\n          return /*#__PURE__*/_jsxDEV(Box, {\n            sx: {\n              display: 'flex',\n              alignItems: 'center',\n              justifyContent: 'center'\n            },\n            children: /*#__PURE__*/_jsxDEV(Box, {\n              sx: {\n                borderRadius: 1,\n                boxShadow: theme => isSelected && `0px 0px 0px 2px ${theme.palette.primary.main}`,\n                display: 'flex',\n                alignItems: 'center',\n                justifyContent: 'center',\n                position: 'relative',\n                width: '100%',\n                height: '100%',\n                '&::before': {\n                  backgroundColor: 'rgba(255, 255, 255, 0.8)',\n                  borderRadius: 1,\n                  bottom: 0,\n                  content: '\"\"',\n                  display: isSelected ? 'block' : 'none',\n                  left: 0,\n                  position: 'absolute',\n                  right: 0,\n                  top: 0\n                },\n                '&:hover': {\n                  boxShadow: theme => !isSelected ? `0px 0px 0px 1px ${theme.palette.primary.main}` : `0px 0px 0px 2px ${theme.palette.primary.main}`,\n                  '&::before': {\n                    display: 'block'\n                  },\n                  '& span, button': {\n                    display: 'inline-flex'\n                  }\n                }\n              },\n              children: [/*#__PURE__*/_jsxDEV(\"img\", {\n                alt: \"\",\n                src: image,\n                style: {\n                  maxWidth: '100%'\n                }\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 138,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(Checkbox, {\n                checked: isSelected,\n                onClick: () => handleSelectImage(image),\n                sx: {\n                  display: 'none',\n                  left: 8,\n                  position: 'absolute',\n                  top: 8\n                }\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 143,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(IconButton, {\n                color: \"primary\",\n                onClick: () => handleDeleteImage(image),\n                sx: {\n                  bottom: 8,\n                  color: 'text.secondary',\n                  display: 'none',\n                  position: 'absolute',\n                  right: 8\n                },\n                children: /*#__PURE__*/_jsxDEV(TrashIcon, {}, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 164,\n                  columnNumber: 21\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 153,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 103,\n              columnNumber: 17\n            }, this)\n          }, image, false, {\n            fileName: _jsxFileName,\n            lineNumber: 95,\n            columnNumber: 15\n          }, this);\n        })]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(DialogActions, {\n      children: [/*#__PURE__*/_jsxDEV(Button, {\n        color: \"primary\",\n        onClick: onCancel,\n        variant: \"text\",\n        children: \"Cancel\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 173,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        color: \"primary\",\n        onClick: () => onSaveImages(selectedImages),\n        variant: \"contained\",\n        children: \"Add selected\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 180,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 172,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 50,\n    columnNumber: 5\n  }, this);\n};\n\n_s(ImagesUploaderDialog, \"fe2+/jo+KYF7QGyTZt6rv6IHN08=\");\n\n_c = ImagesUploaderDialog;\nImagesUploaderDialog.defaultProps = {\n  open: false\n};\nImagesUploaderDialog.propTypes = {\n  onCancel: PropTypes.func.isRequired,\n  onSaveImages: PropTypes.func.isRequired,\n  open: PropTypes.bool,\n  selectedImages: PropTypes.arrayOf(PropTypes.string).isRequired\n};\n\nvar _c;\n\n$RefreshReg$(_c, \"ImagesUploaderDialog\");","map":{"version":3,"sources":["/Users/allan.chepkoy/cloud/kubeflow/components/zoradashboard/src/components/images-uploader-dialog.js"],"names":["useState","useEffect","PropTypes","Box","Button","Checkbox","IconButton","Dialog","DialogActions","DialogContent","DialogTitle","Typography","Trash","TrashIcon","ImageDropzone","ImagesUploaderDialog","props","onCancel","onSaveImages","open","selectedImages","selectedImagesProp","other","images","setImages","setSelectedImages","handleDeleteImage","image","prevImages","filter","_image","handleSelectImage","includes","prevSelectedImages","selectedImage","handleDrop","newFiles","URL","createObjectURL","sx","width","mb","display","gap","gridTemplateColumns","length","md","sm","xs","borderRadius","maxWidth","height","map","isSelected","alignItems","justifyContent","boxShadow","theme","palette","primary","main","position","backgroundColor","bottom","content","left","right","top","color","defaultProps","propTypes","func","isRequired","bool","arrayOf","string"],"mappings":"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","sourcesContent":["import { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport {\n  Box,\n  Button,\n  Checkbox,\n  IconButton,\n  Dialog,\n  DialogActions,\n  DialogContent,\n  DialogTitle,\n  Typography\n} from '@material-ui/core';\nimport { Trash as TrashIcon } from '../icons/trash';\nimport { ImageDropzone } from './image-dropzone';\n\nexport const ImagesUploaderDialog = (props) => {\n  const { onCancel, onSaveImages, open, selectedImages: selectedImagesProp, ...other } = props;\n  const [images, setImages] = useState([\n    '/static/product-07.png',\n    '/static/product-08.png',\n    '/static/product-09.png',\n    '/static/product-10.png'\n  ]);\n  const [selectedImages, setSelectedImages] = useState(selectedImagesProp);\n\n  const handleDeleteImage = (image) => {\n    setImages((prevImages) => prevImages\n      .filter((_image) => _image !== image));\n  };\n\n  const handleSelectImage = (image) => {\n    if (selectedImages.includes(image)) {\n      setSelectedImages((prevSelectedImages) => prevSelectedImages\n        .filter((selectedImage) => selectedImage !== image));\n      return;\n    }\n    setSelectedImages((prevSelectedImages) => [...prevSelectedImages, image]);\n  };\n\n  const handleDrop = (newFiles) => {\n    setImages((prevImages) => [...prevImages, URL.createObjectURL(newFiles[0])]);\n  };\n\n  useEffect(() => {\n    setSelectedImages(selectedImagesProp);\n  }, [selectedImagesProp]);\n\n  return (\n    <Dialog\n      onClose={onCancel}\n      open={open}\n      PaperProps={{\n        sx: {\n          width: '100%'\n        }\n      }}\n      {...other}\n    >\n      <DialogTitle>\n        Select image\n      </DialogTitle>\n      <DialogContent>\n        <Typography\n          color=\"textSecondary\"\n          sx={{ mb: 3 }}\n          variant=\"body2\"\n        >\n          You can only choose images as variant media\n        </Typography>\n        <Box\n          sx={{\n            display: 'grid',\n            gap: 2,\n            gridTemplateColumns: !selectedImages.length ? '1fr' : ({\n              md: 'repeat(4, 1fr)',\n              sm: 'repeat(3, 1fr)',\n              xs: 'repeat(2, 1fr)'\n            }),\n            '& img': {\n              borderRadius: 1,\n              maxWidth: '100%'\n            }\n          }}\n        >\n          <ImageDropzone\n            onDrop={handleDrop}\n            sx={{ height: '100%' }}\n            accept=\"image/jpeg, image/png\"\n          />\n          {images.map((image) => {\n            const isSelected = selectedImages.includes(image);\n\n            return (\n              <Box\n                key={image}\n                sx={{\n                  display: 'flex',\n                  alignItems: 'center',\n                  justifyContent: 'center'\n                }}\n              >\n                <Box\n                  sx={{\n                    borderRadius: 1,\n                    boxShadow: (theme) => isSelected\n                      && `0px 0px 0px 2px ${theme.palette.primary.main}`,\n                    display: 'flex',\n                    alignItems: 'center',\n                    justifyContent: 'center',\n                    position: 'relative',\n                    width: '100%',\n                    height: '100%',\n                    '&::before': {\n                      backgroundColor: 'rgba(255, 255, 255, 0.8)',\n                      borderRadius: 1,\n                      bottom: 0,\n                      content: '\"\"',\n                      display: isSelected ? 'block' : 'none',\n                      left: 0,\n                      position: 'absolute',\n                      right: 0,\n                      top: 0\n                    },\n                    '&:hover': {\n                      boxShadow: (theme) => (!isSelected\n                        ? `0px 0px 0px 1px ${theme.palette.primary.main}`\n                        : `0px 0px 0px 2px ${theme.palette.primary.main}`),\n                      '&::before': {\n                        display: 'block'\n                      },\n                      '& span, button': {\n                        display: 'inline-flex'\n                      }\n                    }\n                  }}\n                >\n                  <img\n                    alt=\"\"\n                    src={image}\n                    style={{ maxWidth: '100%' }}\n                  />\n                  <Checkbox\n                    checked={isSelected}\n                    onClick={() => handleSelectImage(image)}\n                    sx={{\n                      display: 'none',\n                      left: 8,\n                      position: 'absolute',\n                      top: 8\n                    }}\n                  />\n                  <IconButton\n                    color=\"primary\"\n                    onClick={() => handleDeleteImage(image)}\n                    sx={{\n                      bottom: 8,\n                      color: 'text.secondary',\n                      display: 'none',\n                      position: 'absolute',\n                      right: 8\n                    }}\n                  >\n                    <TrashIcon />\n                  </IconButton>\n                </Box>\n              </Box>\n            );\n          })}\n        </Box>\n      </DialogContent>\n      <DialogActions>\n        <Button\n          color=\"primary\"\n          onClick={onCancel}\n          variant=\"text\"\n        >\n          Cancel\n        </Button>\n        <Button\n          color=\"primary\"\n          onClick={() => onSaveImages(selectedImages)}\n          variant=\"contained\"\n        >\n          Add selected\n        </Button>\n      </DialogActions>\n    </Dialog>\n  );\n};\n\nImagesUploaderDialog.defaultProps = {\n  open: false\n};\n\nImagesUploaderDialog.propTypes = {\n  onCancel: PropTypes.func.isRequired,\n  onSaveImages: PropTypes.func.isRequired,\n  open: PropTypes.bool,\n  selectedImages: PropTypes.arrayOf(PropTypes.string).isRequired\n};\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"var _jsxFileName = \"/Users/allan.chepkoy/cloud/kubeflow/components/zoradashboard/src/components/laguage-popover.js\",\n    _s = $RefreshSig$();\n\nimport { useRef, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { Box, IconButton, ListItemIcon, ListItemText, MenuItem, Popover, Typography } from '@material-ui/core';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst languageOptions = {\n  en: {\n    icon: '/static/uk_flag.svg',\n    label: 'English'\n  },\n  de: {\n    icon: '/static/de_flag.svg',\n    label: 'German'\n  },\n  es: {\n    icon: '/static/es_flag.svg',\n    label: 'Spanish'\n  }\n};\nexport const LanguagePopover = props => {\n  _s();\n\n  const {\n    language,\n    onLanguageChange,\n    ...other\n  } = props;\n  const anchorRef = useRef(null);\n  const [open, setOpen] = useState(false);\n\n  const handleOpen = () => {\n    setOpen(true);\n  };\n\n  const handleClose = () => {\n    setOpen(false);\n  };\n\n  const handleLanguageChange = newLanguage => {\n    onLanguageChange(newLanguage);\n    setOpen(false);\n  };\n\n  const selectedOption = languageOptions[language];\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(IconButton, {\n      onClick: handleOpen,\n      ref: anchorRef,\n      ...other,\n      children: /*#__PURE__*/_jsxDEV(Box, {\n        sx: {\n          display: 'flex',\n          height: 20,\n          width: 20,\n          '& img': {\n            width: '100%'\n          }\n        },\n        children: /*#__PURE__*/_jsxDEV(\"img\", {\n          alt: selectedOption.label,\n          src: selectedOption.icon\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Popover, {\n      anchorEl: anchorRef.current,\n      anchorOrigin: {\n        horizontal: 'center',\n        vertical: 'bottom'\n      },\n      keepMounted: true,\n      onClose: handleClose,\n      open: open,\n      PaperProps: {\n        sx: {\n          width: 240\n        }\n      },\n      children: Object.keys(languageOptions).map(option => /*#__PURE__*/_jsxDEV(MenuItem, {\n        onClick: () => handleLanguageChange(option),\n        children: [/*#__PURE__*/_jsxDEV(ListItemIcon, {\n          children: /*#__PURE__*/_jsxDEV(Box, {\n            sx: {\n              display: 'flex',\n              height: 20,\n              width: 20,\n              '& img': {\n                width: '100%'\n              }\n            },\n            children: /*#__PURE__*/_jsxDEV(\"img\", {\n              alt: languageOptions[option].label,\n              src: languageOptions[option].icon\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 100,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 90,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 89,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(ListItemText, {\n          primary: /*#__PURE__*/_jsxDEV(Typography, {\n            color: \"textPrimary\",\n            variant: \"subtitle2\",\n            children: languageOptions[option].label\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 108,\n            columnNumber: 17\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 106,\n          columnNumber: 13\n        }, this)]\n      }, option, true, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n\n_s(LanguagePopover, \"Hd6TMPAqlaYCVBM5IMM9OnvyEW4=\");\n\n_c = LanguagePopover;\nLanguagePopover.propTypes = {\n  language: PropTypes.string.isRequired,\n  onLanguageChange: PropTypes.func.isRequired\n};\n\nvar _c;\n\n$RefreshReg$(_c, \"LanguagePopover\");","map":{"version":3,"sources":["/Users/allan.chepkoy/cloud/kubeflow/components/zoradashboard/src/components/laguage-popover.js"],"names":["useRef","useState","PropTypes","Box","IconButton","ListItemIcon","ListItemText","MenuItem","Popover","Typography","languageOptions","en","icon","label","de","es","LanguagePopover","props","language","onLanguageChange","other","anchorRef","open","setOpen","handleOpen","handleClose","handleLanguageChange","newLanguage","selectedOption","display","height","width","current","horizontal","vertical","sx","Object","keys","map","option","propTypes","string","isRequired","func"],"mappings":"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","sourcesContent":["import { useRef, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport {\n  Box,\n  IconButton,\n  ListItemIcon,\n  ListItemText,\n  MenuItem,\n  Popover,\n  Typography\n} from '@material-ui/core';\n\nconst languageOptions = {\n  en: {\n    icon: '/static/uk_flag.svg',\n    label: 'English'\n  },\n  de: {\n    icon: '/static/de_flag.svg',\n    label: 'German'\n  },\n  es: {\n    icon: '/static/es_flag.svg',\n    label: 'Spanish'\n  }\n};\n\nexport const LanguagePopover = (props) => {\n  const { language, onLanguageChange, ...other } = props;\n  const anchorRef = useRef(null);\n  const [open, setOpen] = useState(false);\n\n  const handleOpen = () => {\n    setOpen(true);\n  };\n\n  const handleClose = () => {\n    setOpen(false);\n  };\n\n  const handleLanguageChange = (newLanguage) => {\n    onLanguageChange(newLanguage);\n    setOpen(false);\n  };\n\n  const selectedOption = languageOptions[language];\n\n  return (\n    <>\n      <IconButton\n        onClick={handleOpen}\n        ref={anchorRef}\n        {...other}\n      >\n        <Box\n          sx={{\n            display: 'flex',\n            height: 20,\n            width: 20,\n            '& img': {\n              width: '100%'\n            }\n          }}\n        >\n          <img\n            alt={selectedOption.label}\n            src={selectedOption.icon}\n          />\n        </Box>\n      </IconButton>\n      <Popover\n        anchorEl={anchorRef.current}\n        anchorOrigin={{\n          horizontal: 'center',\n          vertical: 'bottom'\n        }}\n        keepMounted\n        onClose={handleClose}\n        open={open}\n        PaperProps={{\n          sx: { width: 240 }\n        }}\n      >\n        {Object.keys(languageOptions).map((option) => (\n          <MenuItem\n            onClick={() => handleLanguageChange(option)}\n            key={option}\n          >\n            <ListItemIcon>\n              <Box\n                sx={{\n                  display: 'flex',\n                  height: 20,\n                  width: 20,\n                  '& img': {\n                    width: '100%'\n                  }\n                }}\n              >\n                <img\n                  alt={languageOptions[option].label}\n                  src={languageOptions[option].icon}\n                />\n              </Box>\n            </ListItemIcon>\n            <ListItemText\n              primary={(\n                <Typography\n                  color=\"textPrimary\"\n                  variant=\"subtitle2\"\n                >\n                  {languageOptions[option].label}\n                </Typography>\n              )}\n            />\n          </MenuItem>\n        ))}\n      </Popover>\n    </>\n  );\n};\n\nLanguagePopover.propTypes = {\n  language: PropTypes.string.isRequired,\n  onLanguageChange: PropTypes.func.isRequired\n};\n"]},"metadata":{},"sourceType":"module"}
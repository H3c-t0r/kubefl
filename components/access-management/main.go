/*
 * Kubeflow Auth
 *
 * Access Management API.
 *
 * API version: 1.0.0
 * Contact: kubeflow-engineering@google.com
 * Generated by: Swagger Codegen (https://github.com/swagger-api/swagger-codegen.git)
 */

package main

import (
	"flag"
	log "github.com/sirupsen/logrus"
	"k8s.io/client-go/kubernetes/scheme"
	"net/http"

	"github.com/kubeflow/kubeflow/components/access-management/kfam"
	profile "github.com/kubeflow/kubeflow/components/access-management/pkg/apis/kubeflow/v1alpha1"
	istio "github.com/kubeflow/kubeflow/components/access-management/pkg/apis/istiorbac/v1alpha1"
)

const USERIDHEADER = "userid-header"
const USERIDPREFIX = "userid-prefix"
const CLUSTERADMIN = "cluster-admin"


func main() {
	log.Printf("Server started")
	var userIdHeader string
	var userIdPrefix string
	var clusterAdmin string
	flag.StringVar(&userIdHeader, USERIDHEADER, "x-goog-authenticated-user-email", "Key of request header containing user id")
	flag.StringVar(&userIdPrefix, USERIDPREFIX, "accounts.google.com:", "Request header user id common prefix")
	flag.StringVar(&clusterAdmin, CLUSTERADMIN, "kunming@google.com", "cluster admin")
	flag.Parse()

	profile.AddToScheme(scheme.Scheme)
	istio.AddToScheme(scheme.Scheme)

	profileClient, err := kfam.NewKfamClient(userIdHeader, userIdPrefix, clusterAdmin)
	if err != nil {
		log.Print(err)
		panic(err)
	}

	router := kfam.NewRouter(profileClient)

	log.Fatal(http.ListenAndServe(":8081", router))
}

/*
 * Kubeflow Auth
 *
 * Access Management API.
 *
 * API version: 1.0.0
 * Contact: kubeflow-engineering@google.com
 * Generated by: Swagger Codegen (https://github.com/swagger-api/swagger-codegen.git)
 */

package kfam

import (
	"encoding/json"
	profileRegister "github.com/kubeflow/kubeflow/components/access-management/pkg/apis/kubeflow/v1alpha1"
	istioRegister "github.com/kubeflow/kubeflow/components/access-management/pkg/apis/istiorbac/v1alpha1"
	profileV1alpha1 "github.com/kubeflow/kubeflow/components/profile-controller/pkg/apis/kubeflow/v1alpha1"
	clientset "k8s.io/client-go/kubernetes"
	"k8s.io/apimachinery/pkg/runtime/schema"
	"k8s.io/apimachinery/pkg/runtime/serializer"
	"k8s.io/client-go/kubernetes/scheme"
	_ "k8s.io/client-go/plugin/pkg/client/auth/gcp"
	"k8s.io/client-go/rest"
	"net/http"
	"path"
	"sigs.k8s.io/controller-runtime/pkg/client/config"
)

type KfamV1Alpha1Interface interface {
	CreateBinding(w http.ResponseWriter, r *http.Request)
	CreateProfile(w http.ResponseWriter, r *http.Request)
	DeleteBinding(w http.ResponseWriter, r *http.Request)
	DeleteProfile(w http.ResponseWriter, r *http.Request)
	ReadBinding(w http.ResponseWriter, r *http.Request)
}

type KfamV1Alpha1Client struct {
	profileClient ProfileInterface
	bindingClient BindingInterface
}

func NewKfamClient(userIdHeader string, userIdPrefix string) (*KfamV1Alpha1Client, error) {
	profileRESTClient, err := getRESTClient(profileRegister.GroupName, profileRegister.GroupVersion)
	if err != nil {
		return nil, err
	}
	istioRESTClient, err := getRESTClient(istioRegister.GroupName, istioRegister.GroupVersion)
	if err != nil {
		return nil, err
	}
	restconfig, err := config.GetConfig()
	if err != nil {
		return nil, err
	}
	kubeClient, err := clientset.NewForConfig(restconfig)
	if err != nil {
		return nil, err
	}
	return &KfamV1Alpha1Client{
		profileClient: &ProfileClient{
			restClient: profileRESTClient,
		},
		bindingClient: &BindingClient{
			restClient: 	istioRESTClient,
			kubeClient: 	kubeClient,
			userIdHeader:	userIdHeader,
			userIdPrefix:	userIdPrefix,
		},
	}, nil
}

func getRESTClient(group string, version string) (*rest.RESTClient, error) {
	restconfig, err := config.GetConfig()
	if err != nil {
		return nil, err
	}
	restconfig.ContentConfig.GroupVersion = &schema.GroupVersion{Group: profileRegister.GroupName, Version: profileRegister.GroupVersion}
	restconfig.APIPath = "/apis"
	restconfig.NegotiatedSerializer = serializer.DirectCodecFactory{CodecFactory: scheme.Codecs}
	restconfig.UserAgent = rest.DefaultKubernetesUserAgent()
	return rest.RESTClientFor(restconfig)
}

func (c *KfamV1Alpha1Client) CreateBinding(w http.ResponseWriter, r *http.Request) {
	w.Header().Set("Content-Type", "application/json; charset=UTF-8")
	var binding Binding
	if err := json.NewDecoder(r.Body).Decode(&binding); err != nil {
		json.NewEncoder(w).Encode(err)
		w.WriteHeader(http.StatusForbidden)
		return
	}
	err := c.bindingClient.Create(&binding)
	if err == nil {
		w.WriteHeader(http.StatusOK)
	} else {
		w.WriteHeader(http.StatusForbidden)
		w.Write([]byte(err.Error()))
	}
}

func (c *KfamV1Alpha1Client) CreateProfile(w http.ResponseWriter, r *http.Request) {
	w.Header().Set("Content-Type", "application/json; charset=UTF-8")
	var profile profileV1alpha1.Profile
	if err := json.NewDecoder(r.Body).Decode(&profile); err != nil {
		json.NewEncoder(w).Encode(err)
		w.WriteHeader(http.StatusForbidden)
		return
	}
	_, err := c.profileClient.Create(&profile)
	if err == nil {
		w.WriteHeader(http.StatusOK)
	} else {
		w.WriteHeader(http.StatusForbidden)
		w.Write([]byte(err.Error()))
	}
}

func (c *KfamV1Alpha1Client) DeleteBinding(w http.ResponseWriter, r *http.Request) {
	w.Header().Set("Content-Type", "application/json; charset=UTF-8")
	w.WriteHeader(http.StatusOK)
}

func (c *KfamV1Alpha1Client) DeleteProfile(w http.ResponseWriter, r *http.Request) {
	w.Header().Set("Content-Type", "application/json; charset=UTF-8")
	profileName := path.Base(r.RequestURI)
	//TODO: check permission before delete
	err := c.profileClient.Delete(profileName, nil)
	if err == nil {
		w.WriteHeader(http.StatusOK)
	} else {
		w.WriteHeader(http.StatusUnauthorized)
		w.Write([]byte(err.Error()))
	}
}

func (c *KfamV1Alpha1Client) ReadBinding(w http.ResponseWriter, r *http.Request) {
	w.Header().Set("Content-Type", "application/json; charset=UTF-8")
	w.WriteHeader(http.StatusOK)
}

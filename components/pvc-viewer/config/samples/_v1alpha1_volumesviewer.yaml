apiVersion: kubeflow.org/v1alpha1
kind: PVCViewer
metadata:
  name: pvcviewer-sample
  namespace: kubeflow-user-example-com
spec:
  # The podSpec is applied to the deployment.Spec.Template.Spec
  # and thus, represents the core viewer's application
  podSpec:
    containers:
      - name: main
        image: filebrowser/filebrowser:latest
        env:
          - name: FB_ADDRESS
            value: "0.0.0.0"
          - name: FB_PORT
            value: "8080"
          - name: FB_DATABASE
            value: /tmp/filebrowser.db
          - name: FB_NOAUTH
            value: "true"
          # Note: below we need to get somewhat creative
          # Our viewer needs the env-variable FB_BASEURL
          # As we define below how the VirtualService is prefixed,
          # we can assemble the value using the downward API
          - name: NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          - name: VIEWER_NAME
            valueFrom:
              fieldRef:
                fieldPath: metadata.labels['app.kubernetes.io/name']
          - name: FB_BASEURL
            value: /pvcviewer/$(NAMESPACE)/$(VIEWER_NAME)/
        volumeMounts:
          - name: rwo-pvc
            mountPath: /data
        workingDir: /data
    volumes:
      - name: rwo-pvc
        persistentVolumeClaim:
          claimName: pvcviewer-sample
  networking:
    # Specifies the application's target port used by the Service
    targetPort: 8080
    # If defined, an istio VirtualService is created, pointing to the Service
    virtualService:
      # The base prefix is suffixed by '/namespace/name' to create the
      # VirtualService's prefix and a unique URL for each started viewer
      basePrefix: "/pvcviewer"
      # You may specify the VirtualService's rewrite.
      # If not set, the prefix's value is used
      rewrite: "/"
      # By default, no timeout is set
      # timeout: 30s
  rwoScheduling:
    # If set to true, the controller detects RWO-Volumes referred to by the
    # podSpec and uses affinities to schedule the viewer to nodes
    # where the volume is currently mounted. This enables the viewer to
    # access RWO-Volumes, even though they might already be mounted.
    enabled: true
    # Using the rwoScheduling feature, the viewer might block other application
    # from (re-starting). Setting restart to true instructs the controller to
    # re-compute the affinity in case Pods start using the viewer's RWO-Volumes.
    # Thus, the viewer might restart on another node without blocking new Pods.
    restart: true
---
# Create the PVC our viewer is using
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: pvcviewer-sample
  namespace: kubeflow-user-example-com
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi
---
# We may as well create a pod mounting the PVC.
# In case the pod is scheduled to another node,
# our viewer will restart.
# apiVersion: v1
# kind: Pod
# metadata:
#   name: pvcviewer-sample-mounting-pod
#   namespace: kubeflow-user-example-com
# spec:
#   containers:
#   - args:
#     - /bin/sh
#     - -c
#     - sleep Infinity
#     image: busybox:latest
#     name: main
#     volumeMounts:
#       - name: rwo-pvc
#         mountPath: /data
#     workingDir: /data
#   volumes:
#   - name: rwo-pvc
#     persistentVolumeClaim:
#       claimName: pvcviewer-sample
